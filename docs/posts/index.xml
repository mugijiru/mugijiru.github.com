<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 麦汁三昧</title>
        <link>https://mugijiru.github.io/posts/</link>
        <description>Recent content in Posts on 麦汁三昧</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-JP</language>
        <lastBuildDate>Sun, 28 Feb 2021 11:19:00 +0900</lastBuildDate>
        <atom:link href="https://mugijiru.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>ember-rails でコンポーネントをサブフォルダに配置する</title>
            <link>https://mugijiru.github.io/posts/ember-rails-component-in-subfolder/</link>
            <pubDate>Sun, 28 Feb 2021 11:19:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-component-in-subfolder/</guid>
            <description>Ember.js に限らずコンポーネントは増えてくるとサブフォルダに分割して管理したくなるよね。ということでそのあたりの記事。 これも、ES6 Module 対応版と旧来版</description>
            <content type="html"><![CDATA[<p>Ember.js に限らずコンポーネントは増えてくるとサブフォルダに分割して管理したくなるよね。ということでそのあたりの記事。</p>
<p>これも、ES6 Module 対応版と旧来版の両方を書く。
ES6 Module 対応版は何も考えることがないので、この記事は旧来版のためにあるようなものだけど。</p>
<h2 id="es6-module-対応版の場合">ES6 Module 対応版の場合</h2>
<p>上に書いたようにこれは <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/14">https://github.com/mugijiru/ember-rails-todo-app/pull/14</a> に実装してあるけどとっても簡単</p>
<h3 id="component-をサブフォルダに移動">component をサブフォルダに移動</h3>
<p><code>components</code> の下に適当なフォルダを掘ってその中に移動するだけ。</p>
<h3 id="template-をサブフォルダに移動">template をサブフォルダに移動</h3>
<p><code>templates/components</code> の下に適当なフォルダを掘ってその中に移動するだけ。</p>
<h3 id="template-からの呼び出し">template からの呼び出し</h3>
<p>template, component をそれぞれ</p>
<dl>
<dt>template</dt>
<dd><code>templates/components/hoge/fuga.hbs</code></dd>
<dt>component</dt>
<dd><code>components/hoge/fuga.module.es6</code></dd>
</dl>
<p>と配置した場合は
<code>{{hoge/fuga}}</code> と書いて呼び出せばいい感じに動く。以上。</p>
<p>こういう感じで動くように <a href="https://github.com/ember-cli/ember-resolver/tree/v0.1.21">ember-resolver@0.1.21</a> が作られてるっぽいのでとても楽。</p>
<p>Ember.js のドキュメントなどを見ている感じだと多分もっと新しいバージョンでも同じ感じで動くっぽい。というわけで Ember.js@3 にしても多分動きそうなので安心感がある。</p>
<h2 id="旧来版の場合">旧来版の場合</h2>
<p>これは GlobalsResolver の挙動のおかげでちょっと大変。</p>
<p>と言っても
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/15">https://github.com/mugijiru/ember-rails-todo-app/pull/15</a>
で実装してある。</p>
<p>今回やりたかったことは、テンプレートとコンポーネントをサブフォルダに移動して扱えるようにすることなので、その実現方法を書いておく</p>
<h3 id="template-からの呼び出し">template からの呼び出し</h3>
<p><code>{{hoge/fuga}}</code> と呼び出した際に <a href="https://github.com/emberjs/ember.js/tree/v2.18.2/packages/ember-application/lib/system/resolver.js#L34">GlobalsResolver</a> でどう解釈されるとかというと
<a href="/posts/ember-rails-extract-common-libs/">前の記事</a> にも書いたように
Hoge という名前空間の FugaComponent を探しに行くようになってるというのが前提。</p>
<h3 id="component-をサブフォルダに移動">component をサブフォルダに移動</h3>
<p>GlobalsRegister の解釈に合わせて
FugaCompnent を Hoge 名前空間に所属させればいいので</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Hoge</span>.<span style="color:#a6e22e">FugaComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Compnent</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>という形で定義しておけばいい。</p>
<p>旧来方式だとファイル自体は components の中にあればファイル名も位置も何でもいいはずなので人間がわかりやすいように <code>components/hoge/fuga.js.es6</code> として配置したら良い。</p>
<p>また、事前に Hoge という名前空間は必要なので
<code>components/hoge.js.es6</code> とファイルで</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">Hoge</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namespace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><p>としておく。</p>
<p>前回の共通ライブラリ切り出しと大体似たお話ですね。</p>
<h3 id="template-をサブフォルダに移動">template をサブフォルダに移動</h3>
<p>これは難しいことは何もなくて
<code>templates/components/&lt;名前空間&gt;/&lt;コンポーネント名&gt;.hbs</code>
みたいに配置したら良い。</p>
<p>つまり <code>Hoge.FugaComponent</code> の場合は
<code>templates/components/hoge/fuga.hbs</code>
と置けばいい。</p>
<h3 id="さらにネストさせたい場合">さらにネストさせたい場合</h3>
<p>試してないけど、
<a href="https://github.com/emberjs/ember.js/blob/e2007b6ecb046fd06f6b43c381e8a1128914ad43/packages/%40ember/application/globals-resolver.js#L221">GlobalsRegister の実装</a> を見ている感じだと、多分</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">Hoge</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namesupace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Hoge</span>.<span style="color:#a6e22e">Fuga</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namesupace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Hoge</span>.<span style="color:#a6e22e">Fuga</span>.<span style="color:#a6e22e">PiyoComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>にみたいな感じに名前空間をネストさせれば大丈夫そう。</p>
<h2 id="最後に">最後に</h2>
<p>前回の共通ライブラリ切り出しよりは簡単でしたね。</p>
<p>ES6 Module 対応版では直感的にやるだけで終わるし、旧来版でも共通ライブラリと大体やること一緒というか、それよりも手順が少ないので、サブフォルダへの移動を先にやった方が良かったかも。</p>
<p>あと、今回も両パターンでやってるので、
ES6 Module 移行前にこちらを実施しても簡単な修正で対応できることがわかりました。やったね。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails でコンポーネントを共通ライブラリとして切り出す</title>
            <link>https://mugijiru.github.io/posts/ember-rails-extract-common-libs/</link>
            <pubDate>Sun, 28 Feb 2021 10:45:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-extract-common-libs/</guid>
            <description>ember-rails を使って1つの Rails アプリの上に複数の Ember.js アプリケーションを動かしていると各アプリで同じようなコンポーネントを使っていたり、あるいは同じようなコ</description>
            <content type="html"><![CDATA[<p>ember-rails を使って1つの Rails アプリの上に複数の Ember.js アプリケーションを動かしていると各アプリで同じようなコンポーネントを使っていたり、あるいは同じようなコンポーネントが必要だというのに気付いて共通ライブラリとして実装したくなることがある。あるんだよ。</p>
<p>というわけで、その共通化を2パターンでやってみた。
2パターンというのは 旧来の書き方の場合と
ES6 Module 対応版の場合とである。</p>
<p>なおいずれのパターンもサーバへのデプロイはやってないのでもしかしたらサーバ環境では動かないかもしれないがご容赦を。</p>
<h2 id="旧来版">旧来版</h2>
<p>先に答えを出すと
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13">https://github.com/mugijiru/ember-rails-todo-app/pull/13</a>
に実装した通りである。</p>
<h3 id="template-からの呼び出し">template からの呼び出し</h3>
<p>template で <code>{{ember-libs/button}}</code> と書いた場合に
Resolver には <code>component:ember-libs/button</code> として解釈するように要求されるっぽい。これはソースからではなく、挙動的に確かめただけ。</p>
<h3 id="コンポーネントの探索">コンポーネントの探索</h3>
<p>旧来の書き方の場合に探索に使われるのが GlobalsResolver というやつ。</p>
<p>この GlobalsResolver というやつは <a href="https://github.com/emberjs/ember.js/blob/e2007b6ecb046fd06f6b43c381e8a1128914ad43/packages/%40ember/application/globals-resolver.js#L59-L76">コメント</a> にも書かれてるように
<code>component:ember-libs/button</code> と渡されたら、
GlobalsResolver は <code>EmberLibs.ButtonComponent</code> として解釈するようになっている。つまり EmberLibs という名前空間の ButtonComponent を探しに行くようになっている。</p>
<h3 id="名前空間の定義">名前空間の定義</h3>
<p>というわけで、まずは <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-e1803bb0635866bc90975a1321dbfa6d20be59e76ec3d7b80c8acc4656f8af9fR6">ember-libs/ember-libs.js.es6</a> に書いてるように</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">EmberLibs</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namespace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><p>と書くことで
EmberLibs という名前空間を定義してやる。</p>
<p>一応 <code>ember-libs/ember-libs.js.es6</code> では require の順番として
ember はそこで定義している実装を使うので先に require してそのファイルで定義している名前空間を components で使うので components を require するより前に
require_self をしている。</p>
<h3 id="共通コンポーネントの記述">共通コンポーネントの記述</h3>
<p>各コンポーネントはその名前空間の下に入るように書けばいい。例えば <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-9f9be147342dc470d8f0cba8a06a55a210550e01b22502bd6e0aff0d029ae38cR1">ember-libs/components/button.js.es6</a> に書いてるように</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">EmberLibs</span>.<span style="color:#a6e22e">ButtonComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>というように書いてやれば動く。</p>
<h3 id="config-dot-handlerbars-dot-templates-root-の設定">config.handlerbars.templates_root の設定</h3>
<p>templates を ember-libs/templates に入れるので
Rails 側の設定で <code>config.handlebars.templates_root</code> に <code>ember-libs/templates</code> を追加するのを忘れずに。
ember-rails の設定例に従っていれば <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-c1fd91cb1911a0512578b99f657554526f3e1421decdb9e908712beab57e10f9R34">config/application.rb</a> に設定があるはず。</p>
<h3 id="利用側の設定">利用側の設定</h3>
<p>あとは <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-2cb7f9d0c761533d0e2b01e0b7e6f4a34529c7b52f9a13c7493b2629251bccd8R9">todo-app/application.js.es6</a> に書いてるようにこの共通コンポーネントを使いたいアプリ側で</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//= require ember-libs/ember-libs
</span></code></pre></div><p>としてやるだけでさくっと使えるようになる。</p>
<h3 id="他の-type-について">他の type について</h3>
<p>試してないけど mixin や service ぐらいなら同じノリでいけるんじゃないかなと思ってる。
model もいけそう。名前空間が変わるだけだし、その呼び出しも難しくないし、大体なんとかなりそう。</p>
<h3 id="余談-名前空間を分けない場合">余談: 名前空間を分けない場合</h3>
<p>上のようなやりかたをしているのは、名前空間を分けたいってのが先だったので、各アプリで名前空間を分ける必要がなければ、全部のアプリで</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window <span style="color:#a6e22e">App</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Application</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><p>とかしちゃって</p>
<p><code>ember-libs/components/button.js.es6</code> では普通に書く場合と同じように</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">App</span>.<span style="color:#a6e22e">ButtonComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>みたいにしておいて require したら <code>{{button}}</code> で使える。個人的には、名前空間が混ざるとどっちかが上書きされたりしそうで怖くて嫌だけど。</p>
<h2 id="es6-module-対応版の場合">ES6 Module 対応版の場合</h2>
<p>最初に答えを出すと
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12">https://github.com/mugijiru/ember-rails-todo-app/pull/12</a>
で実装したやつ。</p>
<h3 id="コンポーネントの探索">コンポーネントの探索</h3>
<p>ES6 Module で書かれている Ember Application では基本的に単一の名前空間しか持たないようである。また、使用される Resolver が <a href="https://github.com/ember-cli/ember-resolver/tree/v0.1.21">ember-resolver@0.1.21</a> となっている。</p>
<p>こいつは <code>component:ember-libs/button</code> と渡って来た時の解釈が GlobalsResolver と異なっている。この ember-resolver の場合は、アプリケーションの下の <code>components/ember-libs/button</code> を探しに行く。</p>
<p>なのだけど今回はそんなところを探しに行って欲しくないので、
regsiter を Ember.js で自動的に解決して対応してもらうのではなく
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-029812c538a995224fcf19bfa24f65558246c054aea77c95ec1f4a404b4f5256R1">ember-libs/ember-libs.module.es6</a> に書いているように、自前で</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">register</span>()
</code></pre></div><p>して対応することにした。</p>
<h3 id="コンポーネントの-register">コンポーネントの register</h3>
<p>基本的には以下のように書いておけば Button コンポーネントは動くようになる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Button</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./components/button&#39;</span>;

<span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;component:ember-libs/button&#39;</span>, <span style="color:#a6e22e">Button</span>);
</code></pre></div><p>が、コンポーネントが増えていった際に全部そうやって書くのはアホらしい。というわけで、自動的に解決するようにした。</p>
<h3 id="コンポーネントの-auto-register">コンポーネントの auto register</h3>
<p>ES6 Module 対応して import している場合に ember-rails では実際はどんな形に transpile されるかというとどうやら requirejs の機能で読み込んだりしているらしい。</p>
<p>で export されているファイルは <code>requirejs.entries</code> に含まれているのでそこから必要なものを探し出して
<code>application.register</code> に対し、解釈してほしい名前で渡してクラスを渡しておけば
template で <code>{{ember-libs/button}}</code> とした時に require したクラスのインスタンスとして動いてもらえる。</p>
<p>という感じで自動的に register する処理を <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-029812c538a995224fcf19bfa24f65558246c054aea77c95ec1f4a404b4f5256R4">メソッドにして</a> おけば、利用側はそれを呼び出すだけでセットアップが済む</p>
<h3 id="config-dot-handlebars-dot-templates-root-の設定">config.handlebars.templates_root の設定</h3>
<p>やはりこちらの場合も templates を <code>ember-libs/templates</code> に入れるので
Rails 側の設定で <code>config.handlebars.templates_root</code> に <code>ember-libs/templates</code> を追加するのを忘れずに。
ember-rails の設定例に従っていれば <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-c1fd91cb1911a0512578b99f657554526f3e1421decdb9e908712beab57e10f9R34">config/application.rb</a> に設定があるはず。</p>
<h3 id="利用側の設定">利用側の設定</h3>
<p>アプリ側では <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-97468a821d4c12c1b223617fba29257a5b1e00553a1b8e8f403ee99864756ebaR4">initializers/resolve-common-libs に書いている</a> ように
initializer で</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">EmberLibs</span>.<span style="color:#a6e22e">registerAll</span>()
</code></pre></div><p>を叩くだけでいい感じに使えるようになる。</p>
<h3 id="他の-type-について">他の type について</h3>
<p>試してないけど、component でやってみた所感。</p>
<p>mixin はどうせ明示的に import して使うので関係なさそう。
service は、component と同じやりかたでいけそうな気がする。
model もいけそうなので user model を共通化するような用途がありそう。</p>
<p>controller もいけそうだけどそれに付随する route からどう呼ばれるかが難しそう。</p>
<h3 id="余談-他の方法について">余談: 他の方法について</h3>
<p>多分 EmberEngine とか EmberAddon の仕組みを使って似たようなことはできそうな気はする。</p>
<p>だけど ember-rails で Engine や Addon を使うというのはそれはそれでかなり大変かと思われるので今回はそれを動かすようなことはしてない。</p>
<p>より正確にいうと、それしか方法がないかもと思って途中まで調べたけど、厳しそうだったので今回は上述の方法にしておいた。</p>
<h2 id="最後に">最後に</h2>
<p>旧来版と ES6 Module 対応版とで実装方法は異なるがどちらでも同じような使い勝手でコンポーネントを共通ライブラリとすることができることがわかった。</p>
<p>両方のパターンが使えることがわかったので、
ES6 Module 対応版への移行がまだでも躊躇せずライブラリを分割できそう。</p>
]]></content>
        </item>
        
        <item>
            <title>古い ember-rails App で ES6 Module 化を完了した</title>
            <link>https://mugijiru.github.io/posts/ember-rails-complete-modulize/</link>
            <pubDate>Tue, 23 Feb 2021 20:45:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-complete-modulize/</guid>
            <description>#10 サブフォルダのファイルを全て module に移行した #11 残りのファイルも module 化した でやってることで全てだけど 前回の記事 でやってた内容を完了まで持って行った</description>
            <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/10">#10 サブフォルダのファイルを全て module に移行した</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11">#11 残りのファイルも module 化した</a></li>
</ul>
<p>でやってることで全てだけど
<a href="/posts/ember-rails-partial-modulize/">前回の記事</a> でやってた内容を完了まで持って行った。</p>
<h2 id="サブフォルダ以下の-es6-module-化">サブフォルダ以下の ES6 Module 化</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/10">https://github.com/mugijiru/ember-rails-todo-app/pull/10</a> でやったこと。</p>
<p>これは基本的に単純で、ほぼ前回の記事でやってることを全部のフォルダに適用しただけ。</p>
<p>Model だけ命名規則が他と違うので
import 関連の処理をそこだけ分岐している</p>
<pre><code class="language-erb" data-lang="erb">&lt;% if dir == 'models' %&gt;
  &lt;% klass_name = module_name.underscore.camelize %&gt;
&lt;% else %&gt;
  &lt;% klass_name = &quot;#{module_name.underscore.camelize}#{dir.underscore.singularize.camelize}&quot; %&gt;
&lt;% end %&gt;
import &lt;%= klass_name %&gt; from 'todo-app/modules/&lt;%= dir %&gt;/&lt;%= module_name %&gt;';
TodoApp.&lt;%= klass_name %&gt; = &lt;%= klass_name %&gt;;
</code></pre><p>Model は <code>models/hoge.module.es6</code> とあったら <code>Hoge</code> として使われるようにして、他は例えば Component だと <code>components/fuga.module.es6</code> とあったら <code>FugaComponent</code> として使われるようにしているだけ。</p>
<p>あとはそれぞれのファイルを <code>*.js.es6</code> から <code>*.module.es6</code> に rename して import, export に書き換えるだけ。とても簡単だし、全部まとめて変更する必要もないので楽。</p>
<p>ただこれをやってる時に気付いたのが
<code>import-modules.js.es6.erb</code> が cache されてるおかげで
module 化対象のファイルだけ変更・移動しても import 文が変更されなくてうまく読み込まれない問題があるということ。何故か rspec は通ったりするけど。</p>
<p>まあその時は <code>rails tmp:cache:clear</code> して cache を消すか
<code>import-modules.js.es6.erb</code> に適当に空行でも加えて cache を使われないようにしたら解決する。</p>
<h2 id="router-dot-js-dot-es6-app-name-dot-js-dot-es6-environment-dot-js-dot-es6-の-es6-module-化">router.js.es6, &lt;APP_NAME&gt;.js.es6, environment.js.es6 の ES6 Module 化</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11">https://github.com/mugijiru/ember-rails-todo-app/pull/11</a> でやったこと。</p>
<p>サブフォルダのファイルを全部 module にしたら後は変更しないといけないファイルはこれぐらい。</p>
<p>変更の流れは大体以下の感じ</p>
<ol>
<li>router.js.es6 をこれまでのファイルと同じように module 化</li>
<li>environment.js.es6 も同様に module 化</li>
<li>&lt;APP_NAME&gt;.js.es6 の module 化とそれに伴うファイル移動等</li>
</ol>
<h3 id="router-dot-js-dot-es6-をこれまでのファイルと同じように-module-化">router.js.es6 をこれまでのファイルと同じように module 化</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/359520f6656920ac8ef3fe623d15f2368cc66a78">https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/359520f6656920ac8ef3fe623d15f2368cc66a78</a></p>
<p>この commit でやってることそのもの。</p>
<p>拡張子を module.es6 に変更して中身を module っぽく書いて
require される順番を最後に移動し、最後に他のファイルみたいに import してあげるだけ。</p>
<h3 id="environment-dot-js-dot-es6-も同様に-module-化">environment.js.es6 も同様に module 化</h3>
<p>実はこのファイルをまともに使ってなかったので PR では後ろに回したんだけど、多分ちゃんとやるならこのタイミングかなって。</p>
<p>これもさっきの手順と同じ感じだと思う。
require するタイミングは <code>//= require ./todo-app</code> の直前になる。そのタイミングになる理由はよく知らんけど
ember-rails で generate したらそこに来るからそこでいいんだろ(適当)</p>
<p>実際 import して使われるタイミングは application.js.es6 の中で明示的に import することになるので
require_self するより前ならどこでも良さそうな気はする。</p>
<p>あと、多分、古いスタイルに書き換える時に適当にやってたのでそもそも古いスタイルでの environment の置き方が正しくなさそうな気もする。</p>
<p>一応 <a href="https://guides.emberjs.com/v1.10.0/configuring-ember/">https://guides.emberjs.com/v1.10.0/configuring-ember/</a> に</p>
<blockquote>
<p>Note that the above code must be evaluated before Ember.js loads.</p>
</blockquote>
<p>と書いてるのでそれに従って対応してたつもりだけどね。</p>
<p>ま、古いスタイルの正しいやりかたを必要としている人はいないだろうし新しい形式でちゃんと動けば良かろう。ちゃんと動くか知らんけど。</p>
<h3 id="app-name-dot-js-dot-es6-の-module-化とそれに伴うファイル移動等">&lt;APP_NAME&gt;.js.es6 の module 化とそれに伴うファイル移動等</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/d3673bfa455906abd0ff6d31d1d3f4f083bd4a71">https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/d3673bfa455906abd0ff6d31d1d3f4f083bd4a71</a>
の commit でやってることだけど、ここが結構まとめて色々やらないといけなさそう。</p>
<p>&lt;APP_NAME&gt;.js.es6 を ES6 Module 化をするんだけどここが一番色々書き変わるところ。</p>
<p>事前に Namespace を用意する必要がなくなったので require_self を一番最後にしたり、
<code>import Application from 'ember-rails/application</code> しておいてそこから extend して export して、みたいな。まあ <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/d3673bfa455906abd0ff6d31d1d3f4f083bd4a71#diff-7aa5fb21bec5b1e11d78f1b7c34b3b92f05b293d97a99ed2af713f81ea5dab82">ファイル</a> を見た方が早いか。</p>
<p>で、こいつを ES6 Module にすると ember-rails での自動 import が動くようになる。なので、事前に module 化していたファイルを全部本来の位置に戻した上でこれまでお世話になってきた <code>import-modules.js.es6.erb</code> にさよならすることになる。ま、そいつは消しやすいように別ファイルに分離していたんだけども。</p>
<p>あと当然 application.js.es6 も、他のファイルが全部 module 化された前提で書き換える必要がある。まあほとんど &lt;APP_NAME&gt;.js.es6 を import して create するだけなんだけど。</p>
<p>以上でほぼ終わりだけど、不要になった modules フォルダを消して require_tree する処理を消すのを忘れずに。麦汁さんはそれを忘れて <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/0f90fda419f9c23f844ba2e53dc1c2fa2e9b5d51">commit を積むことになった</a></p>
<h2 id="ここまでやると何ができるようになるか">ここまでやると何ができるようになるか</h2>
<p>ember-rails で書いた上で最も最新の記述に変更できた状態となる。というわけで、これでようやく ember-cli-rails 移行する準備ができました! やったね!</p>
<p>まあぶっちゃけ ember-cli-rails 移行と module 化を同時にやっちゃうという手もあるけど、
1回1回の変更差分を小さくするには、バラバラがいいかなってことで分けてやっている。</p>
<p>だって、そうじゃないと「はい変更の多い PR はリジェクト〜wwww」ってされかねない^^</p>
]]></content>
        </item>
        
        <item>
            <title>古い ember-rails App で一部ファイルを ES6 Module 化</title>
            <link>https://mugijiru.github.io/posts/ember-rails-partial-modulize/</link>
            <pubDate>Sun, 21 Feb 2021 22:41:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-partial-modulize/</guid>
            <description>これは何? ember-rails を古いスタイルで書いておいてそれをモダン化していく企画の第一弾の記事。 何をしたのか 今回は ES6 module を使ってない ember-rails アプリケーションで一部</description>
            <content type="html"><![CDATA[<h2 id="これは何">これは何?</h2>
<p>ember-rails を古いスタイルで書いておいてそれをモダン化していく企画の第一弾の記事。</p>
<h2 id="何をしたのか">何をしたのか</h2>
<p>今回は ES6 module を使ってない ember-rails アプリケーションで一部のファイルだけ ES6 Module にしてみた。</p>
<h2 id="何が嬉しい">何が嬉しい?</h2>
<p>今回扱ってるアプリケーションのサイズはとても小さいのでまとめて置き換えることも可能というか、ぶっちゃけ <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/7">古いスタイルに書き換えた PR</a> を revert するだけで
ES6 Module 化できたりする。</p>
<p>しかし、世の中に潜んでいる、レガシー化した ember-rails のプロジェクトでは全部まとめて ES6 Module にするのはファイル数が多過ぎて困難かと考え、敢えて一部のファイルだけ ES6 Module 化する方法を探してみた。</p>
<h2 id="どうやったらできるの">どうやったらできるの?</h2>
<p>簡単に言うと
ES6 Module 形式で書いたやつを import して
Ember.js Application の Namespace に放り込めばいいだけ。</p>
<h3 id="example">Example</h3>
<p>まずはコンポーネントなどを
<code>app/assets/javascripts/ember-app/components/foo.module.es6</code> ってファイル名で</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Ember</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember&#39;</span>;

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>({});
</code></pre></div><p>のように書いておく。拡張子が <code>.module.es6</code> というのがポイントで、そうしておくと
<a href="https://github.com/tricknotes/ember-es6%5Ftemplate">ember-es6_template</a> という Gem が自動的に ES6 の module として判定してくれるようになっている
<a href="https://github.com/tricknotes/ember-es6%5Ftemplate/blob/c1c7b8d23be7669a0aa6c5f9c71b916a3799f9a6/lib/ember/es6%5Ftemplate/sprockets.rb#L10">https://github.com/tricknotes/ember-es6%5Ftemplate/blob/c1c7b8d23be7669a0aa6c5f9c71b916a3799f9a6/lib/ember/es6%5Ftemplate/sprockets.rb#L10</a></p>
<p>そして <code>app/assets/javascripts/ember-app/application.js.es6</code> の末尾にでも</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">FooComponent</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember-app/components/foo&#39;</span>;

<span style="color:#a6e22e">EmberApp</span>.<span style="color:#a6e22e">FooComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">FooComponent</span>;
</code></pre></div><p>のように書いたら、一応 module 形式で書けるし、それを window.EmberApp で用意した Ember.js Application で使えるって感じ。</p>
<h2 id="ファイルの数と同じ量の-import-書くの">ファイルの数と同じ量の import 書くの?</h2>
<p>だるいよね。なので import 処理は
<code>app/assets/javascripts/ember-app/import-modules.js.es6.erb</code>
という erb template でも分離して</p>
<pre><code class="language-erb" data-lang="erb">&lt;% module_dir = Rails.root.join('app/assets/javascripts/ember-app/modules') %&gt;
&lt;% Dir.each_child(module_dir) do |dir| %&gt;
  &lt;% next unless FileTest.directory?(&quot;#{module_dir}/#{dir}&quot;) %&gt;
  &lt;% Dir.glob('*.module.es6', base: &quot;#{module_dir}/#{dir}&quot;) do |module_file| %&gt;
    &lt;% module_name = File.basename(module_file, '.module.es6') %&gt;
    &lt;% klass_name = &quot;#{module_name.underscore.camelize}#{dir.underscore.singularize.camelize}&quot; %&gt;
import &lt;%= klass_name %&gt; from 'ember-app/modules/&lt;%= dir %&gt;/&lt;%= module_name %&gt;';
EmberApp.&lt;%= klass_name %&gt; = &lt;%= klass_name %&gt;;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre><p>とでも書いておけば全部いい感じに読んでくれる。</p>
<h2 id="関連-pr">関連 PR</h2>
<p>実際に動くコードは以下の PR で用意した。
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/8">https://github.com/mugijiru/ember-rails-todo-app/pull/8</a>
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/9">https://github.com/mugijiru/ember-rails-todo-app/pull/9</a></p>
<p>最初の PR で <code>modules</code> フォルダにさらに components フォルダを掘ってその中にファイルを配置している。</p>
<p>その方が全部移行できた後にまるっと置き換えするのに楽そうだからだ。</p>
<p>また import して Namespace に放り込む処理も別ファイルに追い出している。これも、完全移行が済んだら不要になるファイルなので消しやすさを重視して分割しておいた。</p>
<p>さらに後続の PR で、複数のタイプが来ても対応できるように書き換えている。
Model は対応できてないけど、ま、Model は移行してないのでとりあえず放置。</p>
<p>CI でテストも通しているしバッチリだと思う。デプロイできるようにはしてないからサーバで動くかは確認してないけど、ま、大丈夫だろ</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails で書いた Web アプリを GitHub で公開した</title>
            <link>https://mugijiru.github.io/posts/publish-ember-rails-app/</link>
            <pubDate>Sun, 21 Feb 2021 15:40:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/publish-ember-rails-app/</guid>
            <description>この間の記事 で書いたように ember-rails で簡単なアプリケーションを作ってた。よくある TODO アプリである。 先週時点では「テストとかなくてもいいから動けばいいだ</description>
            <content type="html"><![CDATA[<p><a href="/posts/ember-rails-in-2021/">この間の記事</a> で書いたように
ember-rails で簡単なアプリケーションを作ってた。よくある TODO アプリである。</p>
<figure>
    <img src="/ox-hugo/screenshot-ember-rails-todo-app.png"/> 
</figure>

<p>先週時点では「テストとかなくてもいいから動けばいいだろ」って気持ちだったけどなんとなーくテストを追加したくなったりあんまり慣れてない docker-compose 対応してみたりしていたのと平日はこのプログラムに触れてなかったので、結構日が空いてしまった。</p>
<p>まあ、それはともかくとして、とりあえず <a href="https://github.com/mugijiru/ember-rails-todo-app/">https://github.com/mugijiru/ember-rails-todo-app/</a> に置いておいた現時点の最新コミットで <a href="https://github.com/mugijiru/ember-rails-todo-app/tree/v1.1.1">v1.1.1</a> のタグを振ってるやつは自分の知ってる一番古いスタイルで書かれてる状態にしてある。</p>
<h2 id="使ってる-gem">使ってる Gem</h2>
<ul>
<li>Ember.js 関係
<ul>
<li>ember-rails</li>
<li>ember-source</li>
<li>jquery-rails
<ul>
<li>Ember.js は 2 系まで jquery に依存しているので
<ul>
<li>よく見ると ember-rails の依存に入ってるから書かなくて良かったな……</li>
</ul>
</li>
</ul>
</li>
<li>active_model_serializers 0.9
<ul>
<li>0.9 系じゃないとうまく動かないっぽい</li>
</ul>
</li>
</ul>
</li>
<li>CSS framework
<ul>
<li>bootstrap-sass
<ul>
<li>レガシー感の演出のため敢えてこれにしている</li>
</ul>
</li>
</ul>
</li>
<li>テスト関係
<ul>
<li>rspec-rails</li>
<li>factory_bot_rails</li>
<li>database_rewinder</li>
<li>capybara</li>
<li>selenium-webdriver</li>
</ul>
</li>
</ul>
<p>あたり。</p>
<h2 id="レガシー感の演出">レガシー感の演出</h2>
<p>レガシー感を出すために bootstrap-sass(Bootstrap3系になる)を使ったりはしているがあまり特別なものは使ってない。</p>
<p>また ember-rails で ember アプリのソースコードを generate すると
es6 module を使ったようなコードが出力されるけど、これも敢えてレガシー感を出すために module を使わない形式に書き直している。</p>
<p>よりレガシー感を出すために CoffeeScript にするという手もあったけど、さすがにそこまでは頑張りたくないw
もう何年も触ってないよ CoffeeScript&hellip;</p>
<p>そしてページ全体を Ember.js にはしないでページの一部を Ember.js にする <a href="https://guides.emberjs.com/v2.18.0/configuring-ember/embedding-applications/">埋め込み</a> 形式を採用している。既存のアプリに Ember.js を後乗せした感の演出である。実際、構築時には一時的に普通の Rails App として動くようにしていた。</p>
<p>他にこだわったところは、今回は単一のアプリケーションしか動かしてないけど
<a href="https://github.com/emberjs/ember-rails#multiple-ember-application">Multiple Ember Application</a>
の作法に則って、Ember アプリケーションを追加で乗せられるようにしている。これにより「この画面も Ember 化しようず」という流れで
Ember アプリが複数動いてる状態により近くなったんじゃないかなと。実際今回動いてるのは1つだから、ちょっと違うけどね。。。</p>
<h2 id="最後に">最後に</h2>
<p>ここから段々と最新の Ember.js を使えるように寄せていくつもり。</p>
]]></content>
        </item>
        
        <item>
            <title>2021年にもなって ember-rails で新規アプリを書いてみてる</title>
            <link>https://mugijiru.github.io/posts/ember-rails-in-2021/</link>
            <pubDate>Sat, 13 Feb 2021 01:15:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-in-2021/</guid>
            <description>少し思うところがあって、 2021 年になったというのに ember-rails を使って新規で Web アプリを書いている。 ember-rails とは? ember-rails は Ember.js という Web フロントエンド MVC なフレームワークを</description>
            <content type="html"><![CDATA[<p>少し思うところがあって、
2021 年になったというのに <a href="https://github.com/emberjs/ember-rails">ember-rails</a> を使って新規で Web アプリを書いている。</p>
<h2 id="ember-rails-とは">ember-rails とは?</h2>
<p>ember-rails は
Ember.js という Web フロントエンド MVC なフレームワークを
Rails といい感じに連携してくれて快適な Web アプリケーション開発体験を提供してくれるものであった。</p>
<p>過去形なのは、ember-rails は Rails3 とか 4 とかの時代に主に使われていて既にメンテナンスされてないのと、今はそれよりも良い <a href="https://github.com/thoughtbot/ember-cli-rails">ember-cli-rails</a> というのがあるから。</p>
<h2 id="今-ember-rails-を使うと何がつらいか">今 ember-rails を使うと何がつらいか</h2>
<p>色々つらい。</p>
<h3 id="まずメンテナンスが止まってる">まずメンテナンスが止まってる</h3>
<p>なので Rails 6 で動くかがわからない。多分、試している人はいないし、自分もそこまで試す気力はない。</p>
<h3 id="ember-dot-js-のサポートが-2-dot-18-dot-2-までとなっている">Ember.js のサポートが 2.18.2 までとなっている。</h3>
<p>より詳細に話すと
ember-rails が依存している Gem である ember-source で本当は 3.0.0.beta.2 まで出てるんだけど、β版のことは無視する。
<a href="https://rubygems.org/gems/ember-source/versions/2.18.2">https://rubygems.org/gems/ember-source/versions/2.18.2</a></p>
<p>で、その 2.18.2 は既にサポートされてないバージョンである。</p>
<p>サポートされてないバージョンを使うのはセキュリティ面でもまずいしもはや情報もあまり落ちてないので苦行である。</p>
<p>Ember.js 公式サイトのドキュメントが過去のバージョンのものも残されているのでそれを頼りにするしかない。というか公式で残しててくれてありがとう。それがないと何もできないよ。</p>
<h3 id="ember-rails-だと-ember-dot-js-の-addon-が導入できない">ember-rails だと Ember.js の addon が導入できない</h3>
<p>例えば Handlebars でロジックを書く上でとても基本的な比較用のヘルパーを提供してくれる <a href="https://github.com/jmurphyau/ember-truth-helpers">ember-truth-helper</a> が使えない。これが使えないはめっちゃ不便で、それをなんとかするために同じようなコードを自前で用意するハメになる。</p>
<p>他にも <a href="https://github.com/ember-community-russia/awesome-ember">ember-community-russia/awesome-ember</a> に載っている色々なものが使えないわけだ。つらいどころか悲しくなってくる。</p>
<h3 id="自動テストが書けない">自動テストが書けない</h3>
<p>Ember.js は QUnit で自動テストができるようになっているのだが
ember-rails だとそれも使えない。すなわちフロントエンドのコンポーネントの単体テストが書けないのである。</p>
<h2 id="それでも-ember-rails-を使いたい方には">それでも ember-rails を使いたい方には</h2>
<p>どうして素直に ember-cli-rails や ember-cli そのものを使おうとしないのかはわからないけどどうしても ember-rails の世界に住みたいのであれば
<a href="https://github.com/discourse/discourse">discourse</a> のソースを参考にしたら良いと思う。</p>
<p>どうやら <a href="https://github.com/discourse/discourse/pull/11932">ember-cli に乗り換える方針で動いているよう</a> だが今日時点の Gemfile には未だに discourse-ember-source などの記述が残っている状態であり、まだ完全移行はできてない様子。</p>
<p><a href="https://rubygems.org/gems/discourse-ember-source/versions/3.12.2.2">discourse-ember-source</a> は 3.12 系まで追従していたようなのでそこまでは discourse の真似をすれば使えるだろう。</p>
<p>また彼らは ember-rails を使いながら qunit でのテストもできるようにしているようである。正直マジか頑張ったなって気持ち。ちょっとどうやって動かしているのかはわからない。あんまり調べる気力もない。なんとなくわかったことは ES6 の module システムを活用して頑張ってる雰囲気があることである。</p>
<p>他にも addon も使えるようにしている様子でもあるが、これもちょっとよくわかってない。あまり adoon が使われてる気もしないが……。</p>
<p>ともかく ember-rails を独自に拡張した上で色々頑張っているようである。すごい。それでももう ember-cli-rails に乗り換えようとしているようなので今から ember-rails の世界に住もうとするのはやめた方がいいはず。</p>
<p>あ、よく見ると Rails は 6.0 系だ。ってことは少なくとも discourse-ember-rails なら Rails 6.0 でも動くわけか。なるほど。</p>
<h2 id="で-なぜ自分は-ember-rails-で新規アプリを書いているか">で、なぜ自分は ember-rails で新規アプリを書いているか</h2>
<p>マゾなので、敢えてその環境で新規アプリを用意しておいてそこから ember-cli-rails に移行する、みたいなことをしてみたいから。</p>
<p>本当は自分で ember-rails なアプリを書くつもりはなかったんだけどサンプルになるようなアプリが探せなかったってのもある。これが Yak Shaving か〜と思いながら粛々と小さなアプリを書いていくのであった</p>
<p>できたらまた記事にする。アプリ自体は公開しないけど、ソースは GitHub に上げるつもり。</p>
]]></content>
        </item>
        
        <item>
            <title>browse-at-remote を導入した</title>
            <link>https://mugijiru.github.io/posts/add-browse-at-remote/</link>
            <pubDate>Sat, 23 Jan 2021 23:18:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/add-browse-at-remote/</guid>
            <description>仕事中、プルリクのレビューをする際に、「ここのコードがこんな感じになってるから〜」みたいな感じで既存コードへのリンクを張ることがちょくちょく</description>
            <content type="html"><![CDATA[<p>仕事中、プルリクのレビューをする際に、「ここのコードがこんな感じになってるから〜」みたいな感じで既存コードへのリンクを張ることがちょくちょくある。</p>
<p>そういうことをする時、まずそもそも差し示したいコードを確認するんだけどその時は Emacs の中で探す方が早い。で、探して確認するまではいいんだけど、そこから GitHub 上のコードへのリンクを取得しようとするとちょっと面倒。</p>
<p>これまでは、GitHub のリポジトリのトップからディレクトリを辿って行って当該コードを再度探していました。めんどくさいねっ。</p>
<p>というわけで解決する手段を探していて最近導入したのが <a href="https://github.com/rmuslimov/browse-at-remote">browse-at-remote</a> というやつ。</p>
<p>こいつを入れてる状態で、GitHub のリポジトリに突っ込んであるコードの上で
<code>M-x browse-at-remote</code> を実行すると
GitHub でのリポジトリでのコードの位置でブラウザを開いてくれる。</p>
<p>コードの上でと書いたけど、リージョンを選択していればその範囲が選択された状態で実行すると選択した行がハイライトされた状態で開いて便利。</p>
<p>その状態から GitHub 上で <code>Copy permalink</code> をしておいて
PR のコメントにコピーしたリンクを貼り付けるとコードも表示されて便利。</p>
<p>で、結構よく使うコマンドとなったので
Hydra から即呼び出せるようにしてある。</p>
<p>Global に使うコマンドを突っ込んでる Hydra は key-chord で <code>jk</code> を叩くと呼べるようにしていてその中で <code>B</code> を叩けば browse-at-point が呼ばれるようにしてある。</p>
<p>というわけで、導入と Hydra の設定を追加しているプルリクが以下になります。
<a href="https://github.com/mugijiru/.emacs.d/pull/205">https://github.com/mugijiru/.emacs.d/pull/205</a></p>
<p>という使い方をしているけど、実は似た機能を提供している <a href="https://github.com/sshaw/git-link">git-link</a> で <code>git-link-use-commit</code> のフラグを立てておいて他にもいくつか設定を入れたりしたらもっといい感じのことができるのかもしれない。今度試すか……。</p>
]]></content>
        </item>
        
        <item>
            <title>新年明けましておめでとうございます</title>
            <link>https://mugijiru.github.io/posts/happy-new-year-2021/</link>
            <pubDate>Sat, 02 Jan 2021 20:31:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/happy-new-year-2021/</guid>
            <description>&lt;p&gt;新年明けましておめでとうございます。麦汁です。昨年の終わり頃、世間では AdventCalendar で賑ってる頃に、ふと「サイトのリニューアルしたいなあ」なんてことを思って、リニューアルに着手しましたが、ようやくそれが実りそうです。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>新年明けましておめでとうございます。麦汁です。昨年の終わり頃、世間では AdventCalendar で賑ってる頃に、ふと「サイトのリニューアルしたいなあ」なんてことを思って、リニューアルに着手しましたが、ようやくそれが実りそうです。</p>
<p>なんでそんなことをしてるかというと前の記事 <a href="/posts/starting-hugo/">Hugo 始めました</a> でも書いたように「自分が作ったサイトだっせー」ってのが1つあります。</p>
<p>それを構築した時には「デザインとかも全部自分でやっちまおう」ということで全部やろうとしていたのですがデザインセンスが壊滅的だったとか時間がろくに取れないとかやる気が他に吸われていったとかでイマイチなまま放置していました。よくないですねえ。</p>
<p>あと、そことは別にブログサービスを借りて使ってるのですがそっちはそっちで更新がだるいなってのもあってリニューアルと同時に今後のブログ更新はこっちにしてしまおう、というのもあったりします。</p>
<p>Hugo でブログもやってしまう方が <a href="https://ox-hugo.scripter.co/">ox-hugo</a> も使って記事を書き出せるので
org-mode 使い的には幸せになれそうですし。</p>
<p>あとは折角リニューアルしたんだからモチベーションが続くことを願っています。</p>
<p>というわけで 2021 年の抱負は「月に2回はブログを更新する」とします。</p>
<p>結構、緩めな抱負ですが、仕事じゃないのでこのぐらいの方が良かろう……。</p>]]></content>
        </item>
        
        <item>
            <title>Hugo 始めました</title>
            <link>https://mugijiru.github.io/posts/starting-hugo/</link>
            <pubDate>Sun, 20 Dec 2020 15:22:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/starting-hugo/</guid>
            <description>&lt;p&gt;Hugo はなんか Emacs 界隈で流行ってるし、自分のサイトだっせーなーって思ってたので
Hugo を使って、公開されてるテンプレートを適用して
Web サイトを再構築してみることにした。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Hugo はなんか Emacs 界隈で流行ってるし、自分のサイトだっせーなーって思ってたので
Hugo を使って、公開されてるテンプレートを適用して
Web サイトを再構築してみることにした。</p>
<p>他の静的サイトジェネレータもちょっと検討したけど機能面とかも考慮した上で Hugo がいいかなって。主な理由は「流行ってるから」ですが。ほら、流行りに乗りたいじゃん。ちょっと乗り遅れてる気もするけど。</p>
<p>今、とりあえず作ってる最中なんだけど、つい BBS とかチャットとかリンク集とか置きたくなる。
90年代または2000年代脳である。お絵描き BBS も置いたろうかって気持ちになる。</p>]]></content>
        </item>
        
    </channel>
</rss>
