<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 麦汁三昧</title>
        <link>https://mugijiru.github.io/posts/</link>
        <description>Recent content in Posts on 麦汁三昧</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-JP</language>
        <lastBuildDate>Mon, 29 Aug 2022 09:53:00 +0900</lastBuildDate>
        <atom:link href="https://mugijiru.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Kibela の記事を検索できる Ivy 拡張を作った</title>
            <link>https://mugijiru.github.io/posts/release-ivy-kibela/</link>
            <pubDate>Mon, 29 Aug 2022 09:53:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/release-ivy-kibela/</guid>
            <description>Emacs の ivy を使って Kibela の記事を検索できる拡張 ivy-kibela を作りました。 まあ自分用に作っただけなので Melpa にも登録してなかったりと、ちゃんとしてない部分は色々あり</description>
            <content type="html"><![CDATA[<p>Emacs の <a href="https://github.com/abo-abo/swiper">ivy</a> を使って <a href="https://kibe.la/">Kibela</a> の記事を検索できる拡張 <a href="https://github.com/mugijiru/ivy-kibela">ivy-kibela</a> を作りました。</p>
<p>まあ自分用に作っただけなので Melpa にも登録してなかったりと、ちゃんとしてない部分は色々ありますが。</p>
<h2 id="作った理由">作った理由</h2>
<p>現職では情報共有ツールとして Kibela を使っています。そして Kibela の記事を探したい時ってのは大体 Emacs でプログラムを書いている時なので
Emacs 内からさくっと検索できると便利だな〜と思って作りました。</p>
<h2 id="インストール方法">インストール方法</h2>
<p>README に一応書いているけど、さらっとしすぎているので一旦こっちに厚めに書きます。</p>
<h3 id="el-get">el-get</h3>
<p>多分</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(el-get-bundle mugijiru/ivy-kibela)
</code></pre></div><p>で入れられるんじゃないかな。もしダメだったら</p>
<p><a href="https://github.com/mugijiru/.emacs.d/blob/master/recipes/ivy-kibela.rcp">https://github.com/mugijiru/.emacs.d/blob/master/recipes/ivy-kibela.rcp</a></p>
<p>に el-get 用のレシピを置いてるのでそれを使ってください。</p>
<h3 id="マニュアルインストール">マニュアルインストール</h3>
<p>依存関係に</p>
<ul>
<li>request</li>
<li>graphql</li>
<li>ivy</li>
</ul>
<p>があるのでそれらを事前に入れておいてください。そして</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ git clone git@github.com:mugijiru/ivy-kibela.git
</code></pre></div><p>で Clone してきて</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(add-to-list <span style="color:#e6db74">&#39;load-path</span> <span style="color:#e6db74">&#34;CloneしたPATH&#34;</span>)
</code></pre></div><p>みたいな感じで load-path に突っ込んだら使えるようになるはずです</p>
<h3 id="その他">その他</h3>
<p>Melpa への登録は大変そうだったので登録していません。なので package.el とかは使えません。</p>
<p>登録したい気持ちはなくはないけど、頑張る気力がない……。</p>
<h2 id="使い方">使い方</h2>
<p>設定とかは <a href="https://github.com/mugijiru/ivy-kibela#%E8%A8%AD%E5%AE%9A">README</a> に割とちゃんと書いているつもりなので省略。</p>
<p>コマンドは</p>
<ul>
<li>ivy-kibela</li>
<li>ivy-kibela-recent</li>
<li>ivy-kibela-search</li>
</ul>
<p>の3つを用意しています。</p>
<h3 id="ivy-kibela">ivy-kibela</h3>
<p>ivy-kibela はデフォルトでは ivy-kibela-recent と同じ動作をします。設定でその動作を ivy-search と同じ動作をするように切り替えられます。よく使う方の動作を設定しておくと便利かもしれません。</p>
<p>裏事情的には、単に実装当初は ivy-kibela-recent 相当の処理しかなかったので互換性のために用意されているだけだったりはします。</p>
<h3 id="ivy-kibela-recent">ivy-kibela-recent</h3>
<p>ivy-kibela-recent は直近投稿された記事情報を取得して絞り込むためのコマンドです。直近 100 件の記事を取得し、そこから ivy のインターフェースで絞り込んで Enter を叩くとブラウザでその記事を開きます。</p>
<p>情報を取得してから絞り込むので、
API を叩くのは1回で済むし、絞り込み時に wait が発生しません。そのため、直近の記事を検索する時はこちらを利用するのをオススメします。</p>
<p>また <a href="https://github.com/ROCKTAKEY/ivy-migemo">ivy-migemo</a> を導入していたら</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(with-eval-after-load <span style="color:#e6db74">&#39;ivy-kibela</span>
  (add-to-list <span style="color:#e6db74">&#39;ivy-re-builders-alist</span> <span style="color:#f92672">&#39;</span>(ivy-kibela <span style="color:#f92672">.</span> ivy-migemo--regex-plus) <span style="color:#66d9ef">t</span>))
</code></pre></div><p>とかしておくと migemo も使えます。
<a href="https://github.com/ROCKTAKEY/ivy-migemo">ivy-migemo</a> 便利。</p>
<h3 id="ivy-kibela-search">ivy-kibela-search</h3>
<p>ivy-kibela-search は ivy のインターフェースから
Kibela の検索 API を叩くコマンドです。
3文字以上入力した場合に検索 API にリクエストを飛ばし、その結果から記事・コメントを選択し Enter を叩くとブラウザで選択した記事・コメントを開きます。</p>
<p>3文字以上を入力した場合に API を叩くようになっているため例えば &ldquo;React&rdquo; と type した場合には &ldquo;Rea&rdquo;, &ldquo;Reac&rdquo;, &ldquo;React&rdquo; と
3回 API を叩くことになり、
<a href="https://github.com/kibela/kibela-api-v1-document#1%E6%99%82%E9%96%93%E3%81%94%E3%81%A8%E3%81%AB%E6%B6%88%E8%B2%BB%E3%81%A7%E3%81%8D%E3%82%8B%E3%82%B3%E3%82%B9%E3%83%88">検索コスト</a> を多く消費するかもしれません。</p>
<p>また、検索には Kibela の API を使う関係上
ivy-migemo は利用できません。</p>
<h3 id="ivy-kibela-recent-と-ivy-kibela-search-の使い分け">ivy-kibela-recent と ivy-kibela-search の使い分け</h3>
<p>私は「最近書かれたあのあたりの記事を開きたいな〜」という時に ivy-kibela-recent を使い、「あーあの記事古いよな」って時には ivy-kibela-search を使う、という感じで使い分けています。</p>
<p>ivy-kibela-recent を使うとローカルでの絞り込みなのでストレスが少ないのと ivy-migemo も使えるので絞り込みやすくて便利。「今開発しているやつの情報」は大体新しいのでこっちで十分だったりする。</p>
<p>ただし直近 100 件しか取れないので、古い記事を調べたい時は ivy-kibela-search を使う、という感じの使い方をしています。</p>
<p>記事を探すのが楽になったので自分的には便利。</p>
]]></content>
        </item>
        
        <item>
            <title>el-get-lock の情報を使ってパッケージの更新確認ができるようにした</title>
            <link>https://mugijiru.github.io/posts/check-updates-emacs-packages-with-el-get-lock/</link>
            <pubDate>Sun, 06 Mar 2022 23:36:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/check-updates-emacs-packages-with-el-get-lock/</guid>
            <description>変なこだわりがあったり時代の波に乗れてなかったりで use-package を使わずに el-get を使い続けている麦汁です。 このところは el-get-lock で今入れているバージョンがわかるよう</description>
            <content type="html"><![CDATA[<p>変なこだわりがあったり時代の波に乗れてなかったりで
use-package を使わずに el-get を使い続けている麦汁です。</p>
<p>このところは <a href="https://github.com/tarao/el-get-lock">el-get-lock</a> で今入れているバージョンがわかるようにしつつ定期的に el-get-update-all 的なことをしていました。そこもまあ非同期でまとめて更新処理がかかると変なことになるので適当なスクリプト組んでたけども。</p>
<p>で、なんでそんなことをしているかというと今入れているバージョンとアップデートしたバージョンの差分をチェックしたいから。</p>
<p>まあ Emacs 界隈では基本的にそんな差分チェックとかしてないで入れてしまう世界っぽいのですが、個人的な妙なこだわりで差分チェックをしたくって、この運用を続けていた。</p>
<p>なのだけどまとめて更新すると
<a href="https://github.com/mugijiru/.emacs.d/pull/396/files">https://github.com/mugijiru/.emacs.d/pull/396/files</a>
こんな感じになって差分を調べるのがマジ大変。そしてちょっとサボるとめっちゃ溜まるのでめっちゃ大変。</p>
<p>というわけでそれがしんどくなったので
el-get-lock の lock ファイルの情報から
<a href="https://github.com/mugijiru/.emacs.d/blob/a447ee75a0159af6361fe654462626e08e19c679/el-get-lock-update-check.el">更新があるパッケージの情報がわかる更新チェックスクリプト</a>を書いてみた。</p>
<p><a href="https://github.com/mugijiru/.emacs.d/blob/a447ee75a0159af6361fe654462626e08e19c679/el-get.lock">自前の el-get の初期化ファイル</a> に依存しているので動かすにはこちらも必要だし当然自分の el-get.lock ファイルも必要なのだけど自分用に書いたスクリプトなのでそのあたりはそんなに気にしてない。</p>
<h2 id="使い方">使い方</h2>
<h3 id="更新のあるパッケージの数が知りたい場合">更新のあるパッケージの数が知りたい場合</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ emacs --batch -Q -l /home/mugijiru/.emacs.d//el-get-lock-update-check.el --eval=(el-get-lock-update-check-execute t)
</code></pre></div><p>と叩けばその数を出力してくれる。
<code>el-get-lock-update-check-execute</code> の第一引数が t だと更新が必要なパッケージの数だけ表示するようになっている。</p>
<p>まあ作りが雑なので標準エラー出力にもごちゃごちゃ吐かれるから</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ emacs --batch -Q -l /home/mugijiru/.emacs.d//el-get-lock-update-check.el --eval=(el-get-lock-update-check-execute t) 2&gt; /dev/null
</code></pre></div><p>としてそのあたりの情報は捨てた方がいい</p>
<h3 id="更新のあるパッケージがどれなのか知りたい場合">更新のあるパッケージがどれなのか知りたい場合</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ emacs --batch -Q -l /home/mugijiru/.emacs.d//el-get-lock-update-check.el --eval=(el-get-lock-update-check-execute)
</code></pre></div><p>と叩けばどのパッケージが更新可能なのか吐いてくれる。どのパッケージが更新可能か分かれば後は <code>(el-get-update hoge-package)</code> とか実行してあげれば良い。
<a href="https://github.com/mugijiru/.emacs.d/pull/467">https://github.com/mugijiru/.emacs.d/pull/467</a> などはそうやって更新して
el-get.lock の checksum の差分から GitHub の compare を見たりしている。</p>
<p>このパターンでは他にもいくつかの情報を吐くけど後で説明する。</p>
<h2 id="仕組み">仕組み</h2>
<p>el-get.lock では例えば Git 管理のパッケージの場合だと
checkout した revision の hash 値を el-get.lock に記録するので
remote の最新コミットと比較して違う値だったら孤雲があると判定するだけ</p>
<h2 id="制限">制限</h2>
<h3 id="git-github-以外のパッケージの更新チェックはできない">Git/GitHub 以外のパッケージの更新チェックはできない</h3>
<p>EmacsWiki とか CSV とかのパッケージの更新チェックはできません。
el-get.lock でもそのあたりは checksum は記録するけどロックはできないのでしてなかったりするしまあ今の世の中大体は GitHub かそうじゃなくても Git で管理されてるのでこのスクリプトでは一旦そこだけサポートするようにした。自分用だしテキトーで良い。</p>
<p>ちなみに EmacsWiki に入ってるようなやつは大体
<a href="https://github.com/emacsmirror">https://github.com/emacsmirror</a> とか <a href="https://github.com/emacsorphanage?type=source">https://github.com/emacsorphanage?type=source</a> あたりにあるのでそっちを使うように recipe を書けば解決する。
<a href="https://github.com/mugijiru/.emacs.d/pull/476">https://github.com/mugijiru/.emacs.d/pull/476</a> みたいな感じで。</p>
<h3 id="el-get-bundle-xxx-yyy--形式で入れているパッケージは更新チェックできない">(el-get-bundle XXX/YYY) 形式で入れているパッケージは更新チェックできない</h3>
<p>レシピファイルの情報をチェックするので
<code>(el-get-bundle XXX/YYY)</code> で直接 GitHub のリポジトリを指定していてレシピファイルが存在しない場合はこれもまた更新チェックができません。</p>
<p>まあレシピファイルさえ書けば解決するのでそれでいいかってなってる</p>
<h3 id="main-がデフォルトブランチの場合はレシピファイルでそれを指定する必要がある">main がデフォルトブランチの場合はレシピファイルでそれを指定する必要がある</h3>
<p>どちらかというと el-get-lock 側の制限な気もするけど
el-get-lock では branch の指定がなければ
master ブランチの情報で固定するようになっているのでその場合もまたレシピファイルを追加して回避した方がいい。
ox-hugo が master から main に切り替えられてるっぽいのだけど手元は古い状態で止まってしまってた……。</p>
<p>そのため main ブランチがあるかどうかを調べられる関数も仕込んでいる。
<code>el-get-lock-update-check-use-main-p</code> という関数がその役割で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(dolist (version (<span style="color:#a6e22e">cdr</span> el-get-lock-package-versions))
  (let ((package (replace-regexp-in-string <span style="color:#e6db74">&#34;\\\\\\\.&#34;</span> <span style="color:#e6db74">&#34;\\\.&#34;</span> (<span style="color:#a6e22e">symbol-name</span> (<span style="color:#a6e22e">car</span> version)))))
    (el-get-lock-update-check-use-main-p package)))
</code></pre></div><p>みたいに叩くとインストール済のやつでかつ main ブランチを使ってるやつがわかるようになっている。雑な作りだけどね。</p>
<h2 id="i3blocks-との連携">i3blocks との連携</h2>
<p>i3blocks の設定ファイルに</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[emacs-update]
command=emacs --batch -Q -l ~/.emacs.d//el-get-lock-update-check.el --eval=&#39;(el-get-lock-update-check-execute t)&#39; 2&gt; /dev/null
label=Emacs:
interval=1800
</code></pre></div><p>とか書いておけば30分毎に更新チェックのスクリプトが実行されるので更新情報がすぐ分かって便利かもしれない。</p>
<h2 id="更新があるパッケージ以外の情報">更新があるパッケージ以外の情報</h2>
<p>更新のあるパッケージのリスト表示の時は他の情報も出力すると上に書いていたけどじゃあ何を出すかというと「EmacsWiki から入れているパッケージはこいつらだよ〜」とか、「hash 値が取れないパッケージはこれこれだよ〜」とか表示するようにしている。更新チェックができないやつも分かるようにしたかったので。</p>
<h2 id="最後に">最後に</h2>
<p>とりあえず自分のやりたい更新差分チェックが
1パッケージ毎にチェックできるようになったので確認が楽になりました。</p>
<p>今回のスクリプトは<a href="https://github.com/mugijiru/.emacs.d/pull/405">2週間ぐらい前から作っていて</a>
その時点のやつでも最低限のチェックはできたので
2週間前から1つずつ更新しつつスクリプトを直したりしました。</p>
<p>けど更新をサボっていたから長かった……。今日でやっと更新も全部対応できた……。</p>
<p>今後は更新をサボらないようにしたいです……!
まあ今1つ更新があるのは無視して明日対応するけどな。</p>
]]></content>
        </item>
        
        <item>
            <title>退職しました</title>
            <link>https://mugijiru.github.io/posts/retirement-2021/</link>
            <pubDate>Tue, 30 Nov 2021 19:28:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/retirement-2021/</guid>
            <description>約5年前、沖縄から出て来て東京の会社に就職しましたが、今年で退職することにしました。 最終出社は11月で、12月いっぱいは有休消化なので一ヶ月</description>
            <content type="html"><![CDATA[<p>約5年前、沖縄から出て来て東京の会社に就職しましたが、今年で退職することにしました。</p>
<p>最終出社は11月で、12月いっぱいは有休消化なので一ヶ月まるまる休みになります。一ヶ月ずっと休みなので、ちゃんと社会復帰ができるか若干心配ではあります。</p>
<h2 id="これまでの5年間">これまでの5年間</h2>
<p>約5年前、東京のとあるスタートアップ企業に
Rails エンジニア(サーバサイドもフロントもやるよ)ということで入社しました。</p>
<p>入社当時、開発者は私を含めて片手で数えられる程度しかいない小規模なチームでした。数えるのに二進数を使って片手で31までとかいうのは無しな。</p>
<p>小規模ではあるものの、その前の職場と比較すると、
CI が整備されていてコードレビュー文化があるなどモダンなチーム開発ができる環境だな〜と思って入社しました。あ、でも CI は前の職場でもしれっと Jenkins 立ててたか自分で。</p>
<p>入社してしばらくは、人見知りと沖縄なまりを発揮しながらプロダクトの機能開発に従事しつつ、ごちゃっていた CSS を少々マシにしたりといった活動をしてました。</p>
<p>私が入社した後も業務委託のエンジニアが参画したりで気付いたら片手では数えられないほどの人数になったためサブチームに分割され、その片方を引っ張る立場になったりしました。開発チーム全体からするとサブリーダー的な感じなのかな。ちなみにこの時が多分一番ゴリゴリ開発してた。</p>
<p>その後は元のリーダーがいなくなったのもあってリーダーに繰り上がったりしました。確かリーダーになった時はまだ割と普通に開発してたけど、その後は色々な事情も重なって、段々と開発からは離れていっていわゆる上流工程だとか管理だとかそういったものの比重が少しずつ増えて行きました。</p>
<p>というわけで、開発というか実装するのに飢えたりしてたので、開発したいなあとか思いながら転職サイトを眺めたりしていたら結果辞める方向になりました。</p>
<p>書いてて結構適当だな、まいっか。</p>
<h2 id="これからどうするのか">これからどうするのか</h2>
<p>上述の通り、転職サイトを眺めていて、その時に東京のとある会社とマッチングしたため、来年1月からはそちらにお世話になる予定です。そこでも Rails とフロントエンドに携わる予定となっています。</p>
<p>12月いっぱいは有休消化の長期休暇となるため社会復帰が困難かとは思いますが、頑張ってちゃんと働こうと思っています。ちゃんと働けるように休み中も午前には起きるようにするね。</p>
<p>ちなみに休みの間は沖縄に帰省したりするので沖縄にいる方々はよろしくな。あと帰省前は東京にいるから東京にいる方々もよろしくな。あくまで帰省するだけで U ターンするわけではないので来年も引き続き都内にいます。大体家の中だけど。</p>
<p>あとは、遠方だったりで直接会ったりできないけど新しい門出を祝いたい方や応援したい方向けに
Wishlist を用意しておきましたのでよろしくお願いします^^
<a href="https://www.amazon.co.jp/hz/wishlist/ls/2DVSD4OJ72M7V">https://www.amazon.co.jp/hz/wishlist/ls/2DVSD4OJ72M7V</a></p>
]]></content>
        </item>
        
        <item>
            <title>Manjaro Linux にペンタブレット(XP-PEN Star G640S)を設定した</title>
            <link>https://mugijiru.github.io/posts/xp-pen-star-g640s-with-manjaro/</link>
            <pubDate>Wed, 24 Nov 2021 15:58:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/xp-pen-star-g640s-with-manjaro/</guid>
            <description>今年の前半ぐらいに購入しておいて放置していた XP-PEN の Star G640S を Manjaro Linux 環境で使えるか試してみたらとりあえずあっさり動いたというメモ。 まず最初は単に接続し</description>
            <content type="html"><![CDATA[<p>今年の前半ぐらいに購入しておいて放置していた
XP-PEN の Star G640S を
Manjaro Linux 環境で使えるか試してみたらとりあえずあっさり動いたというメモ。</p>
<p>まず最初は単に接続して使えるかを試したら、とりあえず動いた。</p>
<p>そんでもって、設定を変更したいな〜と思ったら
<a href="https://www.xp-pen.jp/download-166.html">公式にドライバがある</a>し、
<a href="https://aur.archlinux.org/packages/xp-pen-tablet">AUR にはそれにパッチを当てたやつ</a>が転がっていた</p>
<p>というわけで</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">yay -S xp-pen-tablet
</code></pre></div><p>したらそれが入って来た。</p>
<p>その上で <code>pentablet</code> というのを rofi から起動すると
XP PEN の設定ソフトが起動したのでそれを使って適当に設定したらその通りに動いて良かった。具体的には、配置の関係上、上下さかさまで使うように設定した。
USB ケーブルの位置がね……。</p>
<p>ちなみに <code>xp-pen</code> というのも AUR には転がってるけどもベースとなってるバージョンがちょびっとだけ古いのと人気度的に <code>xp-pen-tablet</code> の方が上だったので、そっちを選んでいる。</p>
<p>他にも <a href="https://krita.org/jp/">Krita</a> ってソフトで試したんだけど、筆圧もちゃんと検知するみたいだしこれは良さそう。とはいえ絵を描いたりはしないので、筆圧は実は要らないんだけども。</p>
<p>まあ普通に使えて良かったので今後使うかもしれない。うん。</p>
]]></content>
        </item>
        
        <item>
            <title>Manjaro Linux のディスプレイ周りの設定を弄った</title>
            <link>https://mugijiru.github.io/posts/xrandr-and-autorandr-on-manjaro/</link>
            <pubDate>Wed, 24 Nov 2021 14:01:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/xrandr-and-autorandr-on-manjaro/</guid>
            <description>Manjaro Linux の設定を弄ってる系の記事です。まあまだ2記事目だけど。 家には外部ディスプレイが存在するけどまあ必ずいつも繋いでるわけでもないので、両方の</description>
            <content type="html"><![CDATA[<p>Manjaro Linux の設定を弄ってる系の記事です。まあまだ2記事目だけど。</p>
<p>家には外部ディスプレイが存在するけどまあ必ずいつも繋いでるわけでもないので、両方の状態に対応できるようにしたいよねって思ってた。</p>
<p>それをするには <a href="https://www.x.org/wiki/Projects/XRandR/">XRandR</a> とそれの設定を保存したりするのに <a href="https://github.com/phillipberndt/autorandr">autorandr</a> を使えばいいというのがわかった。ありがとう <a href="https://wiki.archlinux.jp/index.php/Xrandr">Arch Wiki</a>。今確認していると autorandr ではなくて <a href="https://github.com/alex-courtis/xlayoutdisplay">xlayoutdisplay</a> とやらでも良さそうだがね……。</p>
<p>まあそれはさておき、ひとまずはディスプレイに繋いでる状態をなんとかしたかったので最初は</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">xrandr --output eDP-1 --mode 2880x1620 --right-of DP-2
</code></pre></div><p>というコードを .xprofile に書いていた。
eDP-1 がノート PC のディスプレイで DP-2 が外部接続しているディスプレイである。つまり eDP-1 は 2880x1620 の解像度で出力し
DP-2 の右側に配置する、といった感じである。</p>
<p>DP-2 自体の設定はどこかにいったが、まあ解像度を弄ってるぐらいなのでとりあえずヨシ。</p>
<p>とりあえずこれにより、ディスプレイを繋いでる状態は良かったんだけどもディスプレイを切り離した時に、仮想デスクトップ2が切り離した方に表示されてるような認識をされていたので困ってしまった。</p>
<p>調べたところ</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">xrandr --output eDP-1 --mode 2880x1620 --output DP-2 --off
</code></pre></div><p>を実行することで DP-2 つまり外部ディスプレイをオフにできることがわかった。</p>
<p>というわけで、手動でコマンドを叩く前提にはなるが一旦解決はした。</p>
<p>そしてこれらそれぞれの状態を autorandr で保存するためまずは繋いでる状態で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">autorandr --save docked
</code></pre></div><p>として保存し、切り離して先のコマンドを実行し、ノートのディスプレイだけを使える状態にした上で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-sh" data-lang="sh">autorandr --save mobile
</code></pre></div><p>と実行することで、それぞれの状態を</p>
<ul>
<li>docked</li>
<li>mobile</li>
</ul>
<p>として記録しておいた。</p>
<p>これにより、ディスプレイを繋いだり外したりした時に望んだ通りの設定に自動で切り替わるようになった(切り替わりは今記事を書きながら試した)</p>
<p>というわけで、切り離した時に表示調整を自分でする必要がなくなった。便利。</p>
]]></content>
        </item>
        
        <item>
            <title>ThinkPad P14s Gen 2 (第11世代インテル) に Manjaro Linux を入れてみている</title>
            <link>https://mugijiru.github.io/posts/thinkpad-p14s-gen2-intel-with-manjaro-linux/</link>
            <pubDate>Sun, 10 Oct 2021 19:01:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/thinkpad-p14s-gen2-intel-with-manjaro-linux/</guid>
            <description>先月、「えいやっ」で Lenovo ThinkPad P14s Gen 2 (第11世代インテル) を購入した。詳細は面倒だから省くけどそれなりの構成にしている。なお AMD 版にしなかったのは Linux</description>
            <content type="html"><![CDATA[<p>先月、「えいやっ」で
<a href="https://www.lenovo.com/jp/ja/notebooks/thinkpad/p-series/ThinkPad-P14s-Gen-2-14%E2%80%9D-Intel/p/22WSP14P4S2">Lenovo ThinkPad P14s Gen 2 (第11世代インテル)</a> を購入した。詳細は面倒だから省くけどそれなりの構成にしている。なお AMD 版にしなかったのは Linux をちゃんと動かせるか不安だったから。</p>
<p>で、そのマシンに Manjaro Linux を載せて色々設定している。この記事は、そのあたりでどういう設定を書いているかの備忘録的なそれです。</p>
<p>だってさ〜、絶対忘れるじゃん。だからある程度書いておこうかなって。そしてその上でまた後で入れ直ししてそれを見ながらセットアップし直そうかなと。そしたら多分その時に見逃していた部分も修正できそうだし。</p>
<p>というわけでなんか適当につらつらと書いていく。</p>
<p>ま、Twitter につぶやいていたことを記憶で補完しながら書いている感じだけどね。</p>
<p>Twitter でのつぶやきだと Twilog で</p>
<ul>
<li><a href="https://twilog.org/mugijiru/date-211003">https://twilog.org/mugijiru/date-211003</a></li>
<li><a href="https://twilog.org/mugijiru/date-211009">https://twilog.org/mugijiru/date-211009</a></li>
</ul>
<p>あたりに該当する部分。まだ2日しか触れてないのよな。うん。</p>
<h2 id="manjaro-linux-のインストール">Manjaro Linux のインストール</h2>
<p><a href="https://manjaro.org/download/">https://manjaro.org/download/</a> から Xfce 版のやつをダウンロードして
Windows PC で DVD に iso ファイルを書き込んでそれを使ってセットアップしてた。</p>
<p>その際に
<a href="https://www.mimir.yokohama/useful/0023-installing-manjaro.html">https://www.mimir.yokohama/useful/0023-installing-manjaro.html</a>
を参考にした。まあパーティションどうしたらいいんだっけ以外は特に悩まなかったけど。</p>
<p>あとは光学ドライブは大昔に購入した外付けのやつなので荷物の奥底から引っ張り出して「うわー USB type B のケーブルはどこだ〜!」「電源アダプタもねえぞー!」とか一人で騒いでた。みんなも機器を仕舞う時はそれに使うケーブルなども一緒に仕舞うようにしような。</p>
<p>あとパーティションは自動で切ってるけど
swap 領域はメモリ拡張すると足らないのでなんとかする必要がありそう。</p>
<h2 id="font-設定">Font 設定</h2>
<p>デフォルトの Terminal である xfce4-terminal のフォントが何故か文字間が広くて気持ち悪いので Sazanami と IPA フォントを入れた記憶がある。</p>
<p>history を漁ると</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ pacman -S ttf-sazanami
$ pacman -S otf-ipafont
</code></pre></div><p>が出て来たのでとりあえずそうやって入れているっぽい。</p>
<p>多分 Sazanami を入れてるのは
<a href="https://applecom.blog.jp/archives/31595846.html">https://applecom.blog.jp/archives/31595846.html</a>
の影響かな。日本語環境構築したかったから見ていた記憶がある。</p>
<p>で、その記事でも後から IPA フォントを入れてるからその流れに乗って両方を入れてる感じがある。</p>
<h3 id="やってないことだけど補足">やってないことだけど補足</h3>
<p>今 Arch Wiki のフォントのページ
<a href="https://wiki.archlinux.jp/index.php/%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88#.E6.97.A5.E6.9C.AC.E8.AA.9E">https://wiki.archlinux.jp/index.php/%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88#.E6.97.A5.E6.9C.AC.E8.AA.9E</a>
を調べてると otf-ipaexfont とか良さそうな雰囲気あるな。</p>
<p>あとはコーディングする上では ttf-mplus を入れておけばとりあず固定幅で使えそうなので一安心できそう。</p>
<p>ちなみに普段他の環境では Ricty diminished を使っているのでそこに戻る可能性もあるけど、新しい環境ということで新しいフォントにしてみるのも面白そうなので、どうするかはわからない。</p>
<h2 id="terminal--xfce4-terminal--の設定">Terminal(xfce4-terminal) の設定</h2>
<p>上に書いたようにフォントが気に食わなくて別のフォントを入れてその後適当に弄ってたけど、結局 Monospace 16 に戻った上で文字間は悪くない感じになってしまった。</p>
<p>あれ、これ最初の設定だよね?? なんで文字間の無駄に広いのが直ったの?? ってなってるけどまあ悪くないのでそのままで。</p>
<p>あとは背景が半透明だったけど個人的には半透明な Terminal は、カッコいいけど後ろ側が気になってしょうがないので</p>
<ul>
<li>背景
<ul>
<li>指定なし(単色を使用する)</li>
</ul>
</li>
</ul>
<p>という設定にすることで透明度をゼロにしている。</p>
<p>あと背景が透けるようにすると処理が重くなるってのもあるよね。</p>
<h2 id="web-ブラウザ周りの調整">Web ブラウザ周りの調整</h2>
<p>Manjaro の Xfce 版には標準で Firefox が入っていた。私の普段使いの Web ブラウザも Firefox なので丁度良い。</p>
<p>まずは言語設定がアメリカ英語だったので日本語に変更。英語設定のまま使い続けられるほど強くないのです。</p>
<p>次にフォントを IPA Pゴシックを基本的に使うように変更。</p>
<p>そして Firefox Sync で同期をするといつも使ってるアドオンが入っていい感じ。</p>
<p>多分それ以上は何もしてないかな。ここは楽だった。</p>
<p>なおその後アップデートしたら言語設定が吹っ飛んでてまた設定し直すことになった。</p>
<h2 id="日本語入力--fcitx5-skk">日本語入力(fcitx5-skk)</h2>
<p>日本語入力周りは最近の Linux では fcitx というのを使うらしいのでそれの中の SKK を使うやつを選択した。</p>
<p>というわけで
<a href="http://neko-mac.blogspot.com/2021/06/archlinuxskk.html">http://neko-mac.blogspot.com/2021/06/archlinuxskk.html</a>
を参考に設定をした。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ sudo pacman -S fcitx5-skk
</code></pre></div><p>あとは fcitx5-configtool も必要なので入れた。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ sudo pacman -S fcitx5-configtool
</code></pre></div><p>これを別途入れないと設定ツールが起動できないのだが、
Not Found 的なエラーが出るわけでもなく単に起動できないだけなので何が問題なのか気付きにくかった。別途インストールが必要だったが、それに気付くまで2,3時間溶かした気がする。</p>
<p>そんでもって fcitx5-configtool を</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ fcitx5-configtool
</code></pre></div><p>で起動して右側の Available Input Method から SKK を探して左側の Current Input Method に入るようにすると
Ctrl + SPC で日本語を SKK で入力できるようになる。</p>
<p>さらに StickyShift を愛用しているのでそのあたりの設定もしている。設定ファイルについては先に紹介した記事の内容そのままなので割愛。後で GitHub にも設定ファイルを上げるのでここに書いてなくても困らないはずだし。</p>
<p>設定ファイルの準備ができたら
configtool を再度立ち上げて
Addons タブ内の Input Method ってところの SKK の設定ボタンをクリックし、
Rule を Default から先程作った StickyShift に切り替える。</p>
<p>このあたりの手順も先に紹介した記事にある手順そのままだけどまあ人の記事は消えることもあるのでちょっとここにも書かせてもらいました。向こうの方が画像キャプチャもあって親切なんだけどね。</p>
<p>まあともかくこれで日本語でもググることができるようになった。</p>
<p>あとはよくわからんけど <a href="https://github.com/mugijiru/dotfiles/blob/ead701cd58dc2596d8fb883641a1d793ccddd3ed/.xprofile#L1-L4">.xprofile</a> に</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">export DefaultIMModule=fcitx
export GTK_IM_MODULE=fcitx
export QT_IM_MODULE=fcitx
export XMODIFIERS=&#34;@im=fcitx&#34;
</code></pre></div><p>とか書いているな。</p>
<p><a href="https://wiki.archlinux.jp/index.php/Fcitx5#.E3.82.A4.E3.83.B3.E3.83.97.E3.83.83.E3.83.88.E3.83.A1.E3.82.BD.E3.83.83.E3.83.89.E3.83.A2.E3.82.B8.E3.83.A5.E3.83.BC.E3.83.AB.E3.81.AE.E7.92.B0.E5.A2.83.E5.A4.89.E6.95.B0.E3.81.AE.E8.A8.AD.E5.AE.9A">ArchWiki の Fcitx5 の記事内にあるインプットメソッドモジュールの環境変数の設定</a>
での記述を見てると、俺が書いてる場所や内容がちょっと違うのでなんか俺が間違えてるかも。</p>
<p><a href="https://wiki.archlinux.jp/index.php/Fcitx#.E3.82.A4.E3.83.B3.E3.83.97.E3.83.83.E3.83.88.E3.83.A1.E3.82.BD.E3.83.83.E3.83.89.E3.83.A2.E3.82.B8.E3.83.A5.E3.83.BC.E3.83.AB.E3.81.AE.E7.92.B0.E5.A2.83.E5.A4.89.E6.95.B0.E3.81.AE.E8.A8.AD.E5.AE.9A">ArchWiki の Fcitx の記事内にあるインプットメソッドモジュールの環境変数の設定</a>
の方の記述に似ているけど、これ <code>Fcitx5</code> じゃなくて <code>Fcitx</code> の記事だから多分古いんだよな……。</p>
<h2 id="i3wm-の導入">i3wm の導入</h2>
<p>ちゃんとしたタイル型WMを使いたい、というのが Linux にした理由の1つ。というわけで i3wm を入れることにした。正確には i3-gaps なので fork 版なのだけども。</p>
<p>実は昔使っていた Awesome にしようかとも思っていたのだけど最終更新が一昨年だったのであまり活発じゃないのかな〜と思って
i3 にすることにした。</p>
<p>i3wm を使うならコミュニティで提供されている i3 版をインスコした方が良いのではというのもあるんだけど気付くのが遅かったのと、そっちの設定でミスって起動しなくなった時に Xfce を動かすことでとりあえず乗り切る、みたいなことも考えている。</p>
<p>でまあそんなわけで i3 周りを入れることにしたので、以下をインストールしてある。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ sudo pacman -S i3-gaps
$ sudo pacman -S i3status
$ sudo pacman -S i3blocks
$ sudo pacman -S i3lock
$ sudo pacman -S dmenu
</code></pre></div><h3 id="i3-gaps">i3-gaps</h3>
<p>i3 の fork 版で i3 より機能が豊富らしい。違いがどこにあるかはまだ認識してない。</p>
<p>Mod キーとの組み合わせで色々な操作ができたりして、操作感は Awesome と似ているかな。
Awesome を使っていたころも Windows キーを Mod キーとして使っていたので。</p>
<p>設定ファイルである <code>~/.config/i3/config</code> は今度 GitHub に上げておこう。</p>
<p>変更点は、初期設定だと <code>jkl;</code> を左下上右としていたのが気に食わなかったので
Vim と同じ hjkl にして、その影響で h が従来の目的では使えなくなったので水平分割、垂直分割をそれぞれ <code>:</code> とか <code>;</code> にしている。けど <code>-</code> <code>|</code> にした方がわかりやすいかもね</p>
<p>あとはファイル末尾で exec しているあたりが変更点だが、この記事の後の記述でそのあたりについては触れているのでここでは取り上げない。</p>
<h3 id="i3status">i3status</h3>
<p>ステータスバーに表示されるやつで、デフォルトはこいつみたい。デフォルト設定だと文字だらけの表示で正直わかりやすくはないかなと思う。一応少しはカスタマイズを試みるつもりだが、すぐ乗り換えそうな気もしている。</p>
<h3 id="i3blocks">i3blocks</h3>
<p>なんかあるから入れただけで何も設定してない。
i3status の代わりに使うと良いらしい。
i3status のデフォルト表示はあまり気に入ってないのでそのうち使うことになりそう。</p>
<h3 id="i3lock">i3lock</h3>
<p>画面ロック機能を提供してくれるやつ。
xss-lock と一緒に使うものらしくて
xss-lock を入れてない状態だとエラーを吐いていたので</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ sudo pacman -S xss-lock
</code></pre></div><p>としたらロックされるようになった。</p>
<p>ロック画面は真っ白な画面でそこで適当にキーを叩いたりすると真ん中に丸が出て来るというよくわからない感じ。</p>
<p>真ん中に丸が出てない状態でパスワードを入力して Enter するとロックが解除されるっぽい。が、わかりづらいのもあって今は指紋認証でロック解除できるようにしてある。その詳細は後程。</p>
<h3 id="dmenu">dmenu</h3>
<p>デフォルト設定だと Mod + d で起動するランチャ。画面上部のバーに横並びで候補が表示されてそこから絞り込むことができるがあまり見易くはない。</p>
<p>あとは解像度を高めにしているから文字が小さくて困ってるけど
<a href="https://wiki.archlinux.jp/index.php/Dmenu#.E3.83.95.E3.82.A9.E3.83.B3.E3.83.88">https://wiki.archlinux.jp/index.php/Dmenu#.E3.83.95.E3.82.A9.E3.83.B3.E3.83.88</a>
を見るとそこは変更できそう。</p>
<p>でも <a href="https://github.com/davatorium/rofi">rofi</a> とかに乗り換える方が良いかもしれない。</p>
<h3 id="気になるけどやってないこと">気になるけどやってないこと</h3>
<p>Alt + Tab での切替を Mac でも Windows でもやってるのでどうしても手癖でそれをやってしまう。</p>
<p>というわけでそれを実現できそうな以下の記事が気になる。
<a href="https://scrapbox.io/tamago324vim/i3wm%5F%E3%81%A7%5FAlt+Tab%5F%E3%81%A7%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B">https://scrapbox.io/tamago324vim/i3wm%5F%E3%81%A7%5FAlt+Tab%5F%E3%81%A7%E3%82%A6%E3%82%A3%E3%83%B3%E3%83%89%E3%82%A6%E3%82%92%E5%88%87%E3%82%8A%E6%9B%BF%E3%81%88%E3%82%8B</a></p>
<p>が、優先度は低いかなと思って放置中。</p>
<h2 id="キーバインドの調整">キーバインドの調整</h2>
<p>とりあえず一旦は CapsLock が a の左隣にあるのが使いにくいしまあそもそもそんなに使わない機能なので</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ setxkbmap -option &#34;ctrl:nocaps&#34;
</code></pre></div><p>で CapsLock を Ctrl に置き換えている。</p>
<p>そして <a href="https://github.com/mugijiru/dotfiles/blob/ead701cd58dc2596d8fb883641a1d793ccddd3ed/.xprofile#L6-L7">それを永続化するために .xprofile に書いてる</a> ので起動直後からもう CapsLock は Ctrl になってる。とりあえず最低限これがないとつらい。</p>
<h3 id="やれてないこと">やれてないこと</h3>
<p>本当にやりたいのは</p>
<ol>
<li>ESC をバッククォートにして、 Shift 押しながらだとチルダが入力される</li>
<li>CapsLock を Ctrl にする</li>
<li>左 Ctrl を ESC にする</li>
</ol>
<p>だったりする。</p>
<p>これは今愛用しているキーボード <a href="https://archisite.co.jp/products/mistel/md650l-barocco/">BAROCCO MD650L</a> のキーの都合で通常のキーボードだとファンクションキーが並ぶ行がまるっとなくてチルダがある部分、つまり1の左隣が Esc になっているのが理由で
Windows, Mac だとそれに合わせてキー配置を上述のようにしているので
Linux でもそういう配置にしたいなという願望。</p>
<p>ESC が左 Ctrl の位置だと押したい時にあまりホームポジションから離れずに左手親指で押せるのも便利。</p>
<h2 id="キーリピートの調整">キーリピートの調整</h2>
<p>デフォルトだとキーを押しっぱなしにした時にリピート入力が始まるのとそのリピート速度が遅くてイラッとしたので</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ xset r rate 200 25
</code></pre></div><p>としている</p>
<p>r は repeat, rate は比率設定で
200 は delay つまりリピート入力が始まるのがどのぐらい押してからかで最後の 25 は1秒間に何回入力されるかの設定。</p>
<p>なので、キーを押して 0.2 秒経過したら毎秒25回の速度でそのキーが連続入力されるってわけ。</p>
<p>正直毎秒25回は多過ぎるかもとかは思ってるがまあ使ってる間に調整していけばいいかなと思っている。</p>
<p>これもまた <a href="https://github.com/mugijiru/dotfiles/blob/ead701cd58dc2596d8fb883641a1d793ccddd3ed/.xprofile#L9-L10">永続化のために .xprofile に書いている</a></p>
<h2 id="タッチパッドでのカーソル移動の調整">タッチパッドでのカーソル移動の調整</h2>
<p>デフォルトだとどうもカーソルの移動が遅くて、触りたいところに移動するのが大変だったのでこれも速度を上げている。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ xinput set-prop &lt;device_id&gt; &lt;prop_id&gt; 0.5
</code></pre></div><p>的な感じなのだが永続化はしてなさそう……。あとでやらなきゃ。</p>
<p>ちなみに今は Accel Speed は 0.7 にしている。細かい所にカーソル合わせるのが大変なので難しい。</p>
<h2 id="解像度の固定">解像度の固定</h2>
<p>ひとまずマシン単体で使う場合に最適化しつつ最低限、いつも使う外部ディスプレイに繋いでる場合にも配置だけはいい感じになるように
<a href="https://github.com/mugijiru/dotfiles/blob/ead701cd58dc2596d8fb883641a1d793ccddd3ed/.xprofile#L12-L13">.xprofile に以下のように書いている</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ xrandr --output eDP-1 --mode 2880x1620 --right-of DP-2
</code></pre></div><p>eDP-1 がノートPC自体のディスプレイなのでそいつの解像度を指定しつつ
DP-2 という外部ディスプレイの右側に配置されるように指定している。</p>
<p>DP-2 なのは単にコネクタ的にたまたまそうなってるだけの可能性も高いが。</p>
<p>そうそう。
P14s Gen 2 は USB Type-C のポートが複数あってそこに HDMI ポートもある USB Type-C の USB ハブを繋いでも使えるので仕事用の Macbook Pro で使ってるハブがそのまま使えて便利。</p>
<h3 id="autorandor">autorandor</h3>
<p><a href="https://github.com/phillipberndt/autorandr">autorandr</a> というのもあってなんか解像度設定を保存したりできるっぽいやつがある。</p>
<p><a href="https://tech.buty4649.net/entry/2018/12/19/224128">https://tech.buty4649.net/entry/2018/12/19/224128</a> の記事を見るとまだつらそうだけどちゃんと試してみる価値はありそう。</p>
<h2 id="指紋認証でログイン-ロック解除-sudo-に対応できるようにした">指紋認証でログイン、ロック解除、sudo に対応できるようにした</h2>
<p>i3lock でのロック解除画面は「本当にちゃんとキー入力できてるんだっけ？」って不安になったりするし、セットアップ中は sudo を多用するけど、その度にパスワード入れるのもだるいし、っていうかパスワード入力なんて今時じゃないな〜ってことで指紋認証でそのあたりができるようにした。</p>
<p>P14s Gen 2 で搭載されている指紋認証機器は fprintd のサポートに含まれているのでまあ普通にやればできたという感じ。</p>
<p>普通にというのは Arch Wiki に書かれてるのを見ながら設定したらできた。
<a href="https://wiki.archlinux.jp/index.php/Fprint">https://wiki.archlinux.jp/index.php/Fprint</a></p>
<h3 id="指紋認証機器が使えるかの確認">指紋認証機器が使えるかの確認</h3>
<p>まず</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ lsusb
</code></pre></div><p>で指紋認証のやつを探して、
<a href="https://fprint.freedesktop.org/supported-devices.html">https://fprint.freedesktop.org/supported-devices.html</a>
の中の USB ID と一致する機器があるか調べたら運良く含まれていて
Synaptics Sensors という Driver が使われるようだった</p>
<h3 id="fprintd-のインストール">fprintd のインストール</h3>
<p>というわけでほぼ間違いなく使えるなということで</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ sudo pacman -S fprintd
</code></pre></div><p>ここで <code>fprintd</code> ではなくグループとして定義されている <code>fprint</code> を入れようとすると一瞬入りそうな気配になるんだけどこのグループには互いに競合するパッケージが含まれてるから無理やでみたいになるので注意。</p>
<h3 id="認証エージェントを動かす">認証エージェントを動かす。</h3>
<p>fprintd が入れられたので「じゃあ指紋登録しましょっか」ってことで</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ fprintd-enroll
</code></pre></div><p>するとなんか知らんが</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">EnrollStart failed: GDBus.Error:net.reactivated.Fprint.Error.PermissionDenied: Not Authorized: net.reactivated.fprint.device.enroll
</code></pre></div><p>と怒られる。</p>
<p>調べてるとなんか認証エージェントを動かす必要があるとか書いていた認証エージェントとはなんぞやとなりつつも
<a href="https://wiki.archlinux.jp/index.php/Polkit#.E8.AA.8D.E8.A8.BC.E3.82.A8.E3.83.BC.E3.82.B8.E3.82.A7.E3.83.B3.E3.83.88">https://wiki.archlinux.jp/index.php/Polkit#.E8.AA.8D.E8.A8.BC.E3.82.A8.E3.83.BC.E3.82.B8.E3.82.A7.E3.83.B3.E3.83.88</a>
とかを見て「ははーん polkit とかいうのが名前に入ってるやつが必要なんだな」と察して</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ pacman -Ss polkit
</code></pre></div><p>した時に polkit-gnome がインストール済になっていた。ついでにいうと polkit-qt5 もインストール済だったけど、とりあえず gnome の方でいいやということでそれについてくる agent を自動起動するように i3 の config で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">exec --no-startup-id /usr/lib/polkit-gnome/polkit-gnome-authentication-agent-1 &amp;
</code></pre></div><p>とか書いた。</p>
<h3 id="指紋登録">指紋登録</h3>
<p>認証エージェントも動いたので再度 <code>fprintd-enroll</code> をすると</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Using device /net/reactivated/Fprint/Device/0
Enrolling right-index-finger finger.
</code></pre></div><p>と Terminal に表示された上でポップアッププロンプトが出て来てパスワード入力が求められるので素直にパスワードを入れると。</p>
<p>すると今度はポップアッププロンプトは消えて</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Enroll result: enroll-stage-passed
</code></pre></div><p>とか表示されて、何やら待ってる雰囲気になるので指紋センサーの上に指を乗せたら、同じ行がまた表示されたのでそんじゃあまた指を乗せてってのを数度繰り返すと</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Enroll result: enroll-completed
</code></pre></div><p>と表示されて、指紋登録が完了する。</p>
<h3 id="指紋認証の動作確認">指紋認証の動作確認</h3>
<p>指紋の登録は完了したので fprint-verify で登録したやつが使えるよねって確認を取る。スキャンした指を乗せるとちゃんと認証できたみたいな雰囲気になる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ fprintd-verify mugijiru
Using device /net/reactivated/Fprint/Device/0
Listing enrolled fingers:
- #0: right-index-finger
Verify result: verify-match (done)
</code></pre></div><h3 id="pam-dot-d-の設定変更">pam.d の設定変更</h3>
<p>その後は <a href="https://wiki.archlinux.jp/index.php/Fprint#.E3.83.AD.E3.82.B0.E3.82.A4.E3.83.B3.E8.A8.AD.E5.AE.9A">Arch Wiki のログイン設定の説明</a> に従い
<code>/etc/pam.d/system-local-login</code> の auth とか書かれている行の上に</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">auth      sufficient pam_fprintd.so
</code></pre></div><p>を追加したり同じく <code>/etc/pam.d/</code> にある i3lock, lightdm, sudo の各ファイルに同じものを仕込んだ。</p>
<p>以上で sudo の時もロック画面の解除の時もログインする時も指紋センサーに指を置けば OK となった。便利。</p>
<p>ログイン画面は認証 OK になったらパスワード入力欄が非表示になるので、その状態で Enter を叩くか「ログイン」ボタンをクリックする必要があるけどね。まあ起動する WM を選択可能だからそういう手順が必要なんだろう。</p>
<h2 id="ssh-鍵の生成及び-github-への登録">ssh 鍵の生成及び GitHub への登録</h2>
<p>各設定ファイルを GitHub に登録しているのでそこにアクセスしたいよねということで
Manjaro Linux で鍵を生成して GitHub に登録しておいた。</p>
<p>ここらあたりはまあわざわざ細かく書かなくても、再セットアップの時にそんなに僕は困らないだろうなということで、記述はこんなもんにしておく。書いておいたら忘れないよね、ぐらいな感覚。</p>
<p>ファイル名を指定して鍵を作ったのでそれが次の hub コマンド周りに影響がある気はする。</p>
<h2 id="hub-コマンドの設定">hub コマンドの設定</h2>
<p>これも pacman でインスコできたのでそれを使ってる。今時は gh コマンドって気もするが hub コマンドの方が慣れていて……すみません。</p>
<p>で、 hub コマンドを入れて適当なところで <code>hub clone dotfiles</code> とかするとユーザー名とパスワードを聞かれて、それを入力すると自動でパーソナルアクセストークンを生成してきてそれを使うように設定されるはずなんだけど、なぜか Not Found しか言わなくて困った。</p>
<p>最終的には PAT を自分で GitHub に作ってさらに自分で <code>~/.config/hub</code> という設定ファイルを生成して</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">---
github.com:
- protocol: https
  user: mugijiru
  oauth_token: MY_PERSONAL_ACCESS_TOKEN
</code></pre></div><p>みたいな感じで MY_PERSONAL_ACCESS_TOKEN のところに先程生成した PAT を突っ込んでおいたら
<code>hub clone</code> が成功するようになった。</p>
<p>というわけで設定ファイルを拾ってきたりできるようになってハッピーになった。</p>
<h2 id="ssh-agent-の自動起動">ssh-agent の自動起動</h2>
<p>設定ファイルを GitHub に上げたりできるようになったのはいいんだけど鍵を作る時にパスフレーズも入れたので
push したり pull したりする度にそれを入力するのがだるいんですわ。</p>
<p>ってことで ssh-agent を使うことにした。</p>
<p>で、どうやら systemd さんに <code>--user</code> オプションを渡すことでユーザー権限でそういうものを動かすことができるらしい。便利な世の中じゃ。</p>
<p>というわけで
<a href="https://wiki.archlinux.jp/index.php/SSH%5F%E9%8D%B5#systemd%5F.E3.83.A6.E3.83.BC.E3.82.B6.E3.83.BC.E3.81.A7%5Fssh-agent%5F.E3.82.92.E8.B5.B7.E5.8B.95">https://wiki.archlinux.jp/index.php/SSH%5F%E9%8D%B5#systemd%5F.E3.83.A6.E3.83.BC.E3.82.B6.E3.83.BC.E3.81.A7%5Fssh-agent%5F.E3.82.92.E8.B5.B7.E5.8B.95</a>
に従い <code>~/.config/systemd/user/ssh-agent.service</code> に</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[Unit]
Description=SSH key agent

[Service]
Type=forking
Environment=SSH_AUTH_SOCK=%t/ssh-agent.socket
ExecStart=/usr/bin/ssh-agent -a $SSH_AUTH_SOCK

[Install]
WantedBy=default.target
</code></pre></div><p>という内容のファイルを置いて</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ systemctl --user enable ssh-agent
</code></pre></div><p>とかすることでログイン時に ssh-agent が動くようにした。</p>
<p>さらに
<a href="https://github.com/mugijiru/dotfiles/blob/ead701cd58dc2596d8fb883641a1d793ccddd3ed/.zshrc#L157-L160">https://github.com/mugijiru/dotfiles/blob/ead701cd58dc2596d8fb883641a1d793ccddd3ed/.zshrc#L157-L160</a>
に書いてるように .zshrc に末尾に</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"># use ssh agent with systemd
if [ -e &#34;$XDG_RUNTIME_DIR/ssh-agent.socket&#34; ]; then
  export SSH_AUTH_SOCK=&#34;$XDG_RUNTIME_DIR/ssh-agent.socket&#34;
fi
</code></pre></div><p>と書くことで自動起動した ssh-agent に繋がるようになった。
<a href="https://github.com/mugijiru/dotfiles/pull/11">https://github.com/mugijiru/dotfiles/pull/11</a></p>
<p>その状態で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ ssh-add hoge_key
</code></pre></div><p>みたいにすることで鍵を登録できるのでそのセッションでは ssh 鍵のパスフレーズを入力しないで済むようになって便利になった。</p>
<h2 id="zsh-の設定">zsh の設定</h2>
<p>mugijiru/dotfiles を clone してきてあるので</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ ln -s /path/to/dotfiles/.zshrc ~/.zshrc
</code></pre></div><p>するだけで OK</p>
<h2 id="fzf-の設定">fzf の設定</h2>
<p>最近 fzf を使いだすようになったので
Manjaro でもそれを使いたいということで</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ sudo pacman -S fzf
</code></pre></div><p>でインストール。</p>
<p>さらに dotfiles に <code>.fzf.zsh</code> も置いてるので</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ ln -s /path/to/dotfiles/.fzf.zsh ~/.fzf.zsh
</code></pre></div><p>したら OK</p>
<p>まあ本当はセットアップの時はその記述がちょっと環境と合ってなくて
<code>/usr/share</code> にファイルがある場合はそれを読むように変更している。
<a href="https://github.com/mugijiru/dotfiles/pull/8">https://github.com/mugijiru/dotfiles/pull/8</a></p>
<p>まあもうこの調整を push してあるので次回はハマらないはずだ。</p>
<h2 id="その他">その他</h2>
<ul>
<li>w3m はあると便利なのでとりあえず入れている</li>
<li>tmux も入れておいた
<ul>
<li>tmuxinator は入れてないし tmux の設定ファイルも反映してない</li>
</ul>
</li>
</ul>
<h2 id="対応できてないこと">対応できてないこと</h2>
<p>と、それなりに時間をかけていくつか設定してきたけどまだまだやれてないことはある。</p>
<p>以下はぱっと思い付く、やりたいけどやれてないこと。</p>
<ul>
<li>ログイン画面の解像度変更はうまくいってない
<ul>
<li>解像度が高過ぎて文字が米粒みたいでちょっと困ってる。</li>
</ul>
</li>
<li>音が出ないっぽい
<ul>
<li>まあ音なんかそんなに必要じゃないので後回しにしている。</li>
<li>Xfce に戻したら鳴りそうな気もしている</li>
</ul>
</li>
<li>Emacs 周りの調整
<ul>
<li>大変そうなので後回し中</li>
</ul>
</li>
<li>起動する Terminal 差し替え
<ul>
<li>今はまだ xfce4-terminal を動かしているが urxvt にした方が軽くて良さそうだなと思っている</li>
</ul>
</li>
</ul>
<p>ここにリストアップした以外にも文章中にもそういうのが書かれてるしぱっとは思い付いてない何かもありそうなのでまだまだ設定には時間がかかりそう。楽しいねえ。</p>
]]></content>
        </item>
        
        <item>
            <title>銀座Rails#37に参加した</title>
            <link>https://mugijiru.github.io/posts/ginza-rails-37/</link>
            <pubDate>Sun, 26 Sep 2021 13:09:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ginza-rails-37/</guid>
            <description>ブログ書くまでが勉強会って話もあるのでブログに残しておきます。正直そういうのサボりがちだけどね……。 一昨日の夜にオンライン開催していた 銀座R</description>
            <content type="html"><![CDATA[<p>ブログ書くまでが勉強会って話もあるのでブログに残しておきます。正直そういうのサボりがちだけどね……。</p>
<p>一昨日の夜にオンライン開催していた <a href="https://ginza-rails.connpass.com/event/223078/">銀座Rails#37</a> に参加しました。</p>
<p>今回話されたテーマは</p>
<ul>
<li>Google Play IAB(In-App Billing) 〜Railsでのサーバサイド対応のすべて〜</li>
<li>Kaigi on Rails 2021タイムテーブル完全解説</li>
<li>Ruby/Railsと遠隔講義：受講者評点がリモートでも伸びた理由</li>
<li>既存のRESTful なRails プロジェクトに、GraphQLの導入を検討した話</li>
</ul>
<p>の4本立てと、リンクアンドモチベーション様及び DeNA 様のスポンサーセッション。</p>
<h2 id="google-play-iab--in-app-billing--railsでのサーバサイド対応のすべて">Google Play IAB(In-App Billing) 〜Railsでのサーバサイド対応のすべて〜</h2>
<p>この話は正直私の能力不足で「なんか知らんがすごそうだ」って感じでした。決済周りも Google Play 周りも Android も全然わからん……。</p>
<p>TL を見てると Google Play IAB は筋が良さそうみたいな雰囲気を感じた。あと、テーブル設計も含めた大分具体的な話もしているのでこのあたりに手を出す人にはとても役立ちそうな雰囲気を感じたので資料をチェックしておくと良さそう</p>
<p><a href="https://speakerdeck.com/mitsuboshi/google-play-iab-in-app-billing-railsdefalsesabasaidodui-ying-falsesubete">https://speakerdeck.com/mitsuboshi/google-play-iab-in-app-billing-railsdefalsesabasaidodui-ying-falsesubete</a></p>
<h2 id="kaigi-on-rails-2021タイムテーブル完全解説">Kaigi on Rails 2021タイムテーブル完全解説</h2>
<p><a href="https://kaigionrails.org/2021/">Kaigi on Rails 2021</a> の各発表のタイムテーブル、つまりそれぞれの時間でどういう話がされるのかを制限時間内に解説してくれていた。<a href="https://kaigionrails.org/2021/timetable/#day1">タイムテーブルはこちらから</a></p>
<p>色々興味深い話がありそうなので私も参加登録しておきました。イエイ。金曜日は有休を取ろうと思います。</p>
<p>その前に業務としての参加を上司に打診しようかな。業務に役立ちそうな内容がたくさんあるのでチーム全員参加してもらいたい。</p>
<p>参加登録は <a href="https://kaigionrails.doorkeeper.jp/events/127662">https://kaigionrails.doorkeeper.jp/events/127662</a> で受付中。</p>
<h2 id="ruby-railsと遠隔講義-受講者評点がリモートでも伸びた理由">Ruby/Railsと遠隔講義：受講者評点がリモートでも伸びた理由</h2>
<p>資料が探せなかったので記憶頼りの記述になるけど講義の地道な改善で評点が上がったというお話でした。情報のインプットはオンデマンドでできるようにして講義では課題を実施してもらうとか。</p>
<p>Kaigi on Rails 2021 でも yasulab さんの発表があるので関係した話が聞けるかも?
<a href="https://kaigionrails.org/2021/talks/yasulab/">https://kaigionrails.org/2021/talks/yasulab/</a></p>
<h2 id="既存のrestful-なrails-プロジェクトに-graphqlの導入を検討した話">既存のRESTful なRails プロジェクトに、GraphQLの導入を検討した話</h2>
<p>最終的には GraphQL の導入は一旦見送りにしたよという発表でした。今回の発表で、私はこの発表が一番好きでした。</p>
<p>色々な課題があるのでそれを解決するために GraphQL が良さそうだなということでそれを導入しようとチャレンジして、色々検討した結果、最終的に GraphQL の導入は見送って、ただ解決したい課題は一部解決したよというお話。</p>
<p>導入に向けて検討していって、課題解決ができないことに気付いて、導入を取り止めるという判断が下されるまでの経緯が描かれていてとても良い発表でした。ちゃんと「導入を見送る」って判断ができてる点もとても良い。</p>
<p>弊社でも似たような課題を抱えていて GraphQL には興味があるけど……みたいな状態なので導入しなかった理由が知れるのはとても嬉しい。</p>
<p>そんな嬉しい内容が書かれている <a href="https://speakerdeck.com/hiroyaiizuka/ji-cun-falserestful-na-railspuroziekutonigraphqldao-ru-wojian-tao-sitahua">登壇資料はこちら</a></p>
<p>ちなみに弊社で導入してないのは、
Schema 駆動で十分開発がまだ成り立っているからかな。フロントエンドとサーバサイドも担当がキレイに分かれてないし。
GraphQL に関する知見がないというのもあるけどね。</p>
<p>GraphQL 導入するなら多分最初は
graphql-ruby を使って、管理系の画面でお試しかな〜とかは思っているが話が脱線しているのでこの程度で。</p>
<h2 id="スポンサーセッション-リンクアンドモチベーション様">スポンサーセッション: リンクアンドモチベーション様</h2>
<p>2021/09/29 19:30 スタートの
<a href="https://lmi.connpass.com/event/223245/">進化するエンジニアキャリアパスの在り方【クラスメソッド×リンクアンドモチベーション】</a>
というイベントのご紹介などなど。</p>
<p>キャリアに悩んでるエンジニア向けイベントですね。先着順で50名まで、そして 2021/09/26 12:00 時点で 8 割以上枠が埋まってるので気になる方はお早めに。</p>
<h2 id="スポンサーセッション-dena-様">スポンサーセッション: DeNA 様</h2>
<p><a href="https://kencom.jp/">kencom</a> というサービスのご紹介と
2021/09/29 開催イベント <a href="https://techcon2021.dena.dev/autumn">DeNA TechCon 2021 Autumn</a> のご案内。</p>
<p>kencom は会社が加入している健康保健組合等が導入していれば無料で利用できるサービスで健診データの推移をチェックできたりするみたい。裏側ではそうやって集めたデータを分析したりしているみたい。すごそう。</p>
<p>DeNA TechCon 2021 Autumn は開催日が 2021/09/29 とリンクアンドモチベーション様のイベントと開催日が重なっているけど幸い時間はズレているので両方参加することは可能。</p>
<p>過去配信が YouTube なので恐らくこのイベントの配信も YouTube なのかな?</p>
<h2 id="懇親会">懇親会</h2>
<p>オンライン勉強会の懇親会の雰囲気を味わってみたくて聞いていた。
Podcast みたいな感覚で聞けるんですね。なるほどって感じでした。</p>
<p>内容そんなに覚えてないけど、本編でも少し出ていた採用技術と人材採用のお話はあるあるだな〜という感想があった。</p>
<p>時代遅れの技術を使い続けてると採用で敬遠されるとか、導入している技術が覇権争いに勝てず、それを使って開発できる人が確保できないとか、それが使える数少ない人が辞めれない問題とかありましたね。</p>
<p>私も「ember-rails アプリを保守できる人がいない」問題対応のため
<a href="/posts/ember-rails-introduction/">ember-rails アプリケーション保守入門</a> を書いたり、そもそも ember-cli-rails にした方がいいよねってことで
<a href="/posts/migrate-ember-rails-to-ember-cli-rails/">ember-rails から ember-cli-rails へ</a> を書いたりしていますが、ちょっと状況がマシになっただけで解決はできてない。困ったもんです。</p>
<h2 id="その他">その他</h2>
<p>今回から銀座 Rails はシーズン2、つまり運営が新しい方に受け継がれている。
<a href="https://techracho.bpsinc.jp/morimorihoge/2021%5F09%5F02/111210">https://techracho.bpsinc.jp/morimorihoge/2021%5F09%5F02/111210</a></p>
<p>引き継いで、準備を頑張っていたのが Tweet でも伺えてそして実際当日とてもスムーズに進行できていた。すごい。トラブルなく配信してくれた運営に感謝……!</p>
]]></content>
        </item>
        
        <item>
            <title>Storybook の SCSS 対応でハマった</title>
            <link>https://mugijiru.github.io/posts/storybook-with-scss/</link>
            <pubDate>Fri, 17 Sep 2021 12:07:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/storybook-with-scss/</guid>
            <description>この記事は、2021年9月16日に起きたことなので、多分賞味期限は凄く短かい内容だけど、自分用にメモとして書いています。 それは置いといて、汎</description>
            <content type="html"><![CDATA[<p>この記事は、2021年9月16日に起きたことなので、多分賞味期限は凄く短かい内容だけど、自分用にメモとして書いています。</p>
<p>それは置いといて、汎用的なコンポーネントライブラリみたいなのを作ってみたくなったので趣味で Storybook を動かしてみている。</p>
<p>なのでそこで流行りっぽい Storybook で作ってみているのだが素の CSS だと面倒なので SCSS を採用することにした。</p>
<p>SCSS なのは Brace は欲しかったのと、ライブラリの更新が頻繁なので、更新間隔が空きがちな Stylus より良さそうと思ったから。</p>
<p>というわけで <code>@storybook/html</code> の <code>6.3.8</code> を入れてるわけだけどそこに scss が使えるようにということで</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">npm install --save-dev css-loader sass-loader style-loader
</code></pre></div><p>とかしたら</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">npm ERR! code ERESOLVE
npm ERR! ERESOLVE could not resolve
</code></pre></div><p>などと言われてしまう。</p>
<p>適当に <code>--legacy-peer-deps</code> で突っ込んでもで突っ込んでも、結局は起動時にエラーになってしまう。</p>
<p>で、面倒なら真面目に調べると、
Storybook の内部で使われてる Webpack が 4 系で、最新の sass-loader, css-loader, style-loader だと Webpack 5 でしか動かないのでそこで依存関係が解決できないってことがわかった。
npm の依存関係のエラー読みにくいでござる。</p>
<p>というわけで Webpack4 のサポートをしていたバージョンである</p>
<ul>
<li>style-loader@2</li>
<li>css-loader@5</li>
<li>sass-loader@10</li>
</ul>
<p>を入れることで解決した。</p>
<p>Storybook って Issue が 1300 件ぐらいそのままになってるし、
Webpack5 対応にもなってなさそうなので、本当に使って大丈夫なのかは心配……。</p>
]]></content>
        </item>
        
        <item>
            <title>Emacs のロックファイルと Webpack dev server の設定</title>
            <link>https://mugijiru.github.io/posts/configure-webpack-dev-server-with-emacs/</link>
            <pubDate>Thu, 16 Sep 2021 10:22:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/configure-webpack-dev-server-with-emacs/</guid>
            <description>また同じ罠を踏んだ時に同じ対応ができるようにということでメモ。 プライベートで vue-cli とかを使って npm run serve とかしている時にファイルを変更する度に [Error: ENOENT: no</description>
            <content type="html"><![CDATA[<p>また同じ罠を踏んだ時に同じ対応ができるようにということでメモ。</p>
<p>プライベートで vue-cli とかを使って
<code>npm run serve</code> とかしている時にファイルを変更する度に</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">[Error: ENOENT: no such file or directory, stat &#39;/path/to/src/components/.#HelloWorld.vue&#39;]
</code></pre></div><p>とか怒られて辛かった。
Emacs のロックファイルである。</p>
<p>ロックファイルを生成しないというのもアリかもしれないが正常に保存されれば自動で消えるファイルだしそこに手を入れるよりは、監視対象ファイルを制限した方が良さそう、と判断して調べた。</p>
<p><code>npm run serve</code> では裏側で webpack-dev-server が動いているようなのでそこで watch 対象からロックファイルを外すべく
<code>vue.config.js</code> を以下のように設定した。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">module</span>.<span style="color:#a6e22e">exports</span> <span style="color:#f92672">=</span> {
  <span style="color:#a6e22e">configureWebpack</span><span style="color:#f92672">:</span> {
    <span style="color:#a6e22e">devServer</span><span style="color:#f92672">:</span> {
      <span style="color:#a6e22e">watchOptions</span><span style="color:#f92672">:</span> {
        <span style="color:#a6e22e">ignored</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;node_modules&#39;</span>, <span style="color:#e6db74">&#39;public&#39;</span>, <span style="color:#e6db74">&#39;**/.#*&#39;</span>],
      }
    }
  }
}
</code></pre></div><p>肝は <code>'**/.#*'</code> である。
Emacs のロックファイルは <code>.#</code> の後にオリジナルのファイル名がくっついてくる形なのでそいつを全部無視する、というだけ。</p>
<p>これでファイルを変更しても怒られなくなってハッピー。</p>
<p>ちなみに同じ問題が React の開発の時にも発生するので多分同じような方法で直せる。まだ試してないけど。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-cli-rails アプリで Rails6 の Deprecation Warning が出ないようにした</title>
            <link>https://mugijiru.github.io/posts/ember-cli-rails-with-rails6-without-deprecation-warning/</link>
            <pubDate>Sun, 22 Aug 2021 00:50:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-cli-rails-with-rails6-without-deprecation-warning/</guid>
            <description>ember-cli-rails なアプリを Rails6 対応にしてみた。が、リリースされている Gem をそのまま使うと DEPRECATION WARNING: Initialization autoloaded the constants ActionText::ContentHelper, ActionText::TagHelper, and EmberCliRailsAssetsHelper. Being able to do this is deprecated. Autoloading during initialization is going to be an error condition in future versions of Rails. Reloading does not</description>
            <content type="html"><![CDATA[<p>ember-cli-rails なアプリを Rails6 対応にしてみた。が、リリースされている Gem をそのまま使うと</p>
<blockquote>
<p>DEPRECATION WARNING: Initialization autoloaded the constants ActionText::ContentHelper, ActionText::TagHelper, and EmberCliRailsAssetsHelper.</p>
<p>Being able to do this is deprecated. Autoloading during initialization is going
to be an error condition in future versions of Rails.</p>
<p>Reloading does not reboot the application, and therefore code executed during
initialization does not run again. So, if you reload ActionText::ContentHelper, for example,
the expected changes won&rsquo;t be reflected in that stale Module object.</p>
<p>These autoloaded constants have been unloaded.</p>
<p>Please, check the &ldquo;Autoloading and Reloading Constants&rdquo; guide for solutions.
(called from &lt;top (required)&gt; at /app/config/environment.rb:5)</p>
</blockquote>
<p>という Deprecation Warning が出てつらかった。</p>
<h2 id="原因">原因</h2>
<p><a href="https://github.com/thoughtbot/ember-cli-rails/tree/v0.11.0">ember-cli-rails@0.11.0</a> 及びそれが依存している <a href="https://github.com/seanpdoyle/ember-cli-rails-assets/tree/v0.6.2">ember-cli-rails-assets@0.6.2</a> ではまだ Rails6 の Deprecation Warning への対応が入っていなかった。</p>
<h2 id="解決方法">解決方法</h2>
<p>よくよく調べると
ember-cli-rails の方は既にマージされている
<a href="https://github.com/thoughtbot/ember-cli-rails/pull/587">https://github.com/thoughtbot/ember-cli-rails/pull/587</a>
で対応がされていて、
ember-cli-rails-assets の方は
<a href="https://github.com/seanpdoyle/ember-cli-rails-assets/pull/12">https://github.com/seanpdoyle/ember-cli-rails-assets/pull/12</a>
に対応ブランチが用意されていた。</p>
<p>というわけで、
ember-cli-rails の方は master から
ember-cli-rails-assets は上のプルリクエストのブランチを使うように
Gemfile を書き換えるだけで済んだ。</p>
<p>が、とりあえず master を見るのはいつか知らない間に更新が入りそうで怖いので
ember-cli-rails は現在の最新の ref を取るようにしている。</p>
<p>というわけで以下のような書き方になった。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">gem <span style="color:#e6db74">&#39;ember-cli-rails&#39;</span>, <span style="color:#e6db74">github</span>: <span style="color:#e6db74">&#39;thoughtbot/ember-cli-rails&#39;</span>, <span style="color:#e6db74">ref</span>: <span style="color:#e6db74">&#39;1e56a03fb8437f52dfd450454c71cffda2981d66&#39;</span>
gem <span style="color:#e6db74">&#39;ember-cli-rails-assets&#39;</span>, <span style="color:#e6db74">github</span>: <span style="color:#e6db74">&#39;seanpdoyle/ember-cli-rails-assets&#39;</span>, <span style="color:#e6db74">branch</span>: <span style="color:#e6db74">&#39;rely-on-engine-to-load-helper&#39;</span>
</code></pre></div><p>ということを ember-cli-rails-app というリポジトリの
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/109">https://github.com/mugijiru/ember-rails-todo-app/pull/109</a>
で対応した。</p>
<p>なお Rails6 には
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/106/files">https://github.com/mugijiru/ember-rails-todo-app/pull/106/files</a>
でアップグレードしている。結果的にはこのプルリクエストでは rails app:update して load_defaults を 6.0 にして関係ない Warning を潰しただけになっていたりする。</p>
<h2 id="その他">その他</h2>
<p>ember-cli-rails は
Ruby 3.0 対応のプルリクエストも含めて結構なプルリクエストや Issue が放置されてるのでこのまま使い続けるのは厳しそうな雰囲気。</p>
<p>いずれ ember-cli-rails も捨てて ember-cli 単体で動かすようにした方が良さそう</p>
]]></content>
        </item>
        
        <item>
            <title>key-chord を使って Sticky Shift を一部実現した</title>
            <link>https://mugijiru.github.io/posts/sticky-shift-with-key-chord/</link>
            <pubDate>Sun, 11 Jul 2021 13:42:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/sticky-shift-with-key-chord/</guid>
            <description>Emacs 使っていると左手小指を酷使しますよね。 まあそれはみんな分かり切ってるので、それぞれが色々な工夫で、左手小指を必要以上に使わないような対応を</description>
            <content type="html"><![CDATA[<p>Emacs 使っていると左手小指を酷使しますよね。</p>
<p>まあそれはみんな分かり切ってるので、それぞれが色々な工夫で、左手小指を必要以上に使わないような対応をされていると思います。</p>
<p>私もそんな中の一人で、最近もうシフトキーを押したくないなあという気持ちになって来ました。</p>
<p>というわけで key-chord を使って Sticky Shift を一部実現して少しだけシフトキーを押さなくても済むような状態を作ってみました。</p>
<p>とりあえず以下の文章を読むのが面倒だったら
<a href="https://github.com/mugijiru/.emacs.d/pull/324/files#diff-9fab5d4bac36f504628abcc3cea5b2a1092d96f7bd2286944d5b822c6821bb3a">https://github.com/mugijiru/.emacs.d/pull/324/files#diff-9fab5d4bac36f504628abcc3cea5b2a1092d96f7bd2286944d5b822c6821bb3a</a>
にコードがあるのでそっちを見てもらえればと。</p>
<h2 id="実現したこと">実現したこと</h2>
<h3 id="セミコロン-plus-アルファベットで対応する大文字を出力">セミコロン + アルファベットで対応する大文字を出力</h3>
<p>プログラムを書いているとやれ camelCase だの PascalCase だのでちょくちょくと大文字を入力する機会多いですよね。</p>
<p>というわけで、例えば <code>;a</code> と素早く入力したら <code>A</code> が出力されるようにしてみたというのが以下のコードになります。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(<span style="color:#a6e22e">mapc</span> (lambda (key)
        (key-chord-define-global (<span style="color:#a6e22e">concat</span> <span style="color:#e6db74">&#34;;&#34;</span> (<span style="color:#a6e22e">char-to-string</span> key)) (<span style="color:#a6e22e">char-to-string</span> (<span style="color:#a6e22e">-</span> key <span style="color:#ae81ff">32</span>))))
      (number-sequence <span style="color:#e6db74">?a</span> <span style="color:#e6db74">?z</span>))
</code></pre></div><p><code>number=sequence</code> で a から z までのシーケンスを作成して
<code>;</code> との組み合わせを key-chord に食わせて対応するアルファベットの大文字を渡しているというシンプルな構成。</p>
<p><code>key-chord-define-global</code> などは第二引数に文字列を与えるとそれをそのまま <code>define-key</code> の第三引数に渡すのであたかもそれが入力されたかのような振舞をするのでそれを利用している。</p>
<p>といいつつ Hydra とか magit の上でそれをやってもうまくいかないのでキーボード入力とは少し違う様子。</p>
<h3 id="セミコロン2回でシフトキーが押された状態にする">セミコロン2回でシフトキーが押された状態にする</h3>
<p>上に書いたように Hydra とか magit とかでいい感じに動かすためにはまだ足りてない。</p>
<p>が、それをいい感じに解決する方法をまだ知らないので以下の実装により <code>;;</code> と入力することで、シフトキーが押されてる状態を実現している。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(key-chord-define-global <span style="color:#e6db74">&#34;;;&#34;</span>
                         <span style="color:#e6db74">&#39;event-apply-shift-modifier</span>)

(key-chord-define key-translation-map
                  <span style="color:#e6db74">&#34;;;&#34;</span>
                  <span style="color:#e6db74">&#39;event-apply-shift-modifier</span>)
</code></pre></div><p>多分本当はこんな感じで2回似たような事を書かなくてもいいやり方があるんだろうけど今のところこれで動くから良しとしている。</p>
<p>ここで使っている <code>event-apply-shift-modifier</code> という関数がシフトを入力している状態にしてくれるやつで、類似品に <code>event-apply-control-modifier</code> など、修飾キー系は全部用意されている。</p>
<p>これらの <code>event-apply-*-modifier</code> 系の関数は <code>C-x @ S</code> などと叩くと呼ばれたりするので
iTerm とかの中で Emacs を動かしている勢が無理やり修飾キー入力を実現したりするために何やら設定するのにも使っているが今回のように sticky 的な機能を実現するのに便利なやつだったりします。
<a href="https://github.com/martialboniou/emacs-revival/blob/master/sticky-control.el">sticky-control</a> でも使われているしね。</p>
<h2 id="今後対応していきたいこと">今後対応していきたいこと</h2>
<h3 id="セミコロン-plus-数字キーや記号キーの対応">セミコロン + 数字キーや記号キーの対応</h3>
<p>今回はとりあえずアルファベットだけ Sticky Shift に対応しているがやはり記号系のキーとか数字系のキーも対応できてないと
Shift を押す機会を減らせないので今後はそのあたりも対応していきたい。</p>
<p>なお rubikitch 氏の <a href="https://www.emacswiki.org/emacs/sticky.el">sticky.el</a> では実現できていそうなので似たようなことをすれば良さそう。</p>
<h3 id="セミコロン-plus-アルファベットでその文字を入力したことにしたい">セミコロン + アルファベットでその文字を入力したことにしたい</h3>
<p>今回の実装では「セミコロン+アルファベット」で **大文字をバッファに出力** できるように対応しているが
**大文字を入力したこと** にはできてない。</p>
<p>この2つの何が違うかというと前者しか実現できてない現状だと例えば magit を操作している時に <code>P</code> の代わりに <code>;p</code> を入力した場合には
<code>Quit transient!</code> と表示されるだけで Pull の操作ができない状態である。</p>
<p><code>;;</code> で <code>event-apply-shift-modifier</code> しているので、
<code>;;p</code> とすれば Pull の操作もできるのだがやはりできる限り簡単なキー入力でやりたいことを実現できるようになりたい。</p>
]]></content>
        </item>
        
        <item>
            <title>ivy を使った自作コマンドなどをテストするようにした</title>
            <link>https://mugijiru.github.io/posts/testing-my-emacs-command/</link>
            <pubDate>Sun, 13 Jun 2021 15:18:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/testing-my-emacs-command/</guid>
            <description>これまで Emacs Lisp のテストコードを書いてなかった。 というのも、自分は特にパッケージを作ってるわけでもなく、設定ファイルを弄ってるだけなので動かなく</description>
            <content type="html"><![CDATA[<p>これまで Emacs Lisp のテストコードを書いてなかった。</p>
<p>というのも、自分は特にパッケージを作ってるわけでもなく、設定ファイルを弄ってるだけなので動かなくなっても困るのは自分だけ、という状況なのでまあテストしなくてもいいかな、みたいな。</p>
<p>とは思っているものの、やっぱりテストコード書いてみたいよねってことで設定ファイルに書いている自作の関数やコマンドをテストすることにした。</p>
<h2 id="自作関数のテスト">自作関数のテスト</h2>
<p>自作コマンドの内部で使ってる関数のテストを
<a href="https://github.com/mugijiru/.emacs.d/pull/233">https://github.com/mugijiru/.emacs.d/pull/233</a>
で書いてみた。</p>
<p>なぜそんなものをテストしているかというと、リファクタリングしたかったので、ならテスト書いた方がいいよね〜みたいな。</p>
<p>テストコードは以下のような感じ。前提条件として <code>org-todo-keywords</code> を用意して、関数を実行した時の期待する結果と、実際の結果を
should マクロを使って合っていることを確認している。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(ert-deftest test:my/org-todo-keyword-strings ()
  <span style="color:#e6db74">&#34;Test of </span><span style="color:#e6db74">`my/org-todo-keyword-strings&#39;</span><span style="color:#e6db74">.&#34;</span>
  (setq org-todo-keywords
        <span style="color:#f92672">&#39;</span>((sequence <span style="color:#e6db74">&#34;TODO&#34;</span> <span style="color:#e6db74">&#34;DOING(!)&#34;</span> <span style="color:#e6db74">&#34;WAIT&#34;</span> <span style="color:#e6db74">&#34;|&#34;</span> <span style="color:#e6db74">&#34;DONE(!)&#34;</span> <span style="color:#e6db74">&#34;SOMEDAY(s)&#34;</span>)))
  (should (<span style="color:#a6e22e">equal</span> <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;TODO&#34;</span> <span style="color:#e6db74">&#34;DOING&#34;</span> <span style="color:#e6db74">&#34;WAIT&#34;</span> <span style="color:#e6db74">&#34;DONE&#34;</span> <span style="color:#e6db74">&#34;SOMEDAY&#34;</span>)
                 (my/org-todo-keyword-strings))))
</code></pre></div><p>ま、とても簡単な例だと思う。</p>
<p>ちなみにこの記事や出した PR では setq を使ってるけど、最新のコードでは let を使うようにテストを書き直してある。</p>
<h2 id="ivy-を使った自作コマンドのテスト">ivy を使った自作コマンドのテスト</h2>
<p>上に示した PR では
ivy を使った処理はテストができない(しづらい)と判断しコマンド内部で使ってる関数だけテストしている。</p>
<p>だけどやっぱり ivy を使ってるコマンド自体もテストしてみたいよねということで以下の PR を作った</p>
<p><a href="https://github.com/mugijiru/.emacs.d/pull/235">https://github.com/mugijiru/.emacs.d/pull/235</a></p>
<h3 id="with-simulated-input-の導入">with-simulated-input の導入</h3>
<p>ivy を使ってるコマンドのテストで難しそうだなと思っていたのが
ivy の操作部分のシミュレーション。</p>
<p>なのだけど
<a href="https://github.com/DarwinAwardWinner/with-simulated-input">https://github.com/DarwinAwardWinner/with-simulated-input</a>
を見つけて解決した。</p>
<p>こいつはユーザーの入力を文字列で表現してその通りに操作をしてくれるようなライブラリ。</p>
<p>第一引数に <code>&quot;hello SPC world RET&quot;</code> みたいに入れたら
&ldquo;hello world&rdquo; と入力して Enter を叩く、みたいな入力をしてくれる。わかりやすい。</p>
<p>入力と入力の間に wait を持たせたかったら
<code>wsi-simulate-idle-time</code> という関数でミリ秒単位で wait も入れられるっぽい。その機能はまだ使ったことないけど便利そう。</p>
<h3 id="cl-letf-による関数の差し替え">cl-letf による関数の差し替え</h3>
<p>今回テスト対象にしているコードは内部で org-mode の <code>org-todo</code> 関数を呼んでいる。だけど別に <code>org-todo</code> の機能をテストしたいわけではなく
ivy を使った絞り込みで適切に値が選択されることを検証したいのである。</p>
<p>というわけで cl-letf を使って呼んだ先で使われている org-todo を以下のように一時的に差し替える。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(cl-letf (((<span style="color:#a6e22e">symbol-function</span> <span style="color:#e6db74">&#39;org-todo</span>)
           (lambda (keyword)
             (setq result keyword))))
  <span style="color:#75715e">;; ここにテストコードを書く</span>
  )
</code></pre></div><p>ちなみにこの着想に到ったのは
<a href="https://g000001.cddddr.org/3690354344">https://g000001.cddddr.org/3690354344</a>
の記事を読んだから。</p>
<p>そう。私もまた壊れた flet が欲しかったのである。</p>
<p>そして世の中にいい記事があってありがたいね。</p>
<h3 id="実際のテストコード">実際のテストコード</h3>
<p>以上で説明したようなやつを使って、以下のようなテストコードになった。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(ert-deftest test:my/org-todo ()
  <span style="color:#e6db74">&#34;Test of </span><span style="color:#e6db74">`my/org-todo&#39;</span><span style="color:#e6db74">.&#34;</span>
  (let ((org-todo-keywords <span style="color:#f92672">&#39;</span>((sequence <span style="color:#e6db74">&#34;TODO&#34;</span> <span style="color:#e6db74">&#34;DOING(!)&#34;</span> <span style="color:#e6db74">&#34;WAIT&#34;</span> <span style="color:#e6db74">&#34;|&#34;</span> <span style="color:#e6db74">&#34;DONE(!)&#34;</span> <span style="color:#e6db74">&#34;SOMEDAY(s)&#34;</span>)))
        (result))
    <span style="color:#75715e">;; org-mode を読まずに済むように org-todo を差し替えてテストしている</span>
    (cl-letf (((<span style="color:#a6e22e">symbol-function</span> <span style="color:#e6db74">&#39;org-todo</span>)
               (lambda (keyword)
                 (setq result keyword))))
      (with-simulated-input <span style="color:#e6db74">&#34;DOI RET&#34;</span> (my/org-todo))
      (should (<span style="color:#a6e22e">equal</span> <span style="color:#e6db74">&#34;DOING&#34;</span> result)))))
</code></pre></div><p><code>my/org-todo</code> を実行したら org-todo のキーワードが ivy に表示されてそこから絞り込んで選択する、ということを期待したテストである。</p>
<p>今回は &ldquo;DOI&rdquo; まで入力して候補が DOING だけになりそこで Enter を押すとそれが選択されることをテストしている。</p>
<p>選択された結果は org-todo を差し替えた関数で
result という変数に束縛しているので、それが &ldquo;DOING&rdquo; という文字列と一致しているかを検証しているだけ。</p>
<h2 id="最後に">最後に</h2>
<p>ところで、
buffer の変更のテストってどうしたらいいんでしょうかね。</p>
<p>何か適当なバッファを用意して関数を実行した後に
<code>(buffer-string)</code> と期待値がマッチするかを確認したらいいのかな</p>
]]></content>
        </item>
        
        <item>
            <title>org-todo を ivy で設定できるようにするパート2</title>
            <link>https://mugijiru.github.io/posts/set-org-todo-from-ivy-part2/</link>
            <pubDate>Thu, 10 Jun 2021 20:53:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/set-org-todo-from-ivy-part2/</guid>
            <description>org-todo を ivy で設定できるようにした という記事で org-todo を ivy で設定できるようにしたつもりだったんですけど、ダメでした。 何がダメだったかというと org-todo-keywords-for-agenda という変数</description>
            <content type="html"><![CDATA[<p><a href="/posts/set-org-todo-from-ivy/">org-todo を ivy で設定できるようにした</a> という記事で
org-todo を ivy で設定できるようにしたつもりだったんですけど、ダメでした。</p>
<p>何がダメだったかというと
<code>org-todo-keywords-for-agenda</code> という変数を使ってるのがダメだった。</p>
<p>この変数、何かよくわからんタイミングで設定されたりするっぽくてほとんどの場合で空の値になっていた。</p>
<p>というわけで、ちょっと例の関数だと使いたい時にその値が空になっていてばかりで正直使い物にならない関数になっていた。死蔵していた。</p>
<p>まあ俺はそんな半端な状態で放置するような男ではない。嘘です。1年ぐらい放置していました。だけど逆にいうと1年越しでなんとか対応しました。というのが以下の PR になります。</p>
<p><a href="https://github.com/mugijiru/.emacs.d/pull/231">https://github.com/mugijiru/.emacs.d/pull/231</a></p>
<p>PR の description にも書いている通り愚直に org-todo-keywords を加工するように変更している。</p>
<p>私の設定している org-todo-keywords は現在は</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">((sequence <span style="color:#e6db74">&#34;TODO&#34;</span> <span style="color:#e6db74">&#34;DOING(!)&#34;</span> <span style="color:#e6db74">&#34;WAIT&#34;</span> <span style="color:#e6db74">&#34;|&#34;</span> <span style="color:#e6db74">&#34;DONE(!)&#34;</span> <span style="color:#e6db74">&#34;SOMEDAY(s)&#34;</span>))
</code></pre></div><p>という感じ。</p>
<p>これを</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(<span style="color:#a6e22e">mapcar</span> (lambda (element)
          (replace-regexp-in-string <span style="color:#e6db74">&#34;\(.+\)&#34;</span> <span style="color:#e6db74">&#34;&#34;</span> element))
        (--remove (string= <span style="color:#e6db74">&#34;|&#34;</span> it) (cdar org-todo-keywords)))
</code></pre></div><p>のような処理で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp"><span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;TODO&#34;</span> <span style="color:#e6db74">&#34;DOING&#34;</span> <span style="color:#e6db74">&#34;WAIT&#34;</span> <span style="color:#e6db74">&#34;DONE&#34;</span> <span style="color:#e6db74">&#34;SOMEDAY&#34;</span>)
</code></pre></div><p>みたいな感じで、キー指定の <code>(s)</code> や、未完了or完了状態を区切る <code>|</code> とかを取り除いた文字列のリストにしている。</p>
<p>org-todo-keywords は本当は</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(setq org-todo-keywords
      <span style="color:#f92672">&#39;</span>((sequence <span style="color:#e6db74">&#34;TODO&#34;</span> <span style="color:#e6db74">&#34;|&#34;</span> <span style="color:#e6db74">&#34;DONE&#34;</span>)
        (sequence <span style="color:#e6db74">&#34;REPORT&#34;</span> <span style="color:#e6db74">&#34;BUG&#34;</span> <span style="color:#e6db74">&#34;KNOWNCAUSE&#34;</span> <span style="color:#e6db74">&#34;|&#34;</span> <span style="color:#e6db74">&#34;FIXED&#34;</span>)
        (sequence <span style="color:#e6db74">&#34;|&#34;</span> <span style="color:#e6db74">&#34;CANCELED&#34;</span>)))
</code></pre></div><p>みたいに複数のシーケンスを持つことができるけどそういう使い方はしてないので、そういうケースは無視している。</p>
<p>とりあえずこれでようやく ivy で org-todo を設定できるようになった。ちょっと便利になった。</p>
]]></content>
        </item>
        
        <item>
            <title>GitHub Actions で使ってる Action 達</title>
            <link>https://mugijiru.github.io/posts/using-actions-in-github/</link>
            <pubDate>Sun, 30 May 2021 09:50:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/using-actions-in-github/</guid>
            <description>個人リポジトリでは CI などを GitHub Actions に任せている。で、誰かが作ってくれた色々な Action に助けられている。 というわけでそれらを、より多く助けられてるなって</description>
            <content type="html"><![CDATA[<p>個人リポジトリでは CI などを GitHub Actions に任せている。で、誰かが作ってくれた色々な Action に助けられている。</p>
<p>というわけでそれらを、より多く助けられてるなってやつから紹介してみようと思う。</p>
<p>正直、自分が何を使ってたかを後から調べる時にこの記事を読めば大体済むよねってなりそうなので書いている部分が大きい。すーぐ忘れるもん。</p>
<h2 id="actions-checkout">actions/checkout</h2>
<p><a href="https://github.com/marketplace/actions/checkout">https://github.com/marketplace/actions/checkout</a></p>
<p>多分 GitHub Actions を使ってる人ならみんな使ってる。だって普通チェックアウトするもんね。使うよね。</p>
<p>今のところ自分は単純に checkout するのにしか使ってないが何気にオプションが多い。それらの使い方もしっかり書かれていて良い。</p>
<p>普通に使う分には</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">ref</span>: <span style="color:#ae81ff">${{ github.head_ref }}</span>
    <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span>
</code></pre></div><p>だけで良い。これで checkout される。楽。</p>
<p>自分の場合は submodule が必要だった際に</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">with</span>:
  <span style="color:#f92672">submodules</span>: <span style="color:#66d9ef">true</span>
</code></pre></div><p>としてみたり、
pull_request で動かしたいけど、その hash ではなく branch をチェックアウトしたい時に</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">with</span>:
  <span style="color:#f92672">ref</span>: <span style="color:#ae81ff">${{ github.head_ref }}</span>
</code></pre></div><p>としたりなどしてた。</p>
<h2 id="lazy-actions-slatify">lazy-actions/slatify</h2>
<p><a href="https://github.com/marketplace/actions/slatify">https://github.com/marketplace/actions/slatify</a></p>
<p>Slack 通知用の Action ですね。オプションが結構充実している。
CI 終了後に成功/失敗を通知するのに使っている。</p>
<p>Slack の方に Incoming Webhook を用意してそこを使ってメッセージを飛ばせるようにするやつ。</p>
<p>自分の場合はこんな感じで、成功失敗に関わらず通知を飛ばしていて、ただ失敗の場合は here mention が飛ぶようにしている。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Notify slack build result</span>
  <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">lazy-actions/slatify@master</span>
  <span style="color:#f92672">if</span>: <span style="color:#ae81ff">always()</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">type</span>: <span style="color:#ae81ff">${{ job.status }}</span>
    <span style="color:#f92672">job_name</span>: <span style="color:#e6db74">&#39;*Build*&#39;</span>
    <span style="color:#f92672">mention</span>: <span style="color:#e6db74">&#39;here&#39;</span>
    <span style="color:#f92672">username</span>: <span style="color:#e6db74">&#39;GitHub Actions&#39;</span>
    <span style="color:#f92672">mention_if</span>: <span style="color:#e6db74">&#39;failure&#39;</span>
    <span style="color:#f92672">channel</span>: <span style="color:#e6db74">&#39;#develop&#39;</span>
    <span style="color:#f92672">url</span>: <span style="color:#ae81ff">${{ secrets.SLACK_WEBHOOK }}</span>
    <span style="color:#f92672">commit</span>: <span style="color:#66d9ef">true</span>
    <span style="color:#f92672">token</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
</code></pre></div><p>ここではやってないけど絵文字も指定できるので便利。まあ Webhook 側に仕込んでいたらあまり使わないんだけども。</p>
<p>元は <code>homoluctus/slatify</code> だったので
ember-rails-todo-app とかでまだその設定を残している。変更しないと〜。</p>
<h2 id="ruby-setup-ruby">ruby/setup-ruby</h2>
<p><a href="https://github.com/ruby/setup-ruby">https://github.com/ruby/setup-ruby</a></p>
<p>Ruby やるならこれだよねってやつ。</p>
<p>多数のバージョンをサポートしているしリポジトリに .ruby-version ファイルがあればそれを見てくれる。</p>
<p>Bundler 周りも cache 使ったりとかをいい感じにしてくれてとても便利。</p>
<p>というわけで今のところ自分は以下の感じで間に合ってる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Use ruby</span>
  <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">ruby/setup-ruby@v1</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">bundler-cache</span>: <span style="color:#66d9ef">true</span>
</code></pre></div><h2 id="nanasess-setup-chromedriver">nanasess/setup-chromedriver</h2>
<p><a href="https://github.com/marketplace/actions/setup-chromedriver">https://github.com/marketplace/actions/setup-chromedriver</a></p>
<p>CI で Chrome でもテストしたい時に使ってる。
Rails で Capybara でテストする時ですね。</p>
<p>chromedriver のセットアップなので Capybara 使う時はこれでいいんじゃないかなって思ってる。
<a href="https://github.com/mugijiru/ember-rails-todo-app/blob/a98a66ae799eb60f16569c16165d3c456d041e76/spec/support/capybara.rb#L3-L14">rspec 側でも色々書く必要があるのでだるい</a> けど、まあ Chromedriver だからなのかな。</p>
<p>とりあえず workflow 側ではこんな程度でしか使ってない。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">use-chromedriver</span>
  <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">nanasess/setup-chromedriver@master</span>
</code></pre></div><p>他のプロジェクトだとテストどうやってるのかな。今度調べてみたいね。</p>
<h2 id="actions-setup-node">actions/setup-node</h2>
<p><a href="https://github.com/marketplace/actions/setup-node-js-environment">https://github.com/marketplace/actions/setup-node-js-environment</a></p>
<p>Node.js をセットアップしてくれる。自分は以下のような単純な使い方しかしてないけど、何度もお世話になっている。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Use Node.js</span>
  <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-node@v1</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">node-version</span>: <span style="color:#ae81ff">14.</span><span style="color:#ae81ff">x</span>
</code></pre></div><h2 id="reviewdog-action-setup">reviewdog/action-setup</h2>
<p><a href="https://github.com/reviewdog/action-setup">https://github.com/reviewdog/action-setup</a></p>
<p>eslint とか Rubocop とかの結果を使って GitHub 上で指摘してくれたりする便利なワンちゃん。</p>
<p>まあ eslint や Rubocop あたりは
<a href="https://github.com/reviewdog/action-eslint">reviewdog/action-eslint</a> とか後述の <a href="#reviewdog-action-rubocop">reviewdog/action-rubocop</a> とかを使えたらそっちを使う方が良い。</p>
<p>自分は eslint は yarn を使ってるからか自前の NPM ライブラリを使ってるからかで、
action-eslint だとうまく動かせなかったので
reviewdog/action-setup で reviewdog のセットアップだけして自前でコマンドを叩く方法を選択している。</p>
<p>というわけで</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">reviewdog/action-setup@v1</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">reviewdog_version</span>: <span style="color:#ae81ff">latest</span>
</code></pre></div><p>でとりあえず使えるようにして</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Run reviewdog</span>
  <span style="color:#f92672">env</span>:
    <span style="color:#f92672">REVIEWDOG_GITHUB_API_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
    <span style="color:#f92672">NPM_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.NPM_AUTH_TOKEN }}</span>
  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    </span>    <span style="color:#ae81ff">yarn --silent run eslint -f rdjson . | reviewdog -f=rdjson -reporter=github-pr-review</span>
</code></pre></div><p>みたいなことをしている。</p>
<p>Ember.js のテンプレートもそのうち対応しないとなあ……。</p>
<h2 id="reviewdog-action-rubocop">reviewdog/action-rubocop</h2>
<p><a href="https://github.com/marketplace/actions/run-rubocop-with-reviewdog">https://github.com/marketplace/actions/run-rubocop-with-reviewdog</a></p>
<p>最近入れてみた。設定にもよるけど、Rubocop で引っ掛かったところについて
PR のチェックリスト的なやつで教えてくれたり、コメントを入れてくれたりする。
Rubocop 先生に怒られたかったので便利。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">rubocop</span>
  <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">reviewdog/action-rubocop@v1</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">rubocop_version</span>: <span style="color:#ae81ff">gemfile</span>
    <span style="color:#f92672">rubocop_flags</span>: -<span style="color:#ae81ff">a</span>
    <span style="color:#f92672">rubocop_extensions</span>: <span style="color:#ae81ff">rubocop-rails:gemfile</span>
    <span style="color:#f92672">github_token</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
    <span style="color:#f92672">reporter</span>: <span style="color:#ae81ff">github-pr-review</span>
    <span style="color:#f92672">fail_on_error</span>: <span style="color:#66d9ef">true</span>
</code></pre></div><p>とりあえずこんな感じの設定で使ってる。基本的に Gemfile の設定を使って、後は何か見つかったら review として飛ばしてくれるようにしている。</p>
<p>rubocop_flags の <code>-a</code> は要るのかな……。少なくとも eslint の方は <code>--fix</code> するとかえって思ったような挙動にならなかったような……。まいっか。しばらくそのまま運用しよう。</p>
]]></content>
        </item>
        
        <item>
            <title>Hugo の build を GitHub Actions でやることにした</title>
            <link>https://mugijiru.github.io/posts/hugo-build-in-github-actions/</link>
            <pubDate>Sat, 29 May 2021 23:31:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/hugo-build-in-github-actions/</guid>
            <description>このサイトを構築するにあたりいつも手元で Hugo を build して push していたけどもまあだるいし、そろそろ GitHub Actions にも慣れて来たし探したら既に Action が提供されていたの</description>
            <content type="html"><![CDATA[<p>このサイトを構築するにあたりいつも手元で Hugo を build して push していたけどもまあだるいし、そろそろ GitHub Actions にも慣れて来たし探したら既に Action が提供されていたのでそれを使って build を自動化しました。</p>
<p>「しました」って書いているけど実は今書いてるこの記事自体がその実験用の記事であり、これを書いている時点ではまだ自動化検証中。なので記事に乗せられるものはほとんどない。</p>
<p>一応 <a href="https://github.com/mugijiru/mugijiru.github.com/tree/master/.github/workflows/build.yml">https://github.com/mugijiru/mugijiru.github.com/tree/master/.github/workflows/build.yml</a>
のあたりにそれ用の workflow が入って来る予定。</p>
<p>使ってるのは <a href="https://github.com/marketplace/actions/hugo-setup">hugo-setup</a> というやつ。
<code>run: hugo</code> するだけで build してくれるようで便利そう。
minify は差分的に微妙な感じするのでとりあえず使わないことにした</p>
<p>成功可否はいつものように Slack 通知するし
push して放置したら良いのは良さそう。</p>
<p>ま、これで build しないで済むようになったらちょっと楽になりそうで楽しみ。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails アプリケーション保守入門</title>
            <link>https://mugijiru.github.io/posts/ember-rails-introduction/</link>
            <pubDate>Mon, 24 May 2021 09:02:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-introduction/</guid>
            <description>ちょっとした事情で Ember.js 入門的なサムシングをすることになったけどどうせなら公開情報にしちゃえって気持ちになったので資料化する前にブログの記事にし</description>
            <content type="html"><![CDATA[<p>ちょっとした事情で Ember.js 入門的なサムシングをすることになったけどどうせなら公開情報にしちゃえって気持ちになったので資料化する前にブログの記事にしちゃうぞ、というエントリです。</p>
<h2 id="想定する読者">想定する読者</h2>
<p>携わっているシステムが ember-rails を利用して作られているために令和になっても 2018 年にサポートが切れてしまった <a href="mailto:Ember.js@2.18">Ember.js@2.18</a> のアプリケーションをなんとか動かし続けないといけない哀れな子羊たち</p>
<h2 id="記事を書いている人">記事を書いている人</h2>
<p>Rails と Ember.js と Vue.js での開発をしたことがある人。
React や Angular はやったことない。なので比較には Rails と Vue.js を出しがち</p>
<h2 id="この記事で書かないこと">この記事で書かないこと</h2>
<p>既に存在してしまっている ember-rails アプリケーションの保守をする人達向けの記事なので、
ember-rails を使って新規で Ember.js アプリを構築する、みたいなことは書きません。</p>
<p>それに今更 ember-rails で構築するのはよろしくないですし、
Rails で Ember.js やりたいなら <a href="https://github.com/thoughtbot/ember-cli-rails">ember-cli-rails</a> にしておいた方が良いですよ。</p>
<p>どうしても構築から知りたい人は
<a href="https://github.com/mugijiru/ember-rails-todo-app/compare/9f190efb6320e19a80768b0c6a37e1929e9c4146...b18270e90c694f14e0fac5df2cb9aadad41376c5">ember-rails-todo-app で ember-rails アプリを構築したあたりのコミット</a>
を見たりとかしたらなんとなくわかるかもだけどまああんまり要らないよね。</p>
<h2 id="ember-dot-js-と-ember-rails-の簡単な紹介">Ember.js と ember-rails の簡単な紹介</h2>
<h3 id="ember-dot-js-とは">Ember.js とは</h3>
<p><a href="https://emberjs.com/">Ember.js</a> はWebフロントエンドMVCフレームワークの1種。昔流行ったよね WebフロントエンドMVC。残念ながら最近はもう主流ではない。</p>
<p>Ruby on Rails の影響を受けてるようなので、
Rails エンジニアが取っ付きやすいフレームワークになっている。多分。</p>
<h3 id="ember-rails-とは">ember-rails とは</h3>
<p><a href="https://github.com/emberjs/ember-rails">ember-rails</a> は Ember.js をいい感じに Rails と連携してくれる素敵な Gem です。これを使うと Rails 上で動く Ember.js アプリケーションが簡単に作れる。</p>
<p>Ember.js 自体が <a href="https://rubygems.org/gems/ember-source/versions/2.18.1?locale=ja">ember-source</a> という Gem を提供してくれていたのでそれらのソースも依存関係で入って来てくれる便利なやつ。</p>
<p>だけどそういう蜜月も <a href="mailto:Ember.js@2.18">Ember.js@2.18</a> の頃までのお話なので今から新規で Rails の上で Ember.js を触りたい子は大人しく <a href="https://github.com/thoughtbot/ember-cli-rails">ember-cli-rails</a> を使いましょう。</p>
<h2 id="rails-側の設定">Rails 側の設定</h2>
<h3 id="gem-の-install">Gem の install</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">gem <span style="color:#e6db74">&#39;ember-rails&#39;</span>
gem <span style="color:#e6db74">&#39;active_model_serializers&#39;</span>, <span style="color:#e6db74">&#39;~&gt; 0.9.0&#39;</span>
</code></pre></div><p>多分このあたりを入れておけば良い。
active_model_serializers は
<a href="https://github.com/emberjs/ember-rails/blob/3ff45327d1320376715b365f0319192a35dc1d56/ember-rails.gemspec#L16">ember-rails の gemspec でバージョン指定がされてない</a> けど
Ember.js 側で使う active-model-adapter が 0.9 系対応なのでバージョンをこちらで固定している。</p>
<p>実は ember-rails-todo-app 1.x では
<a href="https://github.com/mugijiru/ember-rails-todo-app/blob/21241d30fe4f9987760bd18bc2341b1943de26fe/Gemfile#L39-L42">jquery-rails や ember-source も指定している</a> けど多分わざわざ指定しないでいい気もする。</p>
<h3 id="config-dot-handlebars-dot-template-root">config.handlebars.template_root</h3>
<p>ember-rails ではこれで指定されているフォルダが Ember.js の Template として利用される。デフォルト設定だと <code>app/assets/javascriptes/templates</code> が指定されている。</p>
<p>複数の Ember.js App が動くようになってる場合には
config/application.js あたりで複数設定されているはず。</p>
<p>もし新しくテンプレートを放り込む場所を増やしたかったらここを弄る必要あり</p>
<h2 id="ember-dot-js-の基礎">Ember.js の基礎</h2>
<h3 id="emberobject">EmberObject</h3>
<p>Ember.js では EmberObject というものが全体的に使われている。</p>
<p>こいつは Ember.js で使う Class 的なやつのベースとなる機能を提供する。例えば Computed Property や Observer がそれにあたる。</p>
<p>以下では EmberObject のよく使う機能について
Vue.js の props, data, computed, watch, methods あたりと比較しながら解説する。</p>
<h4 id="通常のプロパティ">通常のプロパティ</h4>
<p>Vue.js における data にあたるもの。</p>
<p>EmberObject は、JS の Object でもあるので、普通に JS Object のプロパティとして定義したら Vue.js の data 的に扱える。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">Ember</span>.Object({
  <span style="color:#a6e22e">width</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">200</span>,
  <span style="color:#a6e22e">height</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">200</span>
})
</code></pre></div><p>参照したり更新したりする時は</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;width&#39;</span>) <span style="color:#75715e">// 参照
</span><span style="color:#75715e"></span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;width&#39;</span>, <span style="color:#ae81ff">300</span>) <span style="color:#75715e">// 更新
</span></code></pre></div><p>のような書き方になります。正直だるい。</p>
<p>で、上で「Vue.js でいう data にあたるもの」と書いたが、
Vue.js でいう props と data 的な区別は特にないので、外から簡単に書き換えられる値でもある。</p>
<!-- raw HTML omitted -->
<ul>
<li>
<p>3系では</p>
<p>3系だと EmberObject は使わなくなって JS の Native Class なので</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>
<span style="color:#a6e22e">height</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>

<span style="color:#a6e22e">hoge</span>() {
  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">width</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">200</span>
}
</code></pre></div><p>みたいな感じに書ける。</p>
<p>また Vue.js でいう props 的なのは
<code>this.args</code> の中に閉じ込められるし、値が変に上書きされることもない。便利。</p>
</li>
</ul>
<h4 id="computed-property">Computed Property</h4>
<p>Vue.js の Computed Property のように通常のプロパティから新しい値を導出してプロパティとして使えるようにするやつ。
Vue.js のそれと同様にキャッシュされるしリアルタイムに反映される。</p>
<p>書き方は Vue.js よりちょっとだるくて</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">fullName</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">computed</span>(<span style="color:#e6db74">&#39;firstName&#39;</span>, <span style="color:#e6db74">&#39;lastname&#39;</span>, <span style="color:#66d9ef">function</span> () {
  <span style="color:#66d9ef">return</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;firstName&#39;</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;lastName&#39;</span>)<span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>
})
</code></pre></div><p>みたいな感じ。
Vue.js だと</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">computed</span><span style="color:#f92672">:</span> {
  <span style="color:#a6e22e">fullName</span>() { <span style="color:#66d9ef">return</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">firstName</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">lastName</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span> }
}
</code></pre></div><p>で済むのになって思うことはある。</p>
<p>ただ、別名でも取れるようにしたり(alias)とか、全部足したり(sum)とかのよくあるやつは関数が定義済なので a と b を足した c が欲しい場合は</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">c</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">computed</span>.<span style="color:#a6e22e">sum</span>(<span style="color:#e6db74">&#39;a&#39;</span>, <span style="color:#e6db74">&#39;b&#39;</span>)
</code></pre></div><p>とか書けるのでそれは便利かもしれない。
<a href="https://api.emberjs.com/ember/2.18/modules/@ember%2Fobject#functions-computed">https://api.emberjs.com/ember/2.18/modules/@ember%2Fobject#functions-computed</a></p>
<!-- raw HTML omitted -->
<ul>
<li>
<p>3系では</p>
<p>3.15 以降だと
<a href="https://guides.emberjs.com/release/upgrading/current-edition/tracked-properties/">Tracked Property</a> というのを使うのが推奨されている。まだ使えるけどね Computed も。</p>
<p>`@tracked` というデコレータが付与されたプロパティは値の変更が検知されるようになる。</p>
<p>また 3.15 以降では JS の Native Class になるので
Tracked Property と Getter を使って</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#960050;background-color:#1e0010">@</span><span style="color:#a6e22e">tracked</span> <span style="color:#a6e22e">firstName</span>
<span style="color:#960050;background-color:#1e0010">@</span><span style="color:#a6e22e">tracked</span> <span style="color:#a6e22e">lastName</span>
<span style="color:#a6e22e">get</span> <span style="color:#a6e22e">fullName</span>() { <span style="color:#66d9ef">return</span> <span style="color:#e6db74">`</span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">firstName</span><span style="color:#e6db74">}</span><span style="color:#e6db74"> </span><span style="color:#e6db74">${</span><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">lastName</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span> }
</code></pre></div><p>みたいに書ける。便利。</p>
</li>
</ul>
<h4 id="observer">Observer</h4>
<p>Vue.js の watch のようなやつ。値を監視して、変更があったら関数が実行されるやつ。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Observer</span>(<span style="color:#e6db74">&#39;hoge&#39;</span>, <span style="color:#66d9ef">function</span> () {
  <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;&#34;hoge&#34; is changed!&#39;</span>)
})
</code></pre></div><p>みたいな感じで使う。</p>
<!-- raw HTML omitted -->
<ul>
<li>
<p>3系では</p>
<p>Observer もまだ使えるけど、
Tracked Property を使ってなんとかするのが推奨されている。</p>
<p>上の例みたいにログだけ残したい時どうしたらいいんだろうね。</p>
</li>
</ul>
<h4 id="methods">Methods</h4>
<p>これは普通に関数を書けばいいだけ。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">hoge</span> () {
  <span style="color:#75715e">// なんらかの処理
</span><span style="color:#75715e"></span>}
</code></pre></div><p><code>methods</code> とかいうところに書かなくていい分 Vue.js より楽ではという気もする。</p>
<h3 id="handlebars">Handlebars</h3>
<p>Ember.js で採用されているテンプレートエンジンです。変数の呼び出しに <code>{{foo}}</code> みたいな感じにするやつです。</p>
<p>Ember.js ではコンポーネントを呼び出す時にも
<code>{{my-component}}</code> みたいに使います。</p>
<p>上記の書き方はインラインコンポーネントの呼び出し方でブロックコンポーネントは</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hbs" data-lang="hbs"><span style="color:#75715e">{{</span><span style="color:#a6e22e">#my-block-component</span><span style="color:#75715e">}}</span>
  ...
<span style="color:#75715e">{{</span><span style="color:#a6e22e">/my-block-component</span><span style="color:#75715e">}}</span>
</code></pre></div><p>みたいな感じになります。</p>
<p>変数を渡す時は</p>
<p><code>{{my-component hoge=fuga}}</code></p>
<p>みたいな感じ。
Vue.js と比べて見た目以外はそんなに変わらないかなって。</p>
<h3 id="ember-dot-js-のフォルダ-ファイル構成">Ember.js のフォルダ・ファイル構成</h3>
<p>ここでは ember-rails を前提として話します。</p>
<table>
<thead>
<tr>
<th>フォルダ・ファイル</th>
<th>概要</th>
</tr>
</thead>
<tbody>
<tr>
<td>adapters</td>
<td>サーバとの通信周りを設定するコードを置く場所</td>
</tr>
<tr>
<td>components</td>
<td>コンポーネント定義の JS ファイルを入れるところ</td>
</tr>
<tr>
<td>controllers</td>
<td>Rails でもお馴染みの Controller</td>
</tr>
<tr>
<td>initializers</td>
<td>初期化用コードを入れるところ</td>
</tr>
<tr>
<td>instance-initializers</td>
<td>アプリ起動直後の初期化コードを入れるところ</td>
</tr>
<tr>
<td>helpers</td>
<td>Rails でもお馴染みに Helper</td>
</tr>
<tr>
<td>mixins</td>
<td>Rails だと Concern にあたるものを置くところ</td>
</tr>
<tr>
<td>models</td>
<td>Rails でもお馴染みの Model</td>
</tr>
<tr>
<td>routes</td>
<td>Controller 実行前に Model などを取得したりするところ</td>
</tr>
<tr>
<td>routor.js</td>
<td>Routing を設定するところ。Vue.js の Router と似てるかも?</td>
</tr>
<tr>
<td>serializers</td>
<td>サーバと通信する前に形式変換するコードを置く場所</td>
</tr>
<tr>
<td>templates</td>
<td>Handlebars という HTML テンプレートを置く場所。Rails でいう views</td>
</tr>
<tr>
<td>views</td>
<td>使わない。Ember.js@1系の名残りかと</td>
</tr>
</tbody>
</table>
<h2 id="ember-dot-js-アプリにアクセスした時の処理の流れ">Ember.js アプリにアクセスした時の処理の流れ</h2>
<p>ざっくり書くと</p>
<ol>
<li>EMBER_ROOT/application.js.es6 のコード実行</li>
<li>EMBER_ROOT/{APP_NAME}.module.es6</li>
<li>initializer 実行</li>
<li>instance-initializer 実行</li>
<li>routor/routes の実行
<ol>
<li>beforeModel()</li>
<li>model()</li>
<li>afterModel()</li>
</ol>
</li>
<li>Controller の実行</li>
<li>templates のレンダリング</li>
</ol>
<p>という流れ。これは <a href="mailto:Ember.js@3.26">Ember.js@3.26</a> でも大体似てる。1,2 あたりがちょっと違うけど。</p>
<h3 id="ember-root-application-dot-js-dot-es6-のコード実行">EMBER_ROOT/application.js.es6 のコード実行</h3>
<p>単にこのあたりで色々なものを require したり
Ember.js App を呼び出したりしているのでここからスタートだよねってだけ。</p>
<p>Sprockets で require した順に実行されるので、以下の順序は大事っぽい。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//= require ./environment
</span><span style="color:#75715e">//= require ember
</span><span style="color:#75715e">//= require ember-data
</span><span style="color:#75715e">//= require ember-rails/application
</span><span style="color:#75715e">//= require active-model-adapter
</span></code></pre></div><h3 id="ember-root-app-name-dot-module-dot-es6">EMBER_ROOT/{APP_NAME}.module.es6</h3>
<p>require でアプリケーション本体の色々なコードを読み込んだり設定を読み込んだりしている部分。</p>
<p>require される対象は Class みたいなものなのであまり読込順は関係なさそう。</p>
<p>module 化されてない場合は
<code>require router</code> と <code>require_self</code> は最後じゃないとまずそうだけども。</p>
<h3 id="initializer-実行">initializer 実行</h3>
<p>Ember.js App の起動時に実行される処理。</p>
<p>initializers フォルダに配置されていて</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">initializer</span>(<span style="color:#a6e22e">application</span>) {
  ...
}
</code></pre></div><p>みたいに書かれているファイルが実行される。アプリケーション初期化用のコード(ex: Websocket の初期化)とか
DI で組込みたい service の injection のコードを入れておくと良いっぽい。</p>
<p>initializer が複数ある場合の実行順はどうなってるかわからんけど
<a href="https://guides.emberjs.com/v2.18.0/applications/initializers/#toc%5Fspecifying-initializer-order">「これより先に」「これより後で」みたいな指定</a> はできる。</p>
<h3 id="instance-initializer-実行">instance-initializer 実行</h3>
<p>Ember.js App が起動直後に動く処理。</p>
<p>instance-initializers フォルダに配置されていて</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">export</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">instanceInitializer</span>(<span style="color:#a6e22e">application</span>) {
  ...
}
</code></pre></div><p>みたいに書かれているファイルが実行される。インスタンス化・起動後に動くので、
A/B テストみたいに見ている人毎に違う条件を埋め込むとかしたい時に使うのが良いらしい。</p>
<h3 id="routor-routes-の実行">routor/routes の実行</h3>
<p>初期化処理が済んだら routor が実行される。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Router</span>.<span style="color:#a6e22e">map</span>(<span style="color:#66d9ef">function</span> () {
  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">route</span>(<span style="color:#e6db74">&#39;root&#39;</span>, { <span style="color:#a6e22e">path</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;/&#39;</span> })
  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">route</span>(<span style="color:#e6db74">&#39;posts&#39;</span>, { <span style="color:#a6e22e">path</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;/posts&#39;</span> }, <span style="color:#66d9ef">function</span> () {
    <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">route</span>(<span style="color:#e6db74">&#39;new&#39;</span>)
  })
})
</code></pre></div><p>みたいに書かれていて、
path にマッチした route が実行されるようになっている。
Vue Router なんかもそういう作りだよね。</p>
<p>Ember.js の Router は Vue Router とは違って直接コンポーネントが呼び出されるのではなく
routes 以下にある Route が呼び出されるようになっている。読まれるファイルは <code>this.route</code> の第一引数にマッチしたやつですね。</p>
<p>上の例では <code>/</code> というところにアクセスした場合には
<code>routes/root.module.es6</code> が実行されるという仕組み。</p>
<h4 id="beforemodel">beforeModel()</h4>
<p><code>model()</code> が実行されるより前に動く処理。ログイン状態チェックしてログインしてなければ別のルートに飛ばす、みたいに、あまりアプリケーションのModelと関係ない処理をする時に使えば良さそう。</p>
<p>正直あまり出番ない。</p>
<h4 id="model">model()</h4>
<p>その画面で使う Model を取得する処理。ここで return された値が Controller や Template で model としてアクセスできるようになる。</p>
<p>また Promise を返した場合は、それが解決された時の戻値を model として使えるようにしてくれる。</p>
<p>store.findAll などは Promise を返すが、
Promise の解決結果を Model とする挙動のおかげで</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">model</span>() {
  <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">findAll</span>(<span style="color:#e6db74">&#39;posts&#39;</span>)
}
</code></pre></div><p>とした場合に Controller などでは <code>this.get('model')</code> で <code>posts</code> が取得できるようになっている。</p>
<!-- raw HTML omitted -->
<ul>
<li>
<p>複数の model</p>
<p>1画面で複数の Model を使いたい場合には</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">return</span> {
  <span style="color:#a6e22e">foo</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">hoge</span>,
  <span style="color:#a6e22e">bar</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">fuga</span>
}
</code></pre></div><p>みたいに書けば良い。</p>
<p>Controller とかで <code>this.get('model.foo')</code> みたいにして扱える。</p>
</li>
</ul>
<h4 id="aftermodel--model">afterModel(model)</h4>
<p>model を取得した後で、画面を表示する前にやっておきたい処理を書くところ。第一引数で model が渡されてくるので、
model の状態を見て別の route に飛ばすとか、controller に値を放り込むとかの処理ができる。</p>
<h4 id="入れ子になった-route">入れ子になった Route</h4>
<p>上の例にも書いたけど Route はネストさせることもできる。</p>
<p>例えば <code>/posts/new</code> という route の場合は画面表示的には <code>/posts</code> というレイアウトの中に登録フォームを表示する、みたいな時に使う</p>
<p>このあたりは <a href="https://router.vuejs.org/ja/guide/essentials/nested-routes.html">Vue Router の Nested Route</a> と似てるよね。どっちが先か知らんけど。</p>
<p>で、そうやってネストさせている場合は、一番外側の Route から順に実行されるような感じになっている。</p>
<p>つまり上記の例だと <code>posts.module.es6</code> の <code>model()</code> なんかが実行された後に
<code>/posts/new.module.es6</code> の内容が実行される。</p>
<p>上位の path の route が既に実行されているので下位の path で上位の model 情報を使いたい場合、上記の例だと <code>/posts/new</code> で <code>posts</code> の model 情報を使いたい場合には
<a href="https://api.emberjs.com/ember/3.26/classes/Route/methods/modelFor?anchor=modelFor">modelFor()</a> という関数で <code>const posts = modelFor('posts')</code> みたいに取得できる。</p>
<h3 id="controller-の実行">Controller の実行</h3>
<p>Route での処理が済んだら Controller の処理が実行される。というか Route から <a href="https://api.emberjs.com/ember/release/classes/Route/methods/setupController?anchor=setupController">setupController</a> というので呼び出される。</p>
<p>呼び出される Controller は route と同じように path にマッチしたやつになる。つまり <code>/posts</code> という path なら
<code>controllers/posts.module.es6</code> で定義している Controller が呼び出される。</p>
<p>Controller では Template で使う値を設定したり Action を定義したりする。</p>
<h3 id="template-のレンダリング">Template のレンダリング</h3>
<p>Controller の処理が済んだら Template のレンダリングに入る。呼び出される Template は Controller の path と一致する。</p>
<p>つまり <code>/posts</code> という path なら <code>templates/posts.hbs</code> が呼び出される。</p>
<p>Template は Handlebars 形式で記述する。</p>
<h2 id="ember-dot-js-の-component">Ember.js の Component</h2>
<p>Ember.js の開発で一番弄る機会の多いのが Component です。</p>
<p>components フォルダに JS のロジックが書かれたファイルが置かれ、対応するテンプレートは、
templates/components フォルダに Handlebars で記述した hbs ファイルとなる。</p>
<p>JS のロジックが書かれる Component は <a href="#emberobject">EmberObject</a> がベースなのでそれらの機能が使える。さらに Component 用の機能が追加されている。</p>
<h3 id="値の渡し方">値の渡し方</h3>
<p><a href="#handlebars">Handlebars</a> の方でも書いたけど
<code>{{my-component hoge=fuga}}</code> というように書けば良いです。</p>
<p>そうすると MyComponent 内で
<code>this.get('hoge')</code> で値が取得できるようになり、そのテンプレート内で <code>{{hoge}}</code> で参照できるようになります。</p>
<h3 id="component-のタグのカスタマイズ">Component のタグのカスタマイズ</h3>
<p>古い Ember.js では Component を呼び出すと
Wrapper となる div が挿入されてその中に Template で書いた記述が入るようになっています。</p>
<h4 id="tagname">tagName</h4>
<p>Wrapper のタグを指定する。
ul の下にリストアイテムをコンポーネントとして配置したい時は
<code>tagName: 'li'</code> とかやったりする。</p>
<h4 id="classnames">classNames</h4>
<p>Wrapper タグに付与する class のリスト。こちらは固定の値になる。</p>
<h4 id="classnamebindings">classNameBindings</h4>
<p>Wrapper タグに、条件に応じて付与する class のリスト的な。
Vue.js の class の Binding に似ていて</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">isActive</span><span style="color:#f92672">:</span> <span style="color:#66d9ef">false</span>
<span style="color:#a6e22e">classNameBindings</span><span style="color:#f92672">:</span> [<span style="color:#e6db74">&#39;isActive:active&#39;</span>]
</code></pre></div><p>みたいに書くと isActive が true の時に `active` というクラスが付与される。</p>
<p>Vue.js だと</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span> <span style="color:#a6e22e">:class</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;{ active: isActive }&#34;</span>&gt;
</code></pre></div><p>となるので書き方が逆だけどね。</p>
<h4 id="3系では">3系では</h4>
<p>3.15 以降では Vue のコンポーネント同様に余計な Wrapper が入らなくなります。なので tagName, classNames, classNameBindings とは全ておさらばとなります。</p>
<h3 id="actions">Actions</h3>
<p>テンプレート内のボタンを叩いた時に動かしたい関数なんかを記述するところ。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">actions</span><span style="color:#f92672">:</span> {
  <span style="color:#a6e22e">hoge</span>(){
    <span style="color:#75715e">// なんか処理を書く
</span><span style="color:#75715e"></span>  }
}
</code></pre></div><p>みたいな感じで書く。</p>
<h4 id="template-で直接使う場合">Template で直接使う場合</h4>
<p>Template から直接アクションを呼びたい時は</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hbs" data-lang="hbs">&lt;button type=&#34;}button&#34; <span style="color:#75715e">{{</span>action <span style="color:#e6db74">&#34;hoge&#34;</span><span style="color:#75715e">}}</span>&gt;
</code></pre></div><p>みたいに書くと、そのボタンを押した時に hoge アクションが動く。
<a href="https://guides.emberjs.com/v2.18.0/components/triggering-changes-with-actions/#toc%5Fdesigning-the-child-component">https://guides.emberjs.com/v2.18.0/components/triggering-changes-with-actions/#toc%5Fdesigning-the-child-component</a></p>
<h4 id="下位のコンポーネントに渡す場合">下位のコンポーネントに渡す場合</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hbs" data-lang="hbs"><span style="color:#75715e">{{</span>child-component <span style="color:#a6e22e">foo</span><span style="color:#f92672">=</span><span style="color:#960050;background-color:#1e0010">(</span>action <span style="color:#e6db74">&#34;hoge&#34;</span><span style="color:#960050;background-color:#1e0010">)</span><span style="color:#75715e">}}</span>
</code></pre></div><p>というように書いて渡すと、child-component では
foo というメソッドが定義されていて、その実体は親コンポーネントで定義した hoge アクション、という状態になる</p>
<p>なので child-component 内のアクションを</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">actions: {
  fuga() {
    this.get('foo')()
  }
}
</code></pre><p>というように書いて child-component のテンプレートで fuga アクションを実行したら親コンポーネントの hoge アクションが実行される、みたいな挙動になる</p>
<p>参考: <a href="https://guides.emberjs.com/v2.18.0/components/triggering-changes-with-actions/#toc%5Fpassing-the-action-to-the-component">https://guides.emberjs.com/v2.18.0/components/triggering-changes-with-actions/#toc%5Fpassing-the-action-to-the-component</a></p>
<h3 id="lifecycle-hooks">LifeCycle Hooks</h3>
<p><a href="https://guides.emberjs.com/v2.18.0/components/the-component-lifecycle/">なんかめっちゃ Hook が用意されている。</a></p>
<h4 id="初期化時">初期化時</h4>
<ol>
<li>init</li>
<li>didReceiveAttrs</li>
<li>willRender</li>
<li>didInsertElement</li>
<li>didRender</li>
</ol>
<p>init と didRender あたりは割と使うかな?
didRender は再描画でも使うので両方に適用したい時に使う感じ。</p>
<p>didInsertElement もたまに使う気がする。</p>
<h4 id="再描画時">再描画時</h4>
<ol>
<li>didUpdateAttrs</li>
<li>didReceiveAttrs</li>
<li>willUpdate</li>
<li>willRender</li>
<li>didUpdate</li>
<li>didRender</li>
</ol>
<p>didRender は割と使う。
didUpdate は初期化時には動かしたくないけど didRender 的に使いたい時に使う感じ。他はあまり使った記憶なし。</p>
<h4 id="破壊時">破壊時</h4>
<ol>
<li>willDestroyElement</li>
<li>willClearRender</li>
<li>disDestroyElement</li>
</ol>
<p>このあたりはあまり使った記憶がない</p>
<h4 id="hook-の使い方">Hook の使い方</h4>
<p>使い方は2種類あって</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">init</span> () {
  <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">_super</span>(...<span style="color:#a6e22e">arguments</span>) <span style="color:#75715e">// 通常の処理をさせておく
</span><span style="color:#75715e"></span>  <span style="color:#75715e">// ここに特別な処理を書く
</span><span style="color:#75715e"></span>}
</code></pre></div><p>というように hook 関数を Override する方法と</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">hoge</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">on</span>(<span style="color:#e6db74">&#39;init&#39;</span>, <span style="color:#a6e22e">functoin</span> () {
  <span style="color:#75715e">// ここに特別な処理を書く
</span><span style="color:#75715e"></span>})
</code></pre></div><p>というように <a href="https://api.emberjs.com/ember/2.18/functions/@ember%2Fobject%2Fevented/on">on メソッド</a> を使う方法がある。</p>
<p>Rails の Model で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">after_save <span style="color:#66d9ef">do</span>
  <span style="color:#75715e"># ここに特別な処理を書く</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><p>と書くか</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">after_save <span style="color:#e6db74">:hoge</span>

<span style="color:#66d9ef">private</span>
<span style="color:#66d9ef">def</span> <span style="color:#a6e22e">hoge</span>
  <span style="color:#75715e"># ここに特別な処理を書く</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><p>と書くかの違いみたいなものですね。</p>
<p>私は後者の方が好み。間違えて二重定義したりしなさそうだし <code>this._super(...arguments)</code> を呼び忘れもしなさそうなので。</p>
<p>まあ前者の方が <code>this._super</code> の呼び出しタイミングをズラせる自由さはあるけどね。</p>
<h3 id="block-component">Block Component</h3>
<p><a href="https://guides.emberjs.com/v2.18.0/components/block-params/">Block Component</a> では</p>
<p>my-component のテンプレートを</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hbs" data-lang="hbs">&lt;div&gt;
  <span style="color:#75715e">{{</span>yield<span style="color:#75715e">}}</span>
  ↑親から来たやつ↑
&lt;/div&gt;
</code></pre></div><p>みたいに書いてる状態で親から</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-hbs" data-lang="hbs"><span style="color:#75715e">{{</span><span style="color:#a6e22e">#my-component</span><span style="color:#75715e">}}</span>
  hogehoge
<span style="color:#75715e">{{</span><span style="color:#a6e22e">/my-component</span><span style="color:#75715e">}}</span>
</code></pre></div><p>みたいに呼び出すと</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">&lt;<span style="color:#f92672">div</span>&gt;
  hogehoge
  ↑親から来たやつ↑
&lt;/<span style="color:#f92672">div</span>&gt;
</code></pre></div><p>という感じになるやつ。</p>
<p>Rails のテンプレートの yield と似てる気がするよね。あと Vue.js の slot にも似てる気がするよね。複数 Slot みたいなことはできなさそうだけども。</p>
<p>本当はもうちょっと複雑なこともできるんだけど入門記事だしそこまで書くのはだるいので割愛。というか <a href="#block-component">Block Component</a> のリンク先読んで。</p>
<h3 id="フォルダ階層分け">フォルダ階層分け</h3>
<p>最新の Ember.js だと素直にいけるのに ember-rails かつ古い書き方だと苦労する問題の1つ。</p>
<p><a href="/posts/ember-rails-component-in-subfolder/">ember-rails でコンポーネントをサブフォルダに配置する</a> に全部書いているけどざっくり書くと
template で <code>{{hoge/fuga}}</code> というように呼び出した場合に
GlobalResolver では Hoge という名前空間の Fuga というコンポーネントを探しに行くようになっている。</p>
<p>つまりコンポーネントを
<code>App.HogeFugaComponent</code> ではなく
<code>Hoge.FugaComponent</code> として定義する必要がある。そして名前空間 Hoge を <code>window.Hoge = Ember.Namespace.create()</code> みたいにして用意しておく必要もある。だるい。</p>
<p>試したことはないけど、さらに1階層増やすとしたら、また同じようにすることになりそうでさらにだるそう。</p>
<h3 id="3系でのテンプレートの配置">3系でのテンプレートの配置</h3>
<p>3.15 以降では components に hbs を置けるようになるよ。
JS ファイルと場所が近くて便利。</p>
<p>さらに <a href="https://cli.emberjs.com/release/advanced-use/project-layouts/#podslayout">Pods layout</a> という構成が使えて機能群毎にまとめるのが便利になる。</p>
<p>Pods layout はコンポーネントだけではなくて
model, controller とかの構成もフォルダに閉じ込められるので多分便利。まだ試したことないけど。</p>
<h2 id="model--ember-data">Model(Ember Data)</h2>
<p>大体 Route で Controller にセットされる子。
Rails の Model に似せて作られている。</p>
<p><a href="#emberobject">EmberObject</a> ベースで作られているので、当然そのあたりの機能も使える。
computed とかね。</p>
<h3 id="store-の操作">Store の操作</h3>
<p>データを取得したりまとめて消したりする際に使う。
Rails でいうと ActiveRecord モデルの Class Method を叩く感じ。</p>
<p>参考: <a href="https://api.emberjs.com/ember-data/2.18/classes/DS.Store">https://api.emberjs.com/ember-data/2.18/classes/DS.Store</a></p>
<p>以下ではよく使うものをピックアップして簡単な説明をしています。</p>
<h4 id="findall-peekall">findAll/peekAll</h4>
<p>どちらも対象のレコードを全件取得するメソッド。</p>
<p>違いは peekAll の方はフロントエンドの Store 内の検索に留まり、
findAll はデータがなければサーバにまで取りに行く。</p>
<p><code>store.findAll('user')</code> みたいに使う。</p>
<h4 id="findrecord-peekrecord">findRecord/peekRecord</h4>
<p>findAll/peekAll のレコード単体版。違いも同じ。</p>
<p><code>store.findRecord('user', 1)</code> とすると
id が 1 の User を探しに行く。</p>
<h4 id="query-queryrecord">query/queryRecord</h4>
<p>findAll ではクエリパラメータを付けられないので検索画面などは作れない。そんな場合は query を使うとパラメータを付与してリクエストを投げられる。それの単体レコード版が queryRecord となる。</p>
<h4 id="create">create</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">create</span>(<span style="color:#e6db74">&#39;user&#39;</span>, { <span style="color:#a6e22e">firstName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Taro&#39;</span>, <span style="color:#a6e22e">lastName</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;Yamada&#39;</span> })
</code></pre></div><p>みたいな感じでデータを作成できる。</p>
<h4 id="push-pushpayload">push/pushPayload</h4>
<p>push は Object から Store にレコードを作る処理。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">push</span>({
  {
    <span style="color:#e6db74">&#34;user&#34;</span><span style="color:#f92672">:</span> {
      <span style="color:#e6db74">&#34;id&#34;</span><span style="color:#f92672">:</span> <span style="color:#ae81ff">1</span>,
      <span style="color:#e6db74">&#34;first_name&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Taro&#34;</span>,
      <span style="color:#e6db74">&#34;last_name&#34;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#34;Yamada&#34;</span>
    }
  }
});
</code></pre></div><p>とかやるとレコードが Store 上に作られる。無理矢理サーバから持って来たデータを Store に突っ込む時に使う。</p>
<p>pushPayload はそれの便利版で</p>
<pre tabindex="0"><code class="language-nil" data-lang="nil">{
  &quot;users&quot;: [{
    &quot;id&quot;: 1,
    &quot;first_name&quot;: &quot;Taro&quot;,
    &quot;last_name&quot;: &quot;Yamada&quot;
  }],
  &quot;posts&quot;: [{
    &quot;id&quot;: 1,
    &quot;title&quot;: &quot;Awesome Blog Post&quot;,
    &quot;body&quot;: &quot;...&quot;
  }]
}
</code></pre><p>みたいなのを受け取ると users と posts をそれぞれ複数レコード登録してくれる。</p>
<!-- raw HTML omitted -->
<ul>
<li>
<p>注意</p>
<p>push/pushPayload の例で書いている JSON は ember-rails で使う active-model-adapter 前提で書いています。デフォルトだと JSON:API 形式を受け付けるようになっています。</p>
</li>
</ul>
<h3 id="model-の操作">Model の操作</h3>
<p>peekRecord などで取得した Model に対しての操作。更新したり削除したりはこれで行う。</p>
<p>参考: <a href="https://api.emberjs.com/ember-data/2.18/classes/DS.Model">https://api.emberjs.com/ember-data/2.18/classes/DS.Model</a></p>
<p>以下ではよく使うものをピックアップして簡単な説明をしています。</p>
<h4 id="save">save</h4>
<p>取得したデータは set で値を書き換えて save で保存できる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">findRecord</span>(<span style="color:#e6db74">&#39;user&#39;</span>, <span style="color:#ae81ff">1</span>)
<span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">set</span>(<span style="color:#e6db74">&#39;firstName&#39;</span>, <span style="color:#e6db74">&#39;Taro&#39;</span>)
<span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">save</span>()
</code></pre></div><p>save は Promise を返すので、保存後に何か処理をしたければ</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">save</span>().<span style="color:#a6e22e">then</span>((<span style="color:#a6e22e">savedUser</span>) =&gt; { <span style="color:#75715e">/* 保存成功時の処理 */</span> }, (<span style="color:#a6e22e">error</span>) =&gt; { <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#a6e22e">error</span>) })
</code></pre></div><p>みたいなことができる。</p>
<h4 id="destroyrecord">destroyRecord</h4>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">user</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">this</span>.<span style="color:#a6e22e">store</span>.<span style="color:#a6e22e">findRecord</span>(<span style="color:#e6db74">&#39;user&#39;</span>, <span style="color:#ae81ff">1</span>)
<span style="color:#a6e22e">user</span>.<span style="color:#a6e22e">destroyRecord</span>()
</code></pre></div><p>みたいな感じで削除できる。</p>
<p>save と同様に callback も受け付けている。</p>
<h4 id="unloadrecord">unloadRecord</h4>
<p>unloadRecord はサーバの実データは消しに行かずフロントエンドの Store から捨てるだけ。</p>
<h4 id="reload">reload</h4>
<p>サーバからデータを読み直す。</p>
<h3 id="model-の定義">Model の定義</h3>
<h4 id="attr">attr</h4>
<p><code>firstName: DS.attr()</code> みたいに定義するやつ。
API から取って来た値をそのまま放り込む感じである。</p>
<h4 id="belongsto">belongsTo</h4>
<p><code>user: DS.belongsTo('user')</code>
って書いたら <code>this.get('user')</code> と指定した時に userId から適切なデータを探してくる感じ。
Rails と似てますね。</p>
<p><code>user: DS.belongsTo('user', { async: false })</code>
としておけばサーバには探しに行かなくなるっぽい。対応するエンドポイントを用意してない時なんかはそうしておいた方が良い。</p>
<h4 id="hasmany">hasMany</h4>
<p><code>posts: DS.hasMany('posts')</code>
って書いたら関連する posts を <code>this.get('posts')</code> で取ってこれるようになる。
Rails と似てますね。</p>
<p><code>posts: DS.hasMany('posts, { async: false })</code>
としておけばサーバには探しに行かなくなる。
hasMany の関連先のレコードが多い時なんかはまとめて取らない方がいいのでこの方が便利。</p>
<p>その場合、別で取得する方法を考えた方が良い。</p>
<h4 id="3系では">3系では</h4>
<ul>
<li><code>@attr firstName</code></li>
<li><code>@belongsTo('user') user</code></li>
<li><code>@hasMany('post') posts</code></li>
</ul>
<p>みたいにデコレータで定義する。
option の async などをつける場合は <code>@belongsTo('user', { async: false }) user</code> みたいな感じ。</p>
<h2 id="adapter-serializer">Adapter/Serializer</h2>
<p>どっちも普段あまり触らないところなので簡単に。</p>
<p>Adapter がサーバへのアクセス方法を色々設定するところ。どのホストにアクセスするかとか、どの PATH にアクセスするかとか
HTTP Header で何か渡すならそれを設定するとか。</p>
<p>Serializer がデータ形式を変換するところ。
JS 側では camelCase のキーを、サーバに渡す時には dashlize したり逆に dashlize されてるキーを貰う時は camelize したり。</p>
<h2 id="controller">Controller</h2>
<p>Rails の Controller とは結構違う役割の子。
Rails ベースで考えると混乱する。</p>
<p>Route と関連する特別な Component みたいな扱いなので
Component の扱いをベースに触った方が良い。</p>
<p>Component に近い立場なので各種 hook だったり actions だったりが使える。</p>
<p>tagName や className などは使えるか調べたこともないのでわからない。</p>
<p>コンポーネントツリーの根っこの Component みたいな感じなので大分カオスになりがちなやつ。</p>
<p>正直そのカオスをどう解消したらいいかまだ分かってないが、恐らくここではページ全体に関するロジックだけを詰めておき、
Component に直接 Service Object を Inject して、その Service Object にロジックを詰めておいた方が良いんじゃないかなと考えている。どこかで試してみたい。</p>
<h2 id="service-object">Service Object</h2>
<p>各 Component や Controller に Inject して使う便利な Object です。
Vue.js でいうと Vuex ぐらいどこでも使えて便利。つまり無闇にあちらこちらに Inject するとそれはそれでカオスになる系。</p>
<p>アプリケーション全体で使うような、例えば EC サイトだと shopping-cart を Service で実装しておいて各 Component で Inject する、みたいな感じで使う。</p>
<h2 id="色々な罠達">色々な罠達</h2>
<h3 id="ember-dot-js-の-guide">Ember.js の Guide</h3>
<p>ember-rails だと <a href="mailto:Ember.js@2.18">Ember.js@2.18</a> までなので
<a href="https://guides.emberjs.com/v2.18.0/">https://guides.emberjs.com/v2.18.0/</a>
などの古いバージョンのガイド読みましょう。</p>
<p>っていうか古いバージョンのも全部残っててありがたいよね。</p>
<p>ただ ember-rails でも古い書き方をしていると
import とか使えないのでそのあたりは読みにくいと思う。
import とかを使ってないのは 1.10 ぐらいの書き方だから……。</p>
<h3 id="active-model-serializers-という-gem-の-0-dot-10-系で動きません">active_model_serializers という Gem の 0.10 系で動きません&gt;&lt;</h3>
<p>ember-rails では active_model_adapter というのを Ember.js 側で使っています。そしてそれに適合する active_model_serializers gem は 0.9系となっています。というわけで 0.9 系を使いましょう。</p>
<h3 id="コンポーネント呼び出し階層が深いので-controller-の-action-を叩くのがしんどいです">コンポーネント呼び出し階層が深いので Controller の Action を叩くのがしんどいです</h3>
<p>その Action を Controller じゃなくて Service に移動して
Component に Service を Inject して使うようにしたら良いかもしれません。</p>
<p>Vue.js でいうと Vuex をあちらこちらから叩くとカオスになるように、
Service の Inject もやりすぎるとそれはそれでカオスになりそう。</p>
<h3 id="mixins-に色々置いて共通化ウェーイ">mixins に色々置いて共通化ウェーイ</h3>
<p>それあなた Rails でも Concerns に置いて後々苦労したりしませんでしたか?
あんまり Mixin に頼るとつらいので Service に逃がすなど検討しましょう</p>
<h3 id="ember-コマンドを使いたい">ember コマンドを使いたい</h3>
<p>ember-cli-rails に乗り換えましょう。
<a href="/posts/migrate-ember-rails-to-ember-cli-rails/">ember-rails から ember-cli-rails へ</a> でその方法書いてるので参考にどうぞ。</p>
<h3 id="addon-を入れたい-便利そう">Addon を入れたい! 便利そう!</h3>
<p>ember-rails では無理です。
ember-cli-rails に乗り換えましょう。</p>
<h3 id="webpack-使えないの">Webpack 使えないの?</h3>
<p>ember-rails なら諦めましょう。そうじゃない場合も諦めた方がいいです。</p>
<p><a href="https://github.com/embroider-build/embroider">Embroider</a> というプロジェクトで Webpack とか Rollup とかと連携できるように頑張ってるみたいですがまだ v1 がリリースされてないのでプロダクションで使うには罠がまだまだ多そうです。</p>
<h3 id="ember-dot-js-の単体テストを書きたい">Ember.js の単体テストを書きたい……!</h3>
<p>ember-rails でしたら諦めてください。</p>
<p>ember-cli なら QUnit または Mocha あたりでテストが書けるので
ember-cli-rails に乗り換えましょう。</p>
<p>Ember.js 自体に黒魔術が多いようで Jest ではテストが書けませんので Jest 派はお疲れ様でした</p>
<h3 id="css-も-ember-dot-js-内で書きたい">CSS も Ember.js 内で書きたい!</h3>
<p>ember-rails なら諦めて <code>RAILS_ROOT/app/assets/stylesheets</code> あたりで書きましょう。おつかれさまでした。</p>
<p>ember-cli を使っていたら <code>EMBER_ROOT/app/styles/</code> 以下に置けるらしいよ。
<a href="https://cli.emberjs.com/release/advanced-use/stylesheets/">https://cli.emberjs.com/release/advanced-use/stylesheets/</a></p>
<h3 id="resolver-のソースってどれ">Resolver のソースってどれ?</h3>
<p>ember-rails をお使いで、かつ古い書き方をしているみなさんは
ember-source の中にある GlobalResolver をお読み下さい。以上。</p>
<p>ember-cli で Ember.js アプリを構築している先進的な皆様は
Ember.js の中にある GlobalResolver ではなくて ember-resolver という Addon を見ましょう。ただそいつはそいつで GlobalResolver を継承しているので結局 GlobalResolver のソースも読まないといけないという罠がある。</p>
<p>まあ v4 あたりでは継承やめるって話あるけどね</p>
<h2 id="最後に">最後に</h2>
<p>ember-rails のまま保守し続けるよりは
ember-cli-rails に移行して3系にした方が幸せになれそうなので是非ご検討ください。</p>
<p>そのあたりの対応方法は、私が書いた記事ですが、</p>
<ul>
<li><a href="/posts/migrate-ember-rails-to-ember-cli-rails/">ember-rails から ember-cli-rails へ</a></li>
<li><a href="/posts/update-emberjs-2.18to3/">ember-cli-rails の Ember.js を 2.18 から 3.4 にアップデート</a></li>
<li><a href="/posts/update-emberjs-3_4-to-latest/">Ember.js@3.4 から最新の 3.26 に上げた</a></li>
</ul>
<p>あたりが参考になるかもです。</p>
]]></content>
        </item>
        
        <item>
            <title>Ember.js@3.4 から最新の 3.26 に上げた</title>
            <link>https://mugijiru.github.io/posts/update-emberjs-3_4-to-latest/</link>
            <pubDate>Sun, 09 May 2021 14:35:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/update-emberjs-3_4-to-latest/</guid>
            <description>いつも Ember.js ネタを書く時に使ってる https://github.com/mugijiru/ember-rails-todo-app のリポジトリですが、ゴールデンウィークで Ember.js の最新版への対応を完了させました。 そこへの対応のために https://github.com/mugijiru/ember-components の addon の方も</description>
            <content type="html"><![CDATA[<p>いつも Ember.js ネタを書く時に使ってる
<a href="https://github.com/mugijiru/ember-rails-todo-app">https://github.com/mugijiru/ember-rails-todo-app</a>
のリポジトリですが、ゴールデンウィークで Ember.js の最新版への対応を完了させました。</p>
<p>そこへの対応のために <a href="https://github.com/mugijiru/ember-components">https://github.com/mugijiru/ember-components</a> の addon の方も
2.18 から最新化することになりました。</p>
<h2 id="対応の方針">対応の方針</h2>
<p>どう対応させていったかというと、
<a href="/posts/update-emberjs-2.18to3/">ember-cli-rails の Ember.js を 2.18 から 3.4 にアップデート</a>
の記事でも書いた</p>
<blockquote>
<p>3系で LTS であったバージョンを順番に適用していく方針</p>
</blockquote>
<p>を実際にやってみたって感じ。</p>
<h2 id="実際の対応">実際の対応</h2>
<h3 id="eslint-対応">eslint 対応</h3>
<p>3.4 に上げた後に、eslint で怒られてるのに対応できそうだなとなったので
3.8 に上げる前に修正をした</p>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/66">https://github.com/mugijiru/ember-rails-todo-app/pull/66</a></p>
<p>大きな変更点は
jQuery を使って要素を取得していたところを純粋な JS に書き換えたところぐらい。</p>
<h3 id="3-dot-4-3-dot-8">3.4 → 3.8</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/67">https://github.com/mugijiru/ember-rails-todo-app/pull/67</a></p>
<ol>
<li><code>ember-cli-update --to 3.8</code></li>
<li><code>yarn</code></li>
<li><code>ember-cli-update --codemods</code></li>
</ol>
<p>を叩いたぐらい。codemods では特がないので難しいところは何もない。</p>
<h3 id="3-dot-8-3-dot-12">3.8 → 3.12</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/68">https://github.com/mugijiru/ember-rails-todo-app/pull/68</a></p>
<p>3.8 に上げるよりはちょっと面倒だった。</p>
<p>が、基本的には</p>
<ol>
<li><code>ember-cli-update --to 3.12</code></li>
<li><code>yarn</code></li>
<li><code>ember-cli-update --codemods</code></li>
</ol>
<p>を叩いてるだけである。</p>
<p>とりあえず <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/68/commits/cd7e96493dc9f52c67ee499801144c25b54a4d36">codemods で結構変更があった</a> ので、それを軽く話すと</p>
<ul>
<li>handlebars で AngleBraket を使うようになった
<ul>
<li>3.4 からサポートされ始めてるけど 3.10 でちゃんと使えるようになったっぽい</li>
</ul>
</li>
<li>handlebars でコンポーネントに値を渡す時に <code>@hoge={{value}}</code> みたいに <code>@</code> をつけるようになった
<ul>
<li>これで component の変数か、単なる HTML の属性値かの区別がつくようになったっぽい</li>
</ul>
</li>
<li>model が <code>ember-data</code> ではなく <code>@ember-data/model</code> を import するようになった
<ul>
<li>この頃から個別機能を import させる方針になり始めてるっぽい</li>
</ul>
</li>
</ul>
<p>という感じ。モダンっぽいし、こっちの方が好みの書き方ですね。</p>
<p>あとは Observer を使ってるところが eslint で怒られていたけど直すのが大変そうだったので eslint の方を無視するようにしちゃった。まあ、これよりずっとあとの手順で直してるんだけども。</p>
<h3 id="3-dot-12-3-dot-16">3.12 → 3.16</h3>
<p>Octane が入って来てるからか、
ember-cli-update での差分も大きく、動くようにするまでにいくつかやることがあった。</p>
<p>まずはいつものように</p>
<ol>
<li><code>ember-cli-update --to 3.16</code></li>
<li><code>yarn</code></li>
<li><code>ember-cli-update --codemods</code></li>
</ol>
<p>を実行。で、<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/69/commits/da37e4342c120a4c73a88f7b72ee7344d07eb3e6">ember-cli-update したところで</a>
app.js が書き換えられて自分の設定が消えたのを直すハメになったり同じく config/environment.js が書き換えられてそれも直すハメになったりしてた。新しい文法にするのはいいけど設定を吹っ飛ばすのはやめてほしい。</p>
<p>あと config/optional-features.json で jquery-integration が false にされたのもいただけなかった。
<a href="https://github.com/rondale-sc/ember-cli-rails-addon/blob/master/app/initializers/ember-cli-rails-addon-csrf.js">ember-cli-rails-addon-csrf</a> 的に必要なんだよぉ。</p>
<p>あとは <a href="https://ember-learn.github.io/ember-octane-vs-classic-cheat-sheet/">Ember.js Octane vs Classic Cheat Sheet</a> を参考に書き換えた。</p>
<ul>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/69/commits/5a2d971f18fa3da9d3f45c344666e7c134b2bf4a">hbs の書き方がさらに変わったので修正</a>
<ul>
<li>親から貰った受け取ったプロパティは @ を prefix とするように変更</li>
<li>自身の持つプロパティは this. を prefix とするように変更</li>
<li><code>@click=</code> で定義していた click イベントは on を使うように変更</li>
</ul>
</li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/69/commits/ed3e7e3c1fdac5a88277fafa6c5ce42a603ff9cb">jQuery に頼ってた部分を素の JS に書き換え</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/69/commits/0f4113e6a918dbfd5f75500370fd2e00486d1cec">Component の action の書き方などの変更</a>
<ul>
<li>actions で囲むのではなく <code>@action</code> というデコレータをメソッドにつける方法になった</li>
<li>form の button を叩いた時に submit されるようになってしまったので preventDefault で送信されないようにした</li>
</ul>
</li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/69/commits/3362321970ed616212ce1250fec3555eba434bd4">Controller の action などの書き方などを変更</a>
<ul>
<li>actions で囲むのではなく <code>@action</code> というデコレータをメソッドにつける方法になった</li>
<li>こっちでも jQuery に頼ってたのを直した</li>
</ul>
</li>
</ul>
<p>ということをやっている。</p>
<p>設定が変わってるのをちゃんと戻す作業とか
jquery-integration の問題とか書き方が色々変わったりしているので、なかなか苦労した。
hbs は結構変わってるしね……。</p>
<p>まあでも大体そんな感じのことをしたらなんとかなる。</p>
<h3 id="3-dot-16-3-dot-20">3.16 → 3.20</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/71">https://github.com/mugijiru/ember-rails-todo-app/pull/71</a></p>
<p>これは</p>
<ol>
<li><code>ember-cli-update --to 3.16</code></li>
<li><code>yarn</code></li>
<li><code>ember-cli-update --codemods</code></li>
</ol>
<p>だけで済んでるのでちょー楽だった</p>
<h3 id="2-dot-18-3-dot-4-for-mugijiru-ember-components">2.18 → 3.4 for @mugijiru/ember-components</h3>
<p>ここで突然別の流れをぶち込むハメに。</p>
<p>というのも ember-todo-rails-app の Ember.js を 3.24 に上げようとしたらその中で使ってるコンポーネントである @mugijiru/ember-components の方を更新しないと上げられない状態になってしまったから。</p>
<p>多分 Classic な書き方がダメなんだろうなという推測で、こっちも Octane 対応をしないといけないな、という判断になった。</p>
<p>で、こっちも段階的に上げていくわけですが、ひとまず 3.4 にするにあたり
ember-rails サポートも切っておく方が楽なので</p>
<ul>
<li><a href="https://github.com/mugijiru/ember-components/pull/5">https://github.com/mugijiru/ember-components/pull/5</a></li>
<li><a href="https://github.com/mugijiru/ember-components/pull/6">https://github.com/mugijiru/ember-components/pull/6</a></li>
</ul>
<p>で 2.18 のままだけど Gem のサポートをやめて module を使う仕組みに書き換えている。
ember-rails でなければ古い書き方をする必要はないのだ。</p>
<p>そしてさらに <a href="https://github.com/mugijiru/ember-components/pull/7">https://github.com/mugijiru/ember-components/pull/7</a> で 3.4 に上げている。</p>
<p>コード変更で面倒だったのは</p>
<ul>
<li><a href="https://github.com/mugijiru/ember-components/pull/7/commits/7bf7f7c7905af7a671d84b25991b9ceb68800048">codemods 適用</a>
<ul>
<li>テストの書き方が多少変わってるのでそっちを覚えないといけない</li>
</ul>
</li>
<li><a href="https://github.com/mugijiru/ember-components/pull/7/commits/b70537441d63aa6f9efafa03c407ef30973461c5">test 用に読み込むパッケージ名の修正</a>
<ul>
<li>package.json でパッケージ名が修正されたのに伴う変更。まあこうあるべきって感じ。</li>
</ul>
</li>
<li><a href="https://github.com/mugijiru/ember-components/pull/7/commits/a6505609e2ccf2c8d17ee703cc1aa7cff2847aea">テストでのレンダリングの仕組みが変わったようなので対応</a>
<ul>
<li>どうもレンダリングで Wrapper になる div が入るようになったっぽいので雑に div で取ってたのが動かなくなった</li>
</ul>
</li>
</ul>
<p>あたりかな。パッケージ名の修正と div のやつはどっちも気付くのに時間がかかってしまったやつ。つらかった。</p>
<h3 id="3-dot-4-3-dot-8-for-mugijiru-ember-components">3.4 → 3.8 for @mugijiru/ember-components</h3>
<p><a href="https://github.com/mugijiru/ember-components/pull/8">https://github.com/mugijiru/ember-components/pull/8</a></p>
<p>まあ難しいことをしなくても普通に上がったやつですね。はい。なので詳細はいいや。</p>
<h3 id="3-dot-8-3-dot-12-for-mugijiru-ember-components">3.8 → 3.12 for @mugijiru/ember-components</h3>
<p><a href="https://github.com/mugijiru/ember-components/pull/9">https://github.com/mugijiru/ember-components/pull/9</a></p>
<p>これもあっさり上がったので特筆することなし</p>
<h3 id="3-dot-12-3-dot-16-for-mugijiru-ember-components">3.12 → 3.16 for @mugijiru/ember-components</h3>
<ul>
<li><a href="https://github.com/mugijiru/ember-components/pull/10">https://github.com/mugijiru/ember-components/pull/10</a>
<ul>
<li>3.16 に上げたのはこっち</li>
</ul>
</li>
<li><a href="https://github.com/mugijiru/ember-components/pull/12">https://github.com/mugijiru/ember-components/pull/12</a>
<ul>
<li>3.16 に上げただけだと修正が足らなかったので追加修正したやつ</li>
</ul>
</li>
</ul>
<p>いつもの手順はもういいとして、特別にやったことは</p>
<ul>
<li><a href="https://github.com/mugijiru/ember-components/pull/10/commits/8bc5e01b97e1740601a4710496d28d6840ce6e4d">hbs の書き方を新しい形式に合わせた</a>
<ul>
<li>this をつけただけだけど</li>
</ul>
</li>
<li>Component の書き方修正(<a href="https://github.com/mugijiru/ember-components/pull/10/commits/654619191256c8a778440007fab2c9f16185f247">mg-button</a>, <a href="https://github.com/mugijiru/ember-components/pull/10/commits/9b4beeec63023fecb43b5208a1f324030916e4b0">mg-checkbox</a>, <a href="https://github.com/mugijiru/ember-components/pull/10/commits/7c2b92a8a1634b0a1d4fa1d8dc3fd02732cf9525">mg-toggle-switch</a>)
<ul>
<li>addon/templates/components/*.hbs から addon/components/*.hbs に移動
<ul>
<li>どうもいつの間にか templates/components に置かなくて良くなったっぽい
<ul>
<li>さらに新しい <a href="https://cli.emberjs.com/release/advanced-use/project-layouts/#podslayout">pods layout</a> というのもあるけど addon の場合は互換性維持のために classic 推奨。</li>
</ul>
</li>
</ul>
</li>
<li>import 元を <code>@glimmer/component</code> にして Native Class を用いた記述に変更
<ul>
<li>これまで <code>export default Component.extend</code> していたのが <code>export default class Hoge extends Components</code> という書き方になった</li>
<li>Native Class になったのでプロパティも普通に <code>hoge = 'fuga'</code>&quot; みたいに書くようになった</li>
</ul>
</li>
<li>className, classNameBindings は使えなくなったので調整</li>
<li>親から渡って来るパラメータの初期値調整のための記法の使用
<ul>
<li><code>get hoge () { return this.args.hoge ?? '' }</code> のようにしてデフォルト空文字列にするなど
<ul>
<li>親から渡って来るパラメータは <code>this.args</code> のように隔離された場所に入るようになってる。便利。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><a href="https://github.com/mugijiru/ember-components/pull/12">Click が実行されない問題の修正</a>
<ul>
<li>onClick というパラメータで渡って来たやつをクリック時に実行するように調整している</li>
</ul>
</li>
</ul>
<h3 id="新しい-mugijiru-ember-components-に更新">新しい @mugijiru/ember-components に更新</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/72">https://github.com/mugijiru/ember-rails-todo-app/pull/72</a></p>
<p>MgButton とかに <code>{{on &quot;click&quot; this.save}}</code> とかでアクションを渡せていたのがここからは <code>@onClick={{this.save}}</code> のように渡さないといけない。なぜなら @mugijiru/ember-components を Octane 対応する際にそういう風に仕様が変わったからだ。</p>
<p><a href="https://guides.emberjs.com/release/in-depth-topics/patterns-for-actions/">https://guides.emberjs.com/release/in-depth-topics/patterns-for-actions/</a>
を見た感じ、そうするのが正しいっぽい。ただの button には <code>{{on &quot;click&quot; this.save}}</code> というように書くことになるので混乱がありそうでだるいけど。</p>
<h3 id="3-dot-20-3-dot-24">3.20 → 3.24</h3>
<p>@mugijiru/ember-components の Ember.js を 3.16 にして Octane 対応を済ませることで
ember-rails-todo-app の Ember.js を 3.24 に上げられるようになった。</p>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/73">https://github.com/mugijiru/ember-rails-todo-app/pull/73</a></p>
<p>ここではあんまり対したことはしてないけど
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/73/commits/9268c5414c2c3052c2537fa1e2dacc0b4ee55886">active_model_serializer を使うことを明示的に書かないといけなくなった</a>
というのが一番だるいポイントかな。これも原因判明までに時間食ったやつ……。</p>
<h3 id="3-dot-24-3-dot-26--最新">3.24 → 3.26(最新)</h3>
<ul>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/74">ember-bootstrap を 4系に上げた</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/76">Ember.js を最新化し、文法も最新に合わせて書き直した</a></li>
</ul>
<p>あたりで、最新化できた。
ember-bootstrap は上げられるから上げておいただけだけども。</p>
<ul>
<li>native class としてクラス定義するように変更</li>
<li>@tracked, @sevice, @action, @attr などのデコレータを使うように変更</li>
<li>computed property は tracked を使う書き方に置き換え</li>
<li>set, get を使った書き方も古いので <code>this.get('hoge')</code> などを <code>this.hoge</code> みたいに書き換え</li>
</ul>
<p>あたりのことをしている。結構変更は多いけど、まあ、基本的に lint のいうことに従って対応しただけである。</p>
<p>ひとつ initializer で current-user を無理やり inject している処理が
Native Class に置き換えできなかったので、ここはどこかでなんとかしないとまずそう。多分 Ember.js@4 に追従できなくなる
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/76/commits/f6b6ed65863a9e94ed1b41154387e87e4f0da1bf">https://github.com/mugijiru/ember-rails-todo-app/pull/76/commits/f6b6ed65863a9e94ed1b41154387e87e4f0da1bf</a></p>
<p>User class を用意して instanceInitializer でそこに突っ込んでやるとか、
Service class を用意したりしたら、なんとかなりそうな気はしている。</p>
<h3 id="3-dot-16-3-dot-20-for-mugijiru-ember-components">3.16 → 3.20 for @mugijiru/ember-components</h3>
<p>アプリ本体だけでなく addon も最新化対象である。
<a href="https://github.com/mugijiru/ember-components/pull/13">https://github.com/mugijiru/ember-components/pull/13</a></p>
<p>3.20 に上げるのは何も問題なし。
3.16 に上げる時に苦労したからねえ。</p>
<h3 id="3-dot-20-3-dot-24-for-mugijiru-ember-components">3.20 → 3.24 for @mugijiru/ember-components</h3>
<p><a href="https://github.com/mugijiru/ember-components/pull/15">https://github.com/mugijiru/ember-components/pull/15</a></p>
<p>3.24 に上げるのも特に苦労なし。</p>
<h3 id="3-dot-24-3-dot-26--最新--for-mugijiru-ember-components">3.24 → 3.26(最新) for @mugijiru/ember-components</h3>
<p><a href="https://github.com/mugijiru/ember-components/pull/16">https://github.com/mugijiru/ember-components/pull/16</a></p>
<p>基本的には難しいことなし。ただし Interactive な要素じゃないのに click させるなって eslint に怒られてたから
MgChecobox や MgToggleSwitch を div から button に変更した。
<a href="https://github.com/mugijiru/ember-components/pull/16/commits/d9f14499f92584479fe7154879003bfd5f237f03">https://github.com/mugijiru/ember-components/pull/16/commits/d9f14499f92584479fe7154879003bfd5f237f03</a></p>
<p><code>input type=&quot;checkbox&quot;</code> が良い気もするけど、ま、一旦いいや。</p>
<h3 id="最新の-mugijiru-ember-components-取り込み">最新の @mugijiru/ember-components 取り込み</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/77">https://github.com/mugijiru/ember-rails-todo-app/pull/77</a></p>
<p>最新化する際に、
div から button に書き換えた影響で style 崩れがあるので調整している。</p>
<p>@mugijiru/ember-components 用の css は addon 側に置いても良いよなあと思ってるけど今回はそこは放置している。めんどくさくて。</p>
<h2 id="最後に">最後に</h2>
<p>ゴールデンウィークをこれで結構消費してしまったのでちょっと残念な気持ちになっている。</p>
<p>けどまあ、どこで引っ掛かりやすいかは結構洗い出せたので良い。</p>
<dl>
<dt>3.8 → 3.12</dt>
<dd>codemods で結構変更される</dd>
<dt>3.20 → 3.24</dt>
<dd>addon が 2.18 で使えるような古い書き方だと使えなくなる</dd>
<dt>Octane 対応</dt>
<dd>書き方が色々変わる。古い書き方も一部まだサポートされてそうだけど。</dd>
</dl>
<p>とりあえず Octane が鬼門かねえ。</p>
]]></content>
        </item>
        
        <item>
            <title>org-agenda を活用し始めた</title>
            <link>https://mugijiru.github.io/posts/try-org-agenda/</link>
            <pubDate>Thu, 29 Apr 2021 19:03:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/try-org-agenda/</guid>
            <description>昨年から org-mode をもっと活用していこうということで、 org-clock を使い始めたり org-pomodoro を導入したり org-habits を設定してみたりしている麦汁さんです。 org-mode は機能が豊富過ぎてマジ</description>
            <content type="html"><![CDATA[<p>昨年から org-mode をもっと活用していこうということで、
org-clock を使い始めたり org-pomodoro を導入したり org-habits を設定してみたりしている麦汁さんです。</p>
<p>org-mode は機能が豊富過ぎてマジで何が出来るのか全貌を把握し切れてないのですが、そんな中で、やっぱり全然把握できてなくて使ってなかった機能の1つが org-agenda ってやつ。</p>
<p>なんかうまく使うと、予定を組んでたり締切を設定していたりするタスクが一目瞭然になってお仕事などが捗るという素敵な機能らしいのだけど、どうもイマイチ使い方がわからなくて放置していました。</p>
<p>ただまあ仕事が捗るなら試してみる価値はあるよな〜ということで、今年の頭ぐらいから使い始めている。</p>
<p>まず、平日朝イチでやっておきたい習慣タスクに対して
<code>Weekday</code> と <code>Start</code> の2つのタグを振ってるか、
<code>Daily</code> というタグを振ってるのでそれを表示できるやつを以下のように仕込んでる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(<span style="color:#e6db74">&#34;hs&#34;</span> <span style="color:#e6db74">&#34;Weekday Start&#34;</span>
 ((tags <span style="color:#e6db74">&#34;Weekday&amp;Start|Daily&#34;</span>
        ((org-super-agenda-groups <span style="color:#f92672">&#39;</span>((:name <span style="color:#e6db74">&#34;予定が過ぎてる作業&#34;</span> :scheduled past)
                                    (:name <span style="color:#e6db74">&#34;今日の作業&#34;</span> :scheduled today)
                                    (:discard (:anything <span style="color:#66d9ef">t</span>))))))))
</code></pre></div><p><a href="https://github.com/mugijiru/.emacs.d/blob/a523566f2be993655f74ebf20afc4da444019f5e/inits/60-org.el#L89-L93">https://github.com/mugijiru/.emacs.d/blob/a523566f2be993655f74ebf20afc4da444019f5e/inits/60-org.el#L89-L93</a></p>
<p>麦汁さんのやりたいことを実現するには、デフォルトの org-agenda だとなんか機能が足りないっぽかったのでそれを補うために <a href="https://github.com/alphapapa/org-super-agenda">org-super-agenda</a> も使っている。</p>
<p>とりあえず上の例の2行目でタグによる絞り込みをしているがこれは org-mode の標準機能を使っていて
<a href="https://orgmode.org/manual/Storing-searches.html#Storing-searches">https://orgmode.org/manual/Storing-searches.html#Storing-searches</a>
あたりに書いてる方法で絞り込んでいる。</p>
<p>で、その後に org-super-agenda の機能である
<a href="https://github.com/alphapapa/org-super-agenda#group-selectors">Group Selectors</a> というやつでスケジュール通りのやつと、スケジュールが過ぎてるやつとで表示を切り分けてる。</p>
<p><code>(:discard (:anything t))</code> は、そこまでの条件にマッチしなかったやつを全部無視するような設定。これがないと <code>Other items</code> という形で全部並んでしまって邪魔になる。</p>
<p>最初の絞り込みで綺麗に絞り込めると良いかもしれないが、そこまで高度な機能は org-mode には備わってなさそう。それか、そういう高度な機能を見つけて使いこなせる能力を俺が有してないか。</p>
<p>まあそれはともかく、上の感じでタスクを登録していると以下のように表示される。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Headlines with TAGS match: Weekday&amp;Start|Daily

 予定が過ぎてる作業
  next-actions:TODO 排便                                                      :Weekday:Start:

 今日の作業
  next-actions:TODO 体重・体脂肪率計測                                                 :Daily:
</code></pre></div><p>実際のやつはもっと色々あるというか、そもそもわざわざ排便を org-mode で管理はしてないのであくまでサンプルとして2つ置いてるだけだとご認識ください。</p>
<p>同じノリでその日の締め作業も取れるように設定している。</p>
<p>また、日中使うための設定も用意していて、こっちは結構複雑。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(<span style="color:#e6db74">&#34;d&#34;</span> <span style="color:#e6db74">&#34;Today&#34;</span>
 ((agenda <span style="color:#e6db74">&#34;会議など&#34;</span>
          ((org-agenda-span <span style="color:#e6db74">&#39;day</span>)
           (org-agenda-files my/org-agenda-calendar-files)))
  (tags-todo <span style="color:#e6db74">&#34;-Weekday-Daily-Holiday-Weekly-Weekend&#34;</span>
             ((org-agenda-prefix-format <span style="color:#e6db74">&#34; &#34;</span>)
              (org-agenda-overriding-header <span style="color:#e6db74">&#34;今日の作業&#34;</span>)
              (org-habit-show-habits <span style="color:#66d9ef">nil</span>)
              (org-agenda-span <span style="color:#e6db74">&#39;day</span>)
              (org-agenda-todo-keyword-format <span style="color:#e6db74">&#34;-&#34;</span>)
              (org-overriding-columns-format <span style="color:#e6db74">&#34;%25ITEM %TODO&#34;</span>)
              (org-agenda-files <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Documents/org/tasks/next-actions.org&#34;</span>))
              (org-super-agenda-groups <span style="color:#f92672">&#39;</span>((:name <span style="color:#e6db74">&#34;仕掛かり中&#34;</span> :todo <span style="color:#e6db74">&#34;DOING&#34;</span>)
                                         (:name <span style="color:#e6db74">&#34;TODO&#34;</span> :todo <span style="color:#e6db74">&#34;TODO&#34;</span>)
                                         (:name <span style="color:#e6db74">&#34;待ち&#34;</span> :todo <span style="color:#e6db74">&#34;WAIT&#34;</span>)
                                         (:discard (:anything <span style="color:#66d9ef">t</span>))))))
  (alltodo <span style="color:#e6db74">&#34;&#34;</span>
             ((org-agenda-prefix-format <span style="color:#e6db74">&#34; &#34;</span>)
              (org-agenda-overriding-header <span style="color:#e6db74">&#34;予定作業&#34;</span>)
              (org-habit-show-habits <span style="color:#66d9ef">nil</span>)
              (org-agenda-span <span style="color:#e6db74">&#39;day</span>)
              (org-agenda-todo-keyword-format <span style="color:#e6db74">&#34;-&#34;</span>)
              (org-overriding-columns-format <span style="color:#e6db74">&#34;%25ITEM %TODO&#34;</span>)
              (org-agenda-files <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Documents/org/tasks/projects.org&#34;</span>))
              (org-super-agenda-groups <span style="color:#f92672">&#39;</span>((:name <span style="color:#e6db74">&#34;〆切が過ぎてる作業&#34;</span> :deadline past)
                                         (:name <span style="color:#e6db74">&#34;予定が過ぎてる作業&#34;</span> :scheduled past)
                                         (:name <span style="color:#e6db74">&#34;今日〆切の作業&#34;</span> :deadline today)
                                         (:name <span style="color:#e6db74">&#34;今日予定の作業&#34;</span> :scheduled today)
                                         (:discard (:anything <span style="color:#66d9ef">t</span>))))))
  (tags-todo <span style="color:#e6db74">&#34;Weekday|Daily|Weekly&#34;</span>
             ((org-agenda-overriding-header <span style="color:#e6db74">&#34;習慣&#34;</span>)
              (org-habit-show-habits <span style="color:#66d9ef">t</span>)
              (org-agenda-files <span style="color:#f92672">&#39;</span>(<span style="color:#e6db74">&#34;~/Documents/org/tasks/next-actions.org&#34;</span>))
              (org-super-agenda-groups <span style="color:#f92672">&#39;</span>((:name <span style="color:#e6db74">&#34;予定が過ぎてる作業&#34;</span> :scheduled past)
                                         (:name <span style="color:#e6db74">&#34;今日予定&#34;</span> :scheduled today)
                                         (:discard (:anything <span style="color:#66d9ef">t</span>))))))))
</code></pre></div><p><a href="https://github.com/mugijiru/.emacs.d/blob/a523566f2be993655f74ebf20afc4da444019f5e/inits/60-org.el#L109-L144">https://github.com/mugijiru/.emacs.d/blob/a523566f2be993655f74ebf20afc4da444019f5e/inits/60-org.el#L109-L144</a></p>
<p>通常なら Agenda for current week or day ってのが標準で用意されてるのでそれを使えばいいかなって思うんだけど
1 view でいい感じにカテゴライズされていて取得できるってのが欲しかったんですよね。で、それをやろうと思うとやはり org-super-agenda が必要そうだったって感じ。</p>
<p>とりあえず現在は next-actions.org に、直近やるつもりの作業を詰めていて
projecs.org に、直近ではないけどやることリストを並べてるって感じ。スプリントバックログとプロダクトバックログみたいな扱いのつもりですね。あとは別途 org-gcal で同期している Google Calendar から取得した予定用のファイルもあったりする。</p>
<p>そうやっていくつかあるファイルからいい感じになるようにということで設定しているのが先程のコードでそれで org-agenda のバッファを生成すると以下のような雰囲気のやつになる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text"> 会議など
 11:00-12:00 すごい会議
 15:00-18:00 長い会議
------------------------------
今日の作業
 仕掛かり中
 - 藁人形の作成
 待ち
 - 五寸釘発注の稟議

予定作業
 〆切が過ぎてる作業
 - 五寸釘の発注

習慣
 予定が過ぎてる作業
 - 排便
 今日予定
 - 体重・体脂肪率計測
</code></pre></div><p>もちろん、内容はサンプル用に適当にでっち上げたやつです。</p>
<p>本当はタグも表示されてしまうけど、それはあまり要らないかなと思ってるので、それはなんとか非表示にしたいなあと願ってる。
<code>org-overriding-columns-format</code> を弄っても今のところいい感じにならなくて悲しい。</p>
<p>あと、今の設定と使い方だと「あと数日で着手しないといけないタスク」とかそういうやつはわからないので、それもなんとかしたい。</p>
<p>多分着手予定の日を早めに設定して起きつつ〆切を設定してたら今でもある程度いけるんだろうけど、気付いたら着手予定が同じ日になってていきなりその日に全部やらないといけない雰囲気になるとかありそうでこわい。</p>
<p>数日前から、着手予定のやつがいつ着手予定なのか見れるようにしたらいいんだろうな〜。ま、少しずつ改善を入れていくしかないか……。</p>
]]></content>
        </item>
        
        <item>
            <title>最近 org-pomodoro 使ってないことに気付いた</title>
            <link>https://mugijiru.github.io/posts/why-not-use-org-pomodoro/</link>
            <pubDate>Thu, 29 Apr 2021 18:03:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/why-not-use-org-pomodoro/</guid>
            <description>org-pomodoro って便利な org-mode の拡張があるんですよ。 org-clock とポモドーロテクニックを組み合わせて使える便利なやつ。 デフォルト設定で話すと、何か TODO にカーソルを乗せて</description>
            <content type="html"><![CDATA[<p><a href="https://github.com/marcinkoziej/org-pomodoro">org-pomodoro</a> って便利な org-mode の拡張があるんですよ。
org-clock とポモドーロテクニックを組み合わせて使える便利なやつ。</p>
<p>デフォルト設定で話すと、何か TODO にカーソルを乗せてる状態で起動したらそいつが clock-in した上で25分のタイマーが動いて、
25分経過したら clock-out した上で、5分の休憩が挟まってその休憩終了時には「次のポモドーロ開始するかい?」みたいなのが出て来てそこでまた M-x org-pomodoro を叩いたらまた25分のタイマーが開始して……みたいなやつ。</p>
<p>まあ使い方それで合ってたかちょっと自信ないけど。というのも、表題の通りで、最近使ってないんですよね。便利な雰囲気なのに。</p>
<p>なんで馴染まないのかな〜。やっぱり割込み作業が多くて pomodoro を乱されるから?
あとは会議が挟まってくるとどう運用していいかわからなくなるから?</p>
<p>前者の解決は、タイマー起動中は Slack の通知を切って見れないようにするぐらいじゃないと多分割込みを防げないよな〜という気はする。ちょっとその運用考えるか。</p>
<p>後者は、まあ会議の時はもう pomodoro 放置でいいっていう割り切りかな。</p>
<p>という悩みがあるのでポモドーロテクニックを1年以上継続しているぞ! みたいな猛者の方はどうやってそれを維持しているか教えてほしい。</p>
<p>org-clock は使ってるけどね。pomodoro 存在を忘れてた。無念。</p>
]]></content>
        </item>
        
        <item>
            <title>RPA ちょっとだけ調べてみた</title>
            <link>https://mugijiru.github.io/posts/research-rpa/</link>
            <pubDate>Sun, 25 Apr 2021 23:46:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/research-rpa/</guid>
            <description>RPA ちょっとだけ調べてみたのでとりあえず Blog 記事にする。ちなみにいくつかリンク張るけど、面倒なのでアフィリエイトとかそういうのにはなってない。お</description>
            <content type="html"><![CDATA[<p>RPA ちょっとだけ調べてみたのでとりあえず Blog 記事にする。ちなみにいくつかリンク張るけど、面倒なのでアフィリエイトとかそういうのにはなってない。お金は好きだけど面倒が勝った。</p>
<h2 id="モチベーション">モチベーション</h2>
<p>身の回りで RPA 導入するって話があってそれ聞いて色々思うところがあったから調べてしまった。そんで折角調べたんだから世の中に出してしまえ、というぐらいの軽い気持ち。</p>
<p>そんな軽い気持ちなので、まだどれ1つ試してはいない。</p>
<p>あと、記事中でやたら Excel のことを気にしているけど、自動化してデータ取りたいやつの半分ぐらいは Excel だろっていう偏見があるからです。</p>
<h2 id="rpa-とは">RPA とは</h2>
<p>わざわざ説明要らない気がするけど一応。</p>
<p>ロボティクス・プロセス・オートメーションとかいうやつでざっくり言うと「機械に任せて自動化しようぜ」ってやつ。あと、プログラマではない人も扱えるようにコードは書かないとか、昔からある画面自動操作とちょっと違って、仮想環境上で実行されるとかあるっぽい。ま、細かいことは知らん。動きゃいいんだよ動きゃ。</p>
<h2 id="rpa-の分類">RPA の分類</h2>
<p>ざっくりと</p>
<ul>
<li>スタンドアローン型</li>
<li>オンプレミス型</li>
<li>クラウド型</li>
</ul>
<p>と分かれる。</p>
<h3 id="スタンドアローン型">スタンドアローン型</h3>
<p>デスクトップ型とも言われるやつ。一台のマシンにインストールしてその中で完結するタイプ。感覚的には一番わかりやすいんじゃないかな。
RDA(ロボティクス・デスクトップ・オートメーション)と呼んで他と区別されることもあるらしい。</p>
<p>各個人のマシンにインストールして動かすので操作対象の制限が少なく個人作業の効率化に向いている。</p>
<p>インストールして使うタイプなので、大体 OS の制限がある。っていうか Windows で使ってくださいって言われる印象がある。</p>
<p>仕組みが単純だからなのか比較的安価なのが多いっぽい。とはいえ、大体初期導入で20万円とか30万円とか取られて月々10万円取られる、みたいなのがお約束。</p>
<p>で、個人の作業の効率化には向いているけど、会社全体とか部署全体の効率化のために他の人が作ったシナリオを流用したい、みたいなのには向かない。だって各個人のマシンに入れるものですし。</p>
<p>それを回避するために、こいつを自社管理サーバ(オンプレでも AWS でも)にインストールして、
1アカウントを使い回してリモートデスクトップでアクセスして操作する、みたいなのはバカげた考えなのでやめた方がいい。</p>
<p>共通アカウントって時点でセキュアじゃないし、誰かのロボットが動いていると自分の処理が動かせないので待ちが発生するし、サーバの管理コストも発生するしでコストメリットに対するデメリットがでかいはず。導入しようとしている人にそれが理解できるか知らんけど。</p>
<h3 id="オンプレミス型">オンプレミス型</h3>
<p>サーバ型とも言われるやつ。オンプレサーバにインストールしてみんなで使うみたいな用途向け。</p>
<p>オンプレサーバに入れるので</p>
<ul>
<li>情報が社外に流出しないようにしたい</li>
<li>イントラネットのサーバにアクセスしたい</li>
<li>使用状態の監視をしたい</li>
</ul>
<p>みたいなことを要求しがちな大企業でも導入しやすそうな気がしている。</p>
<p>一方で、オンプレサーバに入れるとなるとサーバ管理コストも発生するし、多分仕組み上お値段もお高めになるかなって気はしている。</p>
<p>オンプレミス型とは書いているけど別に AWS EC2 上で動かしても問題はないはず。イントラネットに閉じる、みたいなのとはズレてくるからメリットが薄れそうだけど。</p>
<p>正直3分類の中で一番興味ないのでほとんど調べてない。つまりできないこととかもよくわからん。</p>
<p>多分、サーバにはサーバソフトウェアを入れた上で、各自のマシンにはクライアントソフトウェアを入れて、それ経由でサーバにアクセスして、実際の処理は各自のマシンで実行される仕組みにしているんじゃないかな。じゃないと大企業で大事な Excel などの操作もできなさそう(やりにくそう)だし。</p>
<h3 id="クラウド型">クラウド型</h3>
<p>みんな大好きクラウド環境で動くタイプ。クラウド環境で動くので、使用場所を問わないし管理もしやすいやつ。ほっといても運営がどんどん機能追加してくれるしね。多分。</p>
<p>ブラウザ上で完結している場合は Excel などの操作はできないが、それを解決するために別途クライアントをインストールする、というタイプもある。</p>
<p>ただ、多分クライアントソフトの開発にそれほどリソースが割けないので対応ソフトウェアが多くはない、ということもありそう。まあ時代はクラウドなので今時 Excel などのローカル環境で動くソフトウェアなんて使いませんよねハハハ。</p>
<p>オンプレ型と違ってサーバ管理コストは発生しないのでエンジニアの端くれとしてはオンプレ型よりこっちの方が好み。だって情シスでもないのにサーバ管理させられたくないっしょ。通常業務が滞る。</p>
<p>サービス終了となった時に全部動かなくなってつらいことになりそうなのでクラウド型を選択する時は人気度にも気をつけた方がいいかもしれない。それ以外のタイプでもサポート終了したら色々困りそうだけど、即座に動かなくなるわけではないはずなので、まだマシそう。</p>
<h2 id="どのタイプを使うべきか">どのタイプを使うべきか</h2>
<p>用途による。</p>
<p>とだけ書いてもしょうがないので、ちょっと主観で述べると、とりあえず基本的にはクラウド型にしとく方が良さそうな気がする。</p>
<h3 id="会社単位-部署単位での導入の場合">会社単位・部署単位での導入の場合</h3>
<p>会社全体や部署全体の効率化観点だと、どうせ「このシナリオをみんなが使えるようにしたい」みたいになるので最初からそういう用途があることを折り込んでおいた方が良さそう。</p>
<p>となるとオンプレ型かクラウド型になるけど、オンプレサーバの管理とかしたくないじゃん? じゃあクラウド型じゃん?</p>
<p>管理コストとかより情報流出対策とかの方が大事な方は、オンプレ型になる気がする。あとはイントラネットへのアクセスが必要だったらクラウド型は厳しいかも。</p>
<h3 id="個人での導入の場合">個人での導入の場合</h3>
<p>個人用途だとわざわざオンプレ型にして無駄に管理の手間や利用料金を増やしたい酔狂なやつ以外はスタンドアローン型かクラウド型になると思う。</p>
<p>で、個人だと色々自由なはずなので使うソフトウェアは基本的にクラウドアプリケーションに寄せておいたら、スタンドアローン型のメリットである、ローカル環境の操作は不要になるかなと。</p>
<p>また、クラウド型にしておいたら、
PC を買い替えた時とかもインストールし直しとかデータ移行とかも不要で便利。いや、ローカルクライアントも必要なやつだとインストールし直しは発生するけども。</p>
<p>もしローカル環境の自動化をしたいとか、イントラネットにアクセスしたいとか、クラウドサービスの利用は諸々の制限がある場合はスタンドアローン型になるかなって気はする。けど、そういうところソフトウェアのインストールにも制限がありそう(偏見)。</p>
<h2 id="その他-気にした方がいいポイント">その他、気にした方がいいポイント</h2>
<h3 id="機能面">機能面</h3>
<p>各会社がシノギを削ってるのでそれぞれの製品毎に強みがあったりする。</p>
<p>例えば、AI による判定機能が入ってるとか、素人でも簡単にロボットが作れちゃうとか、複雑な操作までできることが売りのやつとかもある。</p>
<p>そのあたりは、各自が自分のスキルレベルとかやりたいことに合わせて検討して欲しい。というか、そこまで調べる元気はなかった。あと AI がどうのこうのってやつはそもそも信用してなかったりするので、売り文句を見てると苦痛だった。</p>
<h3 id="お値段">お値段</h3>
<p>大事だよね〜お値段。お高いの厳しいもんね。まあ、安くてもやりたいことができないんじゃあ導入する意味はないので機能重視で考えた方がいいと思うよ。</p>
<p>ちなみに大体のやつは月額10万円からで初期費用は別途30万とかの世界なので私としては「高い……無理……」ってなるんだけども。ギョームソフトウェアってお高いね。</p>
<p>個人的には、基本サービスは安いけど、つい頼みたくなるような便利な追加オプションがあるような料金設定はニクいなって思う。</p>
<h3 id="やめやすさ">やめやすさ</h3>
<p>導入してみてダメだった時のことを考えるとやめやすさは考慮に入れておいた方がいいと思うの。</p>
<p>例えば、シナリオのエクスポート機能があって、それを他の RPA に取り込むことができると嬉しいよね。そんなのをサポートしている RPA があるって聞いたことないけど。互換性の維持とか厳しそうだしな。</p>
<p>あとは契約期間だよね。1年更新とかやめてほしい。月額プランと年契約プランで後者は割安、とかならいいけど。その場合でも解約申請期間がめっちゃ短かいとかわかりにくいとかもやめてほしいよね。</p>
<h3 id="息が長そうか">息が長そうか</h3>
<p>せっかく使い続ける選択をしたのに、製品サポートそのものが終了してしまったら困るので長く続きそうかってのは大事。</p>
<p>それをどう判断するかは、ユーザー数が十分いそうか(維持できるだけの収益がありそうか)とか、母体が大きいか、とかになるのかなあ。</p>
<p>個人的にはサービスサイトの表示が微妙なところは、そこにコストがかけられない程度に儲かってないんだな、つまり危なそうだな、という気持ちになる。</p>
<h2 id="で-具体的にどの製品を使ったらいいのか">で、具体的にどの製品を使ったらいいのか</h2>
<p>これ、ほんと全然操作したことはなくって、ググって見つかる情報だけで判断しているのでその前提でよろしくな。</p>
<p>あと、基本的にケチなので、ほとんど無料プランがあるやつしかリストアップしてない。</p>
<h3 id="coopel">Coopel</h3>
<p><a href="https://coopel.ai/">Coopel</a> は DeNA が出しているクラウド型の RPA サービス。ローカルクライアントもあって、それを使うとローカルのファイルも扱えたりするやつ。少なくともみんな大好きな Excel は扱えるよっ!
Mac と Windows の両対応なのも嬉しいポイント。</p>
<p>記事執筆時点だと、1アカウントあたり月額5,400円(税抜)と他の RPA サービスに比べるとかなりリーズナブルな感じ。最低アカウント数は1アカウントからっぽい雰囲気だし(多分、明示はされてない)</p>
<p>機能面では、クラウド型がベースなのもあってちょっと弱い気がしている。あと、まだ出たばかりのサービスでユーザー数が多くなさそうで、ちゃんと生き残ってくれるか気になる。</p>
<p>とはいえ国産 RPA だと調べた中では一番好きな感じ。</p>
<p>他のやつは、クソ高いか「お値段はお問い合わせください」だったり、
Mac 対応してなかったりするので。</p>
<h3 id="uipath-community-edition">UiPath Community Edition</h3>
<p><a href="https://www.uipath.com/ja/">UiPath</a> は海外の RPA サービスで結構有名っぽいやつ。
Community Edition だと、個人でも使えるようだし、企業でも条件を満たせば無料で使えるようなので小規模事業な各位には良いかもしれない。
<a href="https://www.uipath.com/hubfs/legalspot/JP-UiPath-Specific-Terms-for-Community.pdf">https://www.uipath.com/hubfs/legalspot/JP-UiPath-Specific-Terms-for-Community.pdf</a></p>
<p>Automation Cloud とかいうクラウド型のやつとか、色々な機能が使えるっぽい。</p>
<p>機能も豊富らしいが、その分複雑なので素人には難しい、みたいな意見も見かけた。あと海外製なので日本人には英語がつらそう、と思ってたけど日本語化されてるのでそこは割とつらくないかもしれない。</p>
<p>どの程度きっちり日本語化されてるかはわからないけど、ざっくり Qiita を見た感じだと割とちゃんとされてそうな雰囲気。</p>
<p>あとは、海外製なので UI が日本人には合わない可能性はありそう。使ったことないから知らんけど。</p>
<p>機能とかとは関係ないけど、公式サイトの英語版と日本語版の違いがちょっと面白い。</p>
<h3 id="automation-anywhere-community-edition">Automation Anywhere Community Edition</h3>
<p><a href="https://www.automationanywhere.com/jp/">Automation Anywhere</a> も海外製で有名っぽいやつ。学生や開発者、或いは小規模事業者なら無償の Community Edition が使えるとのこと。クラウド型の機能とかなんだとか、結構色々な機能を使える。</p>
<p>こっちも日本語化は一応されてるが、
<a href="https://qiita.com/RPAbot/items/2a2d94eeab641dfa6516">Qiita の記事</a> を見た感じだと、英語の部分も残ってそうな雰囲気。英語となると苦しい人達には厳しいかもしれない。</p>
<p>UiPath に比べるとライセンスがちょっと厳しい印象。
<a href="https://www.automationanywhere.com/jp/community-edition-license-agreement-a2019">https://www.automationanywhere.com/jp/community-edition-license-agreement-a2019</a></p>
<p>特に利用台数が限られてるので、複数台マシンを所持していて、どっちからでも実行したい時とか、移行したい時とか困らないかなってお気持ち。</p>
<h3 id="power-automate-desktop">Power Automate Desktop</h3>
<p><a href="https://flow.microsoft.com/ja-jp/desktop/">Power Automate Desktop</a> は Microsoft が出してるやつで割と最近 Windows 10 ユーザーなら無料で使えるようになったやつ。
Power Automate シリーズの1つなので、多分、もっと便利に使いたくなった時に、そのシリーズの他の製品との連携もスムーズにできるんじゃないかなってやつ。</p>
<p>MS なので、多分息も長いし、
Windows で個人用途でデスクトップ型で構わないならまずはこれを試しておけって気がするやつ。無料なので。
MS だから Excel も当然使えるしなっ!</p>
<h3 id="automator">Automator</h3>
<p>Mac 買ったら入ってるやつですね。なので実質無料。とりあえず Mac で RPA 的なことをしたかったらこれ使ってけば良いのでは、と思ってる。</p>
<p>Excel なんかは対応してなかったりするのが微妙なところ。</p>
<h2 id="最後に">最後に</h2>
<p>個人的にはコードを書きたいので RPA あんまり入れる気がしないでござる。テスタビリティなさそうだし。
NoCode での開発ツールに対する自動テストみたいな、コード書かない縛りプレイの時に使うかも、ぐらいのお気持ち。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-cli-rails の Ember.js を 2.18 から 3.4 にアップデート</title>
            <link>https://mugijiru.github.io/posts/update-emberjs-2.18to3/</link>
            <pubDate>Sun, 04 Apr 2021 15:38:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/update-emberjs-2.18to3/</guid>
            <description>前回までで ember-rails と ember-cli-rails の共存周りを一通り済ませてそのあたりは大体満足したので次の段階である Ember.js アプリの最新化を進めていくぞい。 で、どう進めていくかと</description>
            <content type="html"><![CDATA[<p>前回までで ember-rails と ember-cli-rails の共存周りを一通り済ませてそのあたりは大体満足したので次の段階である Ember.js アプリの最新化を進めていくぞい。</p>
<p>で、どう進めていくかというと
2.18 は最新版からはかなり遠いので
3系で LTS であったバージョンを順番に適用していく方針。</p>
<p>それ以外のところだと基本的に
<a href="https://cli.emberjs.com/release/basic-use/upgrading/">https://cli.emberjs.com/release/basic-use/upgrading/</a>
に従って対応をしていく。</p>
<p>というのを実践した PR がこちらになります。
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/61">https://github.com/mugijiru/ember-rails-todo-app/pull/61</a></p>
<h2 id="ember-cli-の更新">ember-cli の更新</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/0b71b86330ab46ec8df46cdcb308daf3ed766681">https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/0b71b86330ab46ec8df46cdcb308daf3ed766681</a>
のコミットでやっていることですね。</p>
<p>まずは Dockerfile で入れている ember-cli を 2.18 から 3.4 にする。
3.4 系の最終バージョンは 3.4.4 なのでそれを指定している。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#75715e"># install ember-cli</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yarn global add ember-cli@3.4.4<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="ember-cli-update-の導入">ember-cli-update の導入</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/ded293ff2f686081549d0019e500facb5c2aaa3d">https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/ded293ff2f686081549d0019e500facb5c2aaa3d</a>
のコミットでやってることですね。</p>
<p>Ember.js をアップデートする際には ember-cli-update を使うのが王道っぽいのでそれも Dockerfile でインストールしておく。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#75715e"># install ember-cli-update</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> yarn global add ember-cli-update<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>また、こいつは今後も 3 系で更新していくにあたり必要と思われるので
ember-cli よりも先に入れておくことにする。</p>
<h2 id="bundle-and-and-yarn">bundle &amp;&amp; yarn</h2>
<p>Dockerfile を更新したので bundle install と yarn install を実行しておく。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ docker-compose run rails bundle
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ docker-compose run rails bash -c &#34;export NPM_TOKEN=XXXXXXXXXX &amp;&amp; cd ember/todo-app &amp;&amp; yarn&#34;
</code></pre></div><p>NPM_TOKEN という環境変数を使ってるのは
ember-components という自作の NPM パッケージを使うために
<a href="https://github.com/mugijiru/ember-rails-todo-app/blob/7916518d766145fc0b8d9978efbfb08d6937f813/ember/todo-app/.npmrc">.npmrc</a> で GitHub Packages を使うような設定をしているため。</p>
<h2 id="ember-cli-update-bootstrap-の実行">ember-cli-update bootstrap の実行</h2>
<p><a href="https://github.com/ember-cli/ember-cli-update/wiki/Getting-Started">https://github.com/ember-cli/ember-cli-update/wiki/Getting-Started</a> に書かれているように</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ docker-compose run rails bash -c &#34;export NPM_TOKEN=XXXXXXXXXX &amp;&amp; cd ember/todo-app &amp;&amp; ember-cli-update bootstrap&#34;
</code></pre></div><p>を実行することで config/ember-cli-update.json が生成される。
ember-cli-update は実行時にこのファイルを見て色々処理をする様子。</p>
<p>雰囲気的には Addon もこれを使って更新できそうだが、ちょっとまだ調べてない。</p>
<p>とりあえずこの実行結果をコミットしたのが以下。
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/35177e82eac6a9d490c49348ec8e50b31828bb10">https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/35177e82eac6a9d490c49348ec8e50b31828bb10</a></p>
<h2 id="ember-cli-update-で-3-dot-4-dot-4-に更新">ember-cli-update で 3.4.4 に更新</h2>
<p>いよいよアップデート作業である。とりあえず 3.4.4 に上げたいので以下のコマンドを叩く。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">% docker-compose run rails bash -c &#34;export NPM_TOKEN=XXXXXXXXXX &amp;&amp; cd ember/todo-app &amp;&amp; ember-cli-update --to 3.4.4&#34;
</code></pre></div><p>すると</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">? Blueprint updates have been found. Which one would you like to update?
&gt; app, current: 2.18.2, latest: 3.25.3
</code></pre></div><p>というように質問される。恐らく Addon も ember-cli-update で管理できるようにしていたら他の選択肢も出て来るんだろうが、とりあえず今回は app を更新したいだけなので何も考えずに Enter を叩く。</p>
<p>すると、以下のように何やらファイルが生成されたようなログが出て来る。しかも2回も生成されてる雰囲気。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">installing app
  create .editorconfig
  create .ember-cli
  create .eslintrc.js
  create .travis.yml
  create .watchmanconfig
  create README.md
  create app/app.js
  create app/components/.gitkeep
  create app/controllers/.gitkeep
  create app/helpers/.gitkeep
  create app/index.html
  create app/models/.gitkeep
  create app/resolver.js
  create app/router.js
  create app/routes/.gitkeep
  create app/styles/app.css
  create app/templates/application.hbs
  create app/templates/components/.gitkeep
  create config/environment.js
  create config/targets.js
  create ember-cli-build.js
  create .gitignore
  create package.json
  create public/robots.txt
  create testem.js
  create tests/helpers/destroy-app.js
  create tests/helpers/module-for-acceptance.js
  create tests/helpers/start-app.js
  create tests/index.html
  create tests/integration/.gitkeep
  create tests/test-helper.js
  create tests/unit/.gitkeep
  create vendor/.gitkeep
WARNING:
WARNING: The &#39;package.json&#39; file for the addon at /usr/local/share/.config/yarn/global/node_modules/ember-cli/lib/tasks/server/middleware/tests-server
WARNING:   specifies a missing dependency &#39;exists-sync&#39;
WARNING: Node v14.16.0 is not tested against Ember CLI on your platform. We recommend that you use the most-recent &#34;Active LTS&#34; version of Node.js. See https://git.io/v7S5n for details.
installing app
  create .editorconfig
  create .ember-cli
  create .eslintignore
  create .eslintrc.js
  create .template-lintrc.js
  create .travis.yml
  create .watchmanconfig
  create README.md
  create app/app.js
  create app/components/.gitkeep
  create app/controllers/.gitkeep
  create app/helpers/.gitkeep
  create app/index.html
  create app/models/.gitkeep
  create app/resolver.js
  create app/router.js
  create app/routes/.gitkeep
  create app/styles/app.css
  create app/templates/application.hbs
  create app/templates/components/.gitkeep
  create config/environment.js
  create config/optional-features.json
  create config/targets.js
  create ember-cli-build.js
  create .gitignore
  create package.json
  create public/robots.txt
  create testem.js
  create tests/helpers/.gitkeep
  create tests/index.html
  create tests/integration/.gitkeep
  create tests/test-helper.js
  create tests/unit/.gitkeep
  create vendor/.gitkeep
</code></pre></div><p>で、実行後に Ember アプリのディレクトリで <code>git status</code> を叩くと以下のような感じ。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Changes to be committed:
  (use &#34;git restore --staged &lt;file&gt;...&#34; to unstage)
        new file:   .eslintignore
        modified:   .eslintrc.js
        modified:   .gitignore
        new file:   .template-lintrc.js
        modified:   README.md
        modified:   config/ember-cli-update.json
        new file:   config/optional-features.json
        modified:   config/targets.js
        modified:   package.json
        modified:   testem.js
        new file:   tests/helpers/.gitkeep
        deleted:    tests/helpers/destroy-app.js
        deleted:    tests/helpers/module-for-acceptance.js
        deleted:    tests/helpers/start-app.js

Unmerged paths:
  (use &#34;git restore --staged &lt;file&gt;...&#34; to unstage)
  (use &#34;git add/rm &lt;file&gt;...&#34; as appropriate to mark resolution)
        deleted by us:   .travis.yml
</code></pre></div><p>.travis.yml は「どうせ使わねーだろ」ってことで自分で消してあるので改めて <code>git rm .travis.yml</code> すれば良い。</p>
<p>それ以外の変更点も、ざっと眺めた感じは、きっといい感じに 3 系に対応してくれてそうなので気にせずコミットする。適当である。</p>
<p>この実行結果のコミットは
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/c78deca904a43aa5587cf1489cabd90461469c31">https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/c78deca904a43aa5587cf1489cabd90461469c31</a>
ですね。</p>
<h2 id="古いコードを自動置き換え">古いコードを自動置き換え</h2>
<p><a href="https://cli.emberjs.com/release/basic-use/upgrading/#updatingyourcodeautomatically">https://cli.emberjs.com/release/basic-use/upgrading/#updatingyourcodeautomatically</a></p>
<p>に書かれてるように <code>ember-cli-update</code> では
<code>--run-codemods</code> オプションで実行することで古い記述を自動的に新しい書き方に直してくれるという便利機能があるので、それを実行する。後で理由を記載するが、ここでもまた NPM_TOKEN が必要になる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ docker-compose run rails bash -c &#34;export NPM_TOKEN=XXXXXXXXXX &amp;&amp; cd ember/todo-app &amp;&amp; ember-cli-update --run-codemods&#34;
</code></pre></div><p>するとまた</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">? Which blueprint would you like to run codemods for?
&gt; ember-cli
</code></pre></div><p>というように1つしかない選択肢を出される。これもまた Addon を ember-cli-update で更新管理できるようにしていたら選択肢が増えるんだろう、という推測をしてそのまま Enter を叩く。</p>
<p>すると、今度は以下のようにいくつかの選択肢が出て来る。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">? These codemods apply to your project. Select which ones to run. (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)
❯◯ ember-modules-codemod
 ◯ ember-qunit-codemod
 ◯ ember-test-helpers-codemod
 ◯ es5-getter-ember-codemod
 ◯ notify-property-change
 ◯ qunit-dom-codemod
</code></pre></div><p>それぞれ何をしてくれるかというと、多分大体以下の感じ。</p>
<dl>
<dt><a href="https://github.com/ember-codemods/ember-modules-codemod">ember-modules-codemod</a></dt>
<dd><code>import Ember from 'ember'</code> という古い記述を <code>import Component from '@ember/component'</code> とかに修正するやつ</dd>
<dt><a href="https://github.com/ember-codemods/es5-getter-ember-codemod">es5-getter-ember-codemod</a></dt>
<dd><code>obj.get('foo')</code> みたいな古い記述を <code>obj.foo</code> みたいな記述方式に変更するやつ</dd>
<dt><a href="https://github.com/ember-codemods/ember-test-helpers-codemod">ember-test-helpers-codemod</a></dt>
<dd>テスト用の記述を新しい書き方に変更するやつ</dd>
<dt><a href="https://github.com/ember-codemods/ember-qunit-codemod">ember-qunit-codemod</a></dt>
<dd>ember-qunit の moduleFor とかの書き方を新しい方式に変更するやつ</dd>
<dt><a href="https://github.com/ember-codemods/ember-3x-codemods/tree/master/transforms/notify-property-change">notify-property-change</a></dt>
<dd>notifyPropertyChange の書き方が変わる。使ったことないからよくわからん。</dd>
<dt><a href="https://github.com/simplabs/qunit-dom-codemod">qunit-dom-codemod</a></dt>
<dd>DOM 選択の記述を jQuery 依存じゃないようにするっぽい</dd>
</dl>
<p>例えばここで
ember-modules-codemod だけ選択して Enter すると何かよくわからないが NPM Package を Fetch しにいき、それが終わるとコードの自動補正が実行される。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Running codemod ember-modules-codemod
Running command 1 of 1
Skipping path addon which does not exist.
Skipping path addon-test-support which does not exist.
Skipping path test-support which does not exist.
Skipping path lib which does not exist.
Processing 11 files...
Spawning 7 workers...
Sending 2 files to free worker...
Sending 2 files to free worker...
Sending 2 files to free worker...
Sending 2 files to free worker...
Sending 2 files to free worker...
Sending 1 files to free worker...
All done.
Results:
0 errors
6 unmodified
0 skipped
5 ok
Time elapsed: 1.785seconds

Done! All uses of the Ember global have been updated.
Finished running command 1 of 1
Finished running codemod ember-modules-codemod
</code></pre></div><p>これで何が変更されているかというと
<code>git diff --cached</code> の一部を表示するとこんな感じ。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">diff --git a/ember/todo-app/app/components/todo-item.js b/ember/todo-app/app/components/todo-item.js
index bc28c83..a803fc5 100644
--- a/ember/todo-app/app/components/todo-item.js
+++ b/ember/todo-app/app/components/todo-item.js
@@ -1,12 +1,14 @@
-import Ember from &#39;ember&#39;;
+import { later } from &#39;@ember/runloop&#39;;
+import { computed } from &#39;@ember/object&#39;;
+import Component from &#39;@ember/component&#39;;

-export default Ember.Component.extend({
+export default Component.extend({
   tagName: &#39;li&#39;,
   classNames: [&#39;p-todo-item&#39;],
   classNameBindings: [&#39;isCompleted:p-todo-item__completed&#39;],

   item: null,
-  isCompleted: Ember.computed(&#39;item.isCompleted&#39;, function () {
+  isCompleted: computed(&#39;item.isCompleted&#39;, function () {
     return this.get(&#39;item.isCompleted&#39;);
   }),
</code></pre></div><p><code>import Ember from 'ember'</code> という記述はもう古いので個別に <code>import Component from '@ember/component'</code> とするような記述に変更されている感じ。</p>
<p>いい感じにコードを変更してくれることがわかったので、同じ調子で ember-qunit-codemods なども適用していく。</p>
<p>すると <code>ember-test-helpers-codemod</code> でエラーになったりするけどそもそもこのプロジェクトでは Ember.js に対する qunit でのテストをまだ書いてないので多分それが原因で単にファイルがないだけとかなので軽く無視する。</p>
<p>という感じで実際に適用して変更があったのが</p>
<ul>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/815ccd8c6d79f6e6bc6171f214f8cd375e1a6537">https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/815ccd8c6d79f6e6bc6171f214f8cd375e1a6537</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/d21b563c6352718c702f4ccd883cd780973d9982">https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/d21b563c6352718c702f4ccd883cd780973d9982</a></li>
</ul>
<p>の2つだけ。ま、複雑なことしてないしね。</p>
<h2 id="packages-の更新">packages の更新</h2>
<p><a href="#ember-cli-update-%E3%81%A7-3-dot-4-dot-4-%E3%81%AB%E6%9B%B4%E6%96%B0">ember-cli-update で 3.4.4 に更新</a> の方でやっておけば良かったんだけど、ここまでの作業で package.json は更新されてるけど実際にインストールされてるライブラリの更新はされてなかったorz</p>
<p>というわけで Ember.js アプリのディレクトリで <code>yarn</code> を叩いたら色々新しくインストールされて
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/196d9f7b389c5e2c8d690cd1e608251c69a377d2">https://github.com/mugijiru/ember-rails-todo-app/pull/61/commits/196d9f7b389c5e2c8d690cd1e608251c69a377d2</a>
みたいな感じで yarn.lock も更新されると。</p>
<h2 id="テストの実施">テストの実施</h2>
<p>まあ後はちゃんと動くよねということを確認するためにテストを実行して問題なければ OK ですと。</p>
<p>このプロジェクトだと system spec を書いているのでそれを実行した上で、念の為手でも動作確認して問題なかった、という感じ。</p>
<p>もっと複雑なケースだと色々問題あるんだろうな〜。</p>
<h2 id="問題があった場合">問題があった場合</h2>
<p>もし問題があったら、エラー内容などを確認しつつ</p>
<ul>
<li><a href="https://deprecations.emberjs.com/">Ember Deprecations</a></li>
<li><a href="https://blog.emberjs.com/tag/releases/">Ember release blog post</a></li>
</ul>
<p>と睨めっこしたら良いんだと思う。今回問題がなかったから、そのあたりの知見は得られなかったけど……。</p>
<h2 id="その他">その他</h2>
<p>実は eslint で怒られてるのはまだ無視しています。そこまで修正入れると面倒なのと、差分が大きくなるなと思って。それは別の機会に直しておきます。</p>
<h2 id="最後に">最後に</h2>
<p>とりあえず3系にするだけならそんなに難しくなさそうな所感を得た。</p>
<p>eslint で怒られてるの直す必要があるな〜というのと、
<a href="mailto:ember-components@0.0.3">ember-components@0.0.3</a> がいつから使えなくなるか気になるのと
ember-bootstrap あたりの Addon を ember-cli-update で管理できるようにしたいなという気持ちは残ったけど。</p>
<p>ま、そこもおいおい試していく</p>
]]></content>
        </item>
        
        <item>
            <title>自作の Ember.js Addon を ember-rails 用に無理やり Gem 化した</title>
            <link>https://mugijiru.github.io/posts/ember-components-addon-as-gem/</link>
            <pubDate>Fri, 26 Mar 2021 01:49:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-components-addon-as-gem/</guid>
            <description>前回の記事 で Ember.js の共通コンポーネントを詰めた Addon を NPM package にしたわけですが、今度はそいつを割と無理やり Gem 化して ember-rails でも使えるようにしたよ、というお話で</description>
            <content type="html"><![CDATA[<p><a href="/posts/my-ember-libs-to-npm/">前回の記事</a> で Ember.js の共通コンポーネントを詰めた Addon を
NPM package にしたわけですが、今度はそいつを割と無理やり Gem 化して
ember-rails でも使えるようにしたよ、というお話です。</p>
<h2 id="目的">目的</h2>
<p>Ember.js の Addon として切り出した共通コンポーネントを同一ソースで ember-rails でも使いたいな〜、使えるようにしたいな〜、という目的。</p>
<p>ほら。
ember-rails で1つの Rails アプリケーションの上に複数の Ember.js アプリを動かしていて一部ずつ ember-cli-rails 移行を進めていたらどうしても混ざる時期あるじゃないですか。</p>
<p>そういう時に共通コンポーネントは同一ソースで両方で動かせると多分便利じゃないですか。</p>
<h2 id="ember-components-の-gem-化">ember-components の Gem 化</h2>
<p>Gem にして ember-rails でも使えるようにするために色々やりました。こんなにやらないといけないのかってぐらいやった気がします。。。</p>
<h3 id="component-の書き方を古い方式に戻した">Component の書き方を古い方式に戻した</h3>
<p>ember-rails だとどうも</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Component</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;@ember/component&#39;</span>

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>({})
</code></pre></div><p>という書き方だと読み込んでくれないようなので全部以下のように書き換えている。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Ember</span> <span style="color:#a6e22e">from</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">ember</span>

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>({})
</code></pre></div><p>で、この変更を加えると eslint に怒られるので新しい記述を要求する eslint のルールをオフにしてあげる必要がある。悲しい。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">rules</span><span style="color:#f92672">:</span> {
  <span style="color:#e6db74">&#39;ember/new-module-imports&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;off&#39;</span>
},
</code></pre></div><h3 id="components-を-ember-rails-で読み込めるようにする">components を ember-rails で読み込めるようにする</h3>
<p>ember-libs というフォルダに共通コンポーネントとして分割した時も同じようなことをしたんだけど
ember-rails に components を読み込ませるためのコードをこのリポジトリに用意してある。</p>
<p><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/lib/ember/components/templates/ember-components.js">lib/ember/components/templates/ember-components.js</a></p>
<p>やってることは、
requirejs で読み込まれてるファイルを調べて component を見つけ次第
<code>application.register</code> するだけのコードである。このコードは後で利用側から実行されるようにする。</p>
<h3 id="addon-以下のファイルを-vendor-assets-以下にコピー-変更する-raketask-作成">addon 以下のファイルを vendor/assets 以下にコピー、変更する Raketask 作成</h3>
<p>ここでやってることは</p>
<ul>
<li>上で用意した ember-rails に読み込ませるためのコードをコピー。</li>
<li>Rails が読んでくれるところにファイルを置きたいのでaddon 以下のファイルを vendor/assets/javascripts 以下にコピー</li>
<li>ember-rails で module として読み込んでほしいので拡張子を <code>.module.es6</code> に変更</li>
<li><code>import layout</code> などの Addon 用記述があるとエラーになるのでそれらの記述を強制排除</li>
</ul>
<p>となっている。</p>
<p>後者2つは実装都合上、まとめてやっている</p>
<h4 id="ファイルのコピー">ファイルのコピー</h4>
<p>addon 以下に入っていても Rails 的には通常読み込めないので
<code>vendor/assets/javascripts</code> 以下にファイルをコピーしてあげている。あと上の手順で作った ember-rails に読み込ませるためのコードもコピーしている。</p>
<p><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/Rakefile#L14-L18">https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/Rakefile#L14-L18</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;vendor/assets/javascripts/ember-components&#39;</span>
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>mkdir_p(path)
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>cp(<span style="color:#e6db74">&#39;lib/ember/components/templates/ember-components.js&#39;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">#{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">.module.es6&#34;</span>)
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>cp_r(<span style="color:#e6db74">&#39;addon/templates&#39;</span>, path)
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>cp_r(<span style="color:#e6db74">&#39;addon/components&#39;</span>, path)
</code></pre></div><p>多分 <code>app/assets/javascripts</code> 以下でもいいんだろう。というかそっちの方が良さそうな気もするけど、
<code>app</code> は Ember.js 側で使っているので、それと混ざると嫌だなということで避けている。</p>
<h4 id="addon-用の記述削除-and-拡張子の変更">addon 用の記述削除 &amp; 拡張子の変更</h4>
<p>component に関しては addon での component 作成のお作法に従い
<code>import layout</code> とか書いているけど
ember-rails ではその記述はむしろ不要になるというか
hbs を import できない問題が発生するのでそれらの行を強制的に削除する処理を入れている。</p>
<p>また、それと同時に ember-rails で ES6 module として読み込めるように拡張子を <code>.module.es6</code> にしている。</p>
<p>方法としては、ファイルを <code>.js</code> から <code>.module.es6</code> にコピーしつつ不要な行を消してそれが済んだら <code>.js</code> ファイルを消すという手法を取ってる。結構、無理やり感がある。</p>
<p><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/Rakefile#L19-L33">https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/Rakefile#L19-L33</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">#{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">/components/*.js&#34;</span><span style="color:#f92672">].</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>file_path<span style="color:#f92672">|</span>
  <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>open(file_path, <span style="color:#e6db74">&#39;r&#39;</span>)
  basename <span style="color:#f92672">=</span> <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>basename(file_path, <span style="color:#e6db74">&#39;.js&#39;</span>)
  <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>open(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">#{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">/components/</span><span style="color:#e6db74">#{</span>basename<span style="color:#e6db74">}</span><span style="color:#e6db74">.module.es6&#34;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>write_f<span style="color:#f92672">|</span>
    <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>open(file_path, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>read_f<span style="color:#f92672">|</span>
      read_f<span style="color:#f92672">.</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>line<span style="color:#f92672">|</span>
        <span style="color:#66d9ef">next</span> <span style="color:#66d9ef">if</span> line <span style="color:#f92672">=~</span> <span style="color:#e6db74">/^\s*import layout/</span>
        <span style="color:#66d9ef">next</span> <span style="color:#66d9ef">if</span> line <span style="color:#f92672">=~</span> <span style="color:#e6db74">/^\s*layout,/</span>

        write_f<span style="color:#f92672">.</span>puts line
      <span style="color:#66d9ef">end</span>
    <span style="color:#66d9ef">end</span>
  <span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>rm(<span style="color:#66d9ef">Dir</span><span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">#{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">/components/*.js&#34;</span>))
</code></pre></div><h3 id="rails-engine-化">Rails Engine 化</h3>
<p>Rails Engine として組み込んで使えるように
<code>lib</code> 以下にちょろちょろコードを書いている。</p>
<ul>
<li><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/lib/ember/components.rb">lib/ember/components.rb</a></li>
<li><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/lib/ember/components/version.rb">lib/ember/components/version.rb</a></li>
<li><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/lib/ember/components/engine.rb">lib/ember/components/engine.rb</a></li>
</ul>
<p>ほとんど「Rails Engine のお作法」ってだけのコードだけど上に書いたファイルをコピーしたりする時の
PATH を取得するための便利メソッドとして以下を生やしている。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">self</span><span style="color:#f92672">.</span><span style="color:#a6e22e">root</span>
  <span style="color:#66d9ef">Pathname</span>(__FILE__)<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;../../..&#39;</span>)
<span style="color:#66d9ef">end</span>
</code></pre></div><h3 id="gemspec-修正">gemspec 修正</h3>
<p>Gem として GitHub Packages に登録するので当然 .gemspec ファイルを用意している。
<a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/ember-components.gemspec">ember-components.gemspec</a></p>
<p>一応 GitHub Packages に出すためのお作法として</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">spec<span style="color:#f92672">.</span>metadata<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;allowed_push_host&#34;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://rubygems.pkg.github.com&#34;</span>
</code></pre></div><p>というように push できるホストをしていしたり</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">spec<span style="color:#f92672">.</span>metadata<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;github_repo&#34;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ssh://github.com/mugijiru/ember-components.git&#34;</span>
spec<span style="color:#f92672">.</span>metadata<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;git_repo&#34;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ssh://github.com/mugijiru/ember-components.git&#34;</span>
</code></pre></div><p>というようにリポジトリを指定していたりする。</p>
<p><a href="https://docs.github.com/ja/packages/guides/configuring-rubygems-for-use-with-github-packages#publishing-multiple-packages-to-the-same-repository">同じリポジトリへの複数パッケージ公開</a> の記述を読む限り
github_repo だけ指定あれば良さそうな気もするが
git_repo があっても特に害もないだろうということでとりあえず入れている。</p>
<p>あとは gem に含めたいファイルとして</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">spec<span style="color:#f92672">.</span>files <span style="color:#f92672">=</span> <span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span>
  <span style="color:#e6db74">&#39;lib/**/*&#39;</span>,
  <span style="color:#e6db74">&#39;vendor/**/*&#39;</span>,
  <span style="color:#e6db74">&#39;README.md&#39;</span>,
  <span style="color:#e6db74">&#39;LICENSE.md&#39;</span>
<span style="color:#f92672">]</span>
</code></pre></div><p>としている。
lib 以下は Rails Engine として組込むために必要だし
vendor 以下には ember-rails で読み込める形に変換したファイルがあるので
gem に含める必要がある。</p>
<h3 id="github-actions-での-gem-登録">GitHub Actions での Gem 登録</h3>
<p><a href="/posts/my-ember-libs-to-npm/">NPM Package にした時</a> と同様に
Tag を打ってそれからリリースを作ったら Gem が登録されるように
GitHub Actions を設定している。</p>
<h4 id="gem-の-build">Gem の build</h4>
<p>publish する前に以下のようにして Rake Task を実行している。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build gem</span>
  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    </span>    <span style="color:#ae81ff">bundle exec rake clean_assets generate_assets build</span>
</code></pre></div><p>clean_assets は説明してなかったけど <code>vendor/assets/javascripts</code> 以下を真っ新にするだけの処理。</p>
<p>で、generate_assets が
<a href="#addon-%E4%BB%A5%E4%B8%8B%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92-vendor-assets-%E4%BB%A5%E4%B8%8B%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC-%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B-raketask-%E4%BD%9C%E6%88%90">addon 以下のファイルを vendor/assets 以下にコピー、変更する Raketask 作成</a>
のあたりで書いた、コピーしたり中身を弄ったりしている処理。</p>
<p>最後の build は Gem を作ったことある人ならわかるはずだけど
gemspec の記述に従って gem ファイルを生成する処理。これを実行する pkg 以下に <code>ember-components-x.y.z.gem</code> みたいなファイルが作られる。</p>
<h4 id="publish">Publish</h4>
<p>上の手順で gem はできたので、あとはそれを GitHub Packages に登録するだけである。そのための step が以下。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Publish to RubyGems</span>
  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    mkdir -p $HOME/.gem
</span><span style="color:#e6db74">    touch $HOME/.gem/credentials
</span><span style="color:#e6db74">    chmod 0600 $HOME/.gem/credentials
</span><span style="color:#e6db74">    printf -- &#34;---\n:github: Bearer ${{ secrets.GITHUB_TOKEN }}\n&#34; &gt; $HOME/.gem/credentials
</span><span style="color:#e6db74">    gem push --key github --host https://rubygems.pkg.github.com/mugijiru pkg/*.gem</span>    
</code></pre></div><p>まずは <a href="https://docs.github.com/en/packages/guides/configuring-rubygems-for-use-with-github-packages#authenticating-with-a-personal-access-token">Authenticating with a personal access token</a> の手順に従って
<code>~.gem/credentials</code> に
<code>github: Bearer ${{ secrets.GITHUB_TOKEN }}</code>
の記述が入るようにしている。</p>
<p>それをすると GitHub Packages の認証が通るようになるので</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">gem push --key github --host https://rubygems.pkg.github.com/mugijiru pkg/*.gem
</code></pre></div><p>を実行することで Gem として登録ができる。</p>
<h2 id="ember-rails-アプリケーションから-gem-化した-addon-の読み込んで利用する">ember-rails アプリケーションから Gem 化した Addon の読み込んで利用する</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/51">https://github.com/mugijiru/ember-rails-todo-app/pull/51</a>
の PR でやっていることである。</p>
<p>PR では途中色々ごちゃごちゃやってるけど、ここでは最終結果に基いて説明をする。</p>
<h3 id="gem-を-bundle-install-できるようにする">Gem を bundle install できるようにする</h3>
<p>まずは bundle install で組込めないと何も始まらないので
Gemfile に以下を追加する。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">source <span style="color:#e6db74">&#34;https://rubygems.pkg.github.com/mugijiru&#34;</span> <span style="color:#66d9ef">do</span>
  gem <span style="color:#e6db74">&#34;ember-components&#34;</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><p>さらに手元のマシンで以下のコマンドを実行して、
bundle install の際に GitHub Packages への認証が通るようにする。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ bundle config --local https://rubygems.pkg.github.com/mugijiru mugijiru:XXXXXX
</code></pre></div><p><code>XXXXXX</code> には Gem をインストールできるパーソナルアクセストークンを設定すること。</p>
<p>こうしておけば</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ bundle install
</code></pre></div><p>で無事に自作 Gem の ember-components がインストールできる</p>
<p>Docker を使ってる場合は以下のようにして
Docker 内で bundle config が設定された状態で <code>bundle</code> を実行する必要あり</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ docker-compose run rails bash -c &#34;bundle config --local https://rubygems.pkg.github.com/mugijiru mugijiru:XXXXXX &amp;&amp; bundle&#34;
</code></pre></div><h3 id="templates-root-への登録">templates_root への登録</h3>
<p>ember-rails は Rails 側で templates_root を設定してあげる必要がある。</p>
<p>というわけで config/application.rb で
<code>ember-components/templates</code> が templates_root として認識されるように記述する。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">config<span style="color:#f92672">.</span>handlebars<span style="color:#f92672">.</span>templates_root <span style="color:#f92672">=</span> <span style="color:#e6db74">%w[todo-app/templates ember-components/templates]</span>
</code></pre></div><h3 id="sprockets-で-ember-rails-を読み込む">sprockets で ember-rails を読み込む</h3>
<p>Gem として読み込めるようになったので
Sprockets で以下のようにして require してあげると
Gem の <code>vendor/assets/javascrips/ember-components</code> に生成したファイルが
ember-rails アプリ側で認識されるようになる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//= require ember-components
</span></code></pre></div><h3 id="ember-dot-js-に-component-を-register-する">Ember.js に component を register する</h3>
<p>require するだけだと Ember.js ではまだ使えないので
Gem 内の Componentを登録する必要がある。</p>
<p>が、基本的な処理は
<a href="#components-%E3%82%92-ember-rails-%E3%81%A7%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%81%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">components を ember-rails で読み込めるようにする</a> のところで書いたので、
ember-rails 側では initializers に以下のような内容のファイルを置けば良い。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">EmberComponents</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember-components&#39;</span>;

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">initialize</span>(<span style="color:#a6e22e">application</span>) {
  <span style="color:#a6e22e">EmberComponents</span>.<span style="color:#a6e22e">registerAll</span>(<span style="color:#a6e22e">application</span>);
}

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> {
  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;register-ember-components&#39;</span>,
  <span style="color:#a6e22e">initialize</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">initialize</span>
};
</code></pre></div><p>実質的にやってることは
Gem 内のスクリプトに定義している registerAll メソッドを叩いているだけ。</p>
<p>本当はこういう処理すらなしに使えるのがベストだけどそこまでうまくやる方法は見つけられず……。</p>
<h3 id="利用箇所の修正">利用箇所の修正</h3>
<p>これは component の prefix を <code>my-</code> から <code>mg-</code> に変えたから発生している作業なので本質的には不要な作業。</p>
<p>とにかく <code>my-button</code> のような古い prefix になっているところを
<code>mg-button</code> というように新しい prefix に置き換えるだけの簡単なお仕事。</p>
<h3 id="github-actions-の修正">GitHub Actions の修正</h3>
<h4 id="setup-ruby-で-ember-components-を-bundle-install-できるようにする">setup-ruby で ember-components を bundle install できるようにする</h4>
<p>GitHub Actions の CI でも bundle install をしているのでそこでもインストールが正常に行われるようにしてあげないといけない。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">ruby/setup-ruby@v1</span>
  <span style="color:#f92672">env</span>:
    <span style="color:#f92672">BUNDLE_HTTPS://RUBYGEMS__PKG__GITHUB__COM/MUGIJIRU/</span>: <span style="color:#e6db74">&#34;mugijiru:${{ secrets.NPM_AUTH_TOKEN }}&#34;</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">bundler-cache</span>: <span style="color:#66d9ef">true</span>
</code></pre></div><p>のように <code>bundle config</code> で設定したのと同じようなものを
env で設定してあげるとインストールができる。</p>
<p>NPM_AUTH_TOKEN なのは、NPM Package にした時に使ったやつが丁度いいスコープを持っていたから流用しちゃった。てへぺろっ。</p>
<h4 id="assets-precompile">assets:precompile</h4>
<p>Gem の作りが悪いのか、
rspec を流す前に</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ bin/rails assets:precompile
</code></pre></div><p>を流さないと component の template がテスト環境でで読まれない。というわけで GitHub Actions で rspec を実行する前にその手順を挟んでいる。</p>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/blob/4acafe0fd741fd24dc4e6bc69d98df5cbb68ef0e/.github/workflows/ci.yml#L32">https://github.com/mugijiru/ember-rails-todo-app/blob/4acafe0fd741fd24dc4e6bc69d98df5cbb68ef0e/.github/workflows/ci.yml#L32</a></p>
<p>ちなみにこれは手元で rspec を流す時も同じなのでちゃんと手元のマシンでも precompile してあげましょう。だるい。</p>
<h3 id="旧共通ライブラリの削除">旧共通ライブラリの削除</h3>
<p><code>app/assets/javascripts/ember-libs</code> に配置していたファイルは不要なのでさっくりと</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ rm -rf app/assets/javascripts/ember-libs
</code></pre></div><p>して</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//= require_tree ../ember-libs
</span></code></pre></div><p>としている行が残っていればそれも削除すること。</p>
<p><code>config/application.rb</code> で templates_root として
<code>ember-libs/templates</code> を追加している場合はそれも削除しておくこと。まあこれは残っててもエラーにならないけどね。</p>
<h2 id="旧スタイルの-ember-rails-アプリケーションでも-gem-化-addon-を利用する">旧スタイルの ember-rails アプリケーションでも Gem 化 Addon を利用する</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/52">https://github.com/mugijiru/ember-rails-todo-app/pull/52</a>
でやっていること。</p>
<p>まあ正直 module 化しているやつとほとんどやってることは変わらない。</p>
<p>変わってる点は、registerAll の呼び出し方ぐらいで
TodoApp という Ember.js アプリケーションが入ってる変数がグローバル空間に収まっているので
application.js.es6 の方で直接以下のように書いている。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">EmberComponents</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember-components&#39;</span>;
<span style="color:#a6e22e">EmberComponents</span>.<span style="color:#a6e22e">registerAll</span>(<span style="color:#a6e22e">TodoApp</span>);
</code></pre></div><p>他は module 化しているパターンと一緒なので割愛。</p>
<h2 id="最後に">最後に</h2>
<p>という手順で
NPM Package にした Ember.js Addon を若干無理やりながらも ember-rails で使えるようにすることができました。</p>
<p>まあ mixin とかは試してないのと
Component をサブフォルダに分割していたりするともうちょっと手をかけないといけなさそうだけどとりあえず動いたから許して。</p>
<p>正直、無理やり感が結構あるので普通のプロダクトに適用するのは厳しい感じある。</p>
]]></content>
        </item>
        
        <item>
            <title>Ember.js の共通コンポーネントの NPM への分離</title>
            <link>https://mugijiru.github.io/posts/my-ember-libs-to-npm/</link>
            <pubDate>Wed, 24 Mar 2021 13:04:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/my-ember-libs-to-npm/</guid>
            <description>相変わらず Rails における Ember.js 関連で遊んでいます。 今回の記事で書くのは「Ember.js Addon を別リポジトリに分離して NPM パッケージにして利用する」なんだ</description>
            <content type="html"><![CDATA[<p>相変わらず Rails における Ember.js 関連で遊んでいます。</p>
<p>今回の記事で書くのは「Ember.js Addon を別リポジトリに分離して NPM パッケージにして利用する」なんだけど、後追いで出す「分離したリポジトリを Gem としても使えるようにし ember-rails 環境で動かす」という感じに記事の前振りです。</p>
<p>本当は1つの記事にしたかったけど記述量が増えたから分割……。</p>
<h2 id="目的">目的</h2>
<p>なんでこんなことをしているかというと「単一ソースで ember-cli にも ember-rails にも対応したい」「じゃあ NPM と Gem で公開してインスコしたらいいんじゃね」という考えから。</p>
<p>というのも、この一連の記事は ember-rails から ember-cli-rails に徐々に移行していく手段を確立することが目的なので、
1つの Rails の中に複数の Ember.js アプリがあって
ember-rails と ember-cli-rails が混在している状況も有り得るかなあと。</p>
<p>そういう時に、共通コンポーネントは単一ソースで使いたいよね〜と思って両対応ができるようにしてみている。</p>
<p>まあ今回は ember-cli-rails だけの対応なんだけども。</p>
<h2 id="実践">実践</h2>
<p>ember-cli-rails に移行した時に元々 <code>RAILS_ROOT/app/assets/javascripts/ember-libs</code> というところに共通コンポーネントとして置いていたファイル群を
<code>RAILS_ROOT/ember/my-components</code> というところに
Ember.js のアドオンという形で設置していました。</p>
<p>正直そのままの方が、同一リポジトリなので改修とかしやすいんだけど「他のプロジェクトでも使いたい」といった時には分離も必要になるかなと。まあ今回の目的は別のところにあるけども。</p>
<h3 id="従来の実装を-ember-components-に移植">従来の実装を ember-components に移植</h3>
<p><a href="https://github.com/mugijiru/ember-components/commit/847981e9732385d08db4f5f703813196622b80d2">https://github.com/mugijiru/ember-components/commit/847981e9732385d08db4f5f703813196622b80d2</a></p>
<p>でやっていること。</p>
<p>基本的には、元々のソースを addons 以下に置いているだけ。なんとなく、コンポーネントの prefix を my- から mg- に変えてるけど。</p>
<p>あとは ember-cli-htmlbars を dependencies にも移動する必要あり。</p>
<p><a href="https://github.com/mugijiru/ember-components/commit/922d1f7ed5f6b3372b1d1551792f4e9739f5b1e3">https://github.com/mugijiru/ember-components/commit/922d1f7ed5f6b3372b1d1551792f4e9739f5b1e3</a></p>
<p>他にも <a href="https://github.com/mugijiru/ember-components/commit/30b3257227dab623c86dedfab032b85f32414e42">Docker で動かせるようにしたり</a>
<a href="https://github.com/mugijiru/ember-components/commit/34e81e2905e32dd2878b95fb9d5c7eb3b3a0b463">GitHub Actions でテストできるようにしたり</a>
ちょっと細かい修正をしたりしている。</p>
<p>ここまでの差分は
<a href="https://github.com/mugijiru/ember-components/compare/bbaf38aa0f6c99ebbc7e0cb7ee5ac2c201706bc6...34e81e2905e32dd2878b95fb9d5c7eb3b3a0b463">https://github.com/mugijiru/ember-components/compare/bbaf38aa0f6c99ebbc7e0cb7ee5ac2c201706bc6...34e81e2905e32dd2878b95fb9d5c7eb3b3a0b463</a>
で確認可能。</p>
<h3 id="github-packages-の-npm-package-の公開">GitHub Packages の NPM Package の公開</h3>
<p>まず <a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages#publishing-a-package">パッケージを公開する</a> に従って以下の変更をしている。</p>
<p>パッケージ名を <code>@mugijiru/ember-components</code> にしたり、</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;name&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;@mugijiru/ember-components&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>publishConfig の registry に GitHub Packages の URL を入れることでそこで公開できるようにしている。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;publishConfig&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;access&#34;</span>: <span style="color:#e6db74">&#34;restricted&#34;</span>,
  <span style="color:#f92672">&#34;registry&#34;</span>: <span style="color:#e6db74">&#34;https://npm.pkg.github.com&#34;</span>
}<span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>access は GitHub 側の記載は何もないが
<a href="https://tech.plaid.co.jp/npm-private-registry-to-github-packages-registry/">https://tech.plaid.co.jp/npm-private-registry-to-github-packages-registry/</a>
を参考にして restricted にすることで、許可された人だけが使えるようにしている。</p>
<p>今は公開リポジトリにしているから public でもいい気もするけど、実装当時はより業務でやりそうな雰囲気にしたかったので、非公開リポジトリかつ限定的な公開で進めていたので、このようになっている。</p>
<p>さらに、今後 GitHub Packages に複数パッケージ公開するかもしれないので
<a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages#publishing-multiple-packages-to-the-same-repository">同じリポジトリへの複数パッケージの公開</a> に従って registory を指定したりしている</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;repository&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;git://github.com/mugijiru/ember-components.git&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>その上で
<a href="https://github.com/mugijiru/ember-components/blob/main/.github/workflows/release.yml">https://github.com/mugijiru/ember-components/blob/main/.github/workflows/release.yml</a>
のようなワークフローを用意すると
Tag を打って push して
GitHub 上でそのタグを使って Release を作成すると
NPM Package として公開されるようになっている。</p>
<p>上にも出した <a href="https://tech.plaid.co.jp/npm-private-registry-to-github-packages-registry/">https://tech.plaid.co.jp/npm-private-registry-to-github-packages-registry/</a> を真似するともっとスマートな感じになりそうだけど、一旦これでいいやってなってる。</p>
<h3 id="公開したパッケージを利用する">公開したパッケージを利用する</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/48">https://github.com/mugijiru/ember-rails-todo-app/pull/48</a> の PR でやったこと。</p>
<p>元々は <code>RAILS_ROOT/ember/my-components</code> に置いていたやつを NPM Package にしているので
my-components 関連のやつをさっくり消してあげている。</p>
<p>具体的には <code>ember/my-components</code> は全部消して
package.json の devDependencies に入れていた
<code>&quot;my-components&quot;: &quot;link:../my-components&quot;</code> を削除している。</p>
<p>今思ったけどこれ devDependencies だと多分 production 環境だと動かなかったな。まあ 2.18 なので公開する気がゼロだったからすっかり気付かなかったんだけど。</p>
<p>まあそれは置いといて公開したパッケージを入れるため dependencies に以下のように記述する。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;dependencies&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;@mugijiru/ember-components&#34;</span>: <span style="color:#e6db74">&#34;^0.0.1&#34;</span>
}<span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>あとはプライベートなパッケージを入れられるように
<code>RAILS_ROOT/ember/todo-app/.npmrc</code> に以下のような設定を入れている。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">@mugijiru:registry=https://npm.pkg.github.com
</code></pre></div><p>この設定は <a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages#installing-a-package">パッケージをインストールする</a> の通りだとなんかうまく動かなかったので
<a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages#installing-packages-from-other-organizations">他のOrganizationからのパッケージのインストール</a> のやり方を採用している。あとでまた検証した方がいいかもなあ。。。</p>
<p>それと <a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages">GitHub Packages への認証を行う</a> に従って</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">//npm.pkg.github.com/:_authToken=${NPM_TOKEN}
</code></pre></div><p>としている。
NPM_TOKEN には GitHub のパーソナルアクセストークンが入るので環境変数にしている。</p>
<p>なので GitHub Actions で CI を回す際のパッケージのインストール時に</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">env</span>:
  <span style="color:#f92672">NPM_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.NPM_AUTH_TOKEN }}</span>
</code></pre></div><p>みたいに環境変数に PAT を入れてあげる必要あり。</p>
<p>他には、これまた公開したパッケージを使う上で本質的ではないんだけど、移植した際に <code>my-button</code> から <code>mg-button</code> みたいに全部
<code>my-</code> prefix だったのを <code>mg-</code> prefix にしているので利用箇所でそれらの修正の必要あり。命名を適当にやってたのでここでそれが仇になってる。つらい。</p>
<p>以上で GitHub Packages に NPM として公開した Ember.js の Addon を
ember-cli-rails で使えるようになりますよっと。正直 NPM とかに慣れてる人ならさっくりできそうな内容。。。</p>
<p>まあ Ember.js の Addon も実際は NPM Package なので普通に NPM Package として公開するだけで使えたりするってだけですね。
.ember-cli-build.js を活用したらまたちょっと話は違うはずだけど今回のはそこまでのやつじゃないし……。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails から ember-cli-rails へ</title>
            <link>https://mugijiru.github.io/posts/migrate-ember-rails-to-ember-cli-rails/</link>
            <pubDate>Sat, 06 Mar 2021 17:05:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/migrate-ember-rails-to-ember-cli-rails/</guid>
            <description>Ember.js 関係で最も書きたかった記事にやっと辿り着いた。表題の通りで、 ember-rails から ember-cli-rails に置き換える、という記事です。多分長くなる。 やったことはいつも通り GitHub の</description>
            <content type="html"><![CDATA[<p>Ember.js 関係で最も書きたかった記事にやっと辿り着いた。表題の通りで、
ember-rails から ember-cli-rails に置き換える、という記事です。多分長くなる。</p>
<p>やったことはいつも通り <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18">GitHub の PR</a> にしています。</p>
<p>PR の Description で「Rails 側ではこうした」「Ember 側ではこうした」みたいに書いているのでここではある程度時系列に沿ったような書き方にしようかな。</p>
<p>完全に時系列通りには書かないので、正確な時系列でどうしたか知りたかったら PR のコミットログを追ってください</p>
<h2 id="アプリの前提">アプリの前提</h2>
<p>これまで作って来た <a href="https://github.com/mugijiru/ember-rails-todo-app">https://github.com/mugijiru/ember-rails-todo-app</a> が前提になります。ざっくり内容を書くと</p>
<ul>
<li>ember-rails で Ember.js 2.18 の環境を動かしている</li>
<li>Sprockets での ES6 Module 対応済</li>
<li>現実世界の複雑さを持ち込むために敢えて以下の手法を導入
<ul>
<li>Embedded Ember App</li>
<li>Multiple で動かせる構成</li>
<li>一部コンポーネントの共通ライブラリ化
<ul>
<li>ember-libs という名前で別フォルダに切り出している</li>
</ul>
</li>
<li>Bootstrap の利用</li>
</ul>
</li>
<li>複雑さでは以下もありうるが面倒などの理由でやってない
<ul>
<li>i18n.js での多言語対応</li>
<li>コンポーネント以外の共通ライブラリ化</li>
</ul>
</li>
</ul>
<p>という感じ。</p>
<h2 id="ember-rails-用の-js-のコードが読まれないようにコメントアウト">ember-rails 用の JS のコードが読まれないようにコメントアウト</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/8dd44540bd7d352e497f87a9a12df5ad3cf6efbb">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/8dd44540bd7d352e497f87a9a12df5ad3cf6efbb</a>
のあたりのコミット。</p>
<p>本当は後からやった手順だけど、ここで読まれてるコードが邪魔になるので先にコメントアウトしておく方が後の手順でハマらなくて済むのでここに置いといた。</p>
<p>まあ実は ember-cli-rails のアプリが読まれるところで
ember-rails が require されてなければいいだけなので
application.js で require_tree とかをしなければ良かったりはする。</p>
<h2 id="docker-環境への-ember-cli-の導入">Docker 環境への ember-cli の導入</h2>
<p>Docker でアプリが動くようにしているので、
ember-cli も Docker で動くようにしている。</p>
<h3 id="docker-で最新-lts-の-node-dot-js-が使われるように設定">Docker で最新 LTS の Node.js が使われるように設定</h3>
<p>ember-cli と直接は関係ないけど、Node.js は入れる必要があるのでやってる手順。</p>
<p>とりあえず最新の LTS を入れておく。
Ubuntu で普通に apt から入れると 10 系が入っちゃうので
yarn の apt リポジトリを登録してそこからインストールする。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">RUN</span> curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;deb https://dl.yarnpkg.com/debian/ stable main&#34;</span> | tee /etc/apt/sources.list.d/yarn.list<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update -qq <span style="color:#f92672">&amp;&amp;</span> apt-get install -y nodejs yarn<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h3 id="ember-cli-を-global-に導入">ember-cli を Global に導入</h3>
<p>ember-rails で動いているアプリは Ember.js 2.18.2 で動いているので
ember-cli も 2.18.2 を導入する。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">RUN</span> yarn global add ember-cli@2.18.2<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="アプリの初期構築">アプリの初期構築</h2>
<p>上記手順で導入した ember-cli を使って改めて Ember.js アプリを構築する。ゼロから作っておく方が、より ember-cli-rails に向いた形になるとの判断。</p>
<h3 id="ember-cli-で移植先のアプリの雛形を構築">ember-cli で移植先のアプリの雛形を構築</h3>
<p><code>RAILS_ROOT/ember/todo-app</code> に構築する。</p>
<p>ember-cli-rails の README だと <code>RAILS_ROOT/frontend</code> に構築するように書かれているが、複数の Ember.js アプリを平等に扱える形にしたいのと
Ember.js アプリのコード置場を <code>RAILS_ROOT/frontend</code> にしていると
Ember.js から別のフレームワークに差し替えが決まって、その移行作業をしている間に</p>
<ul>
<li>frontend に新しいフレームワークで構築しようと思ったら既に Ember.js がいた</li>
<li>新しいフレームワークでの実装を修正しようと思って frontend 以下を探していて時間を潰した</li>
</ul>
<p>ということが起こりそうなので、フレームワーク名は明示しておきたいお気持ち。というわけで <code>ember</code> というフォルダの下に更にフォルダを掘っているが、この考え方、あまり合意を得られた試しはない。みんな移行は発生しないつもりなのかな。</p>
<p>ま、とりあえず以下のコマンドを実行したら <code>RAILS_ROOT/ember/todo-app</code> に雛形が作成される。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ ember new todo-app --no-welcome --skip-git --yarn --dir ember/todo-app
</code></pre></div><p>なお、面倒なので <code>docker-compose run</code> とかは省略している。ここより下の部分でも同様に省略しているので、そのあたりは読みながら脳内で補完とかしてください。</p>
<h4 id="オプションについて">オプションについて</h4>
<dl>
<dt><code>--no-welcome</code></dt>
<dd>どうせ後で消すファイルが作られるだけなので出す必要なし</dd>
<dt><code>--skip-git</code></dt>
<dd>Rails アプリと同じリポジトリに作るので git init は不要</dd>
<dt><code>--yarn</code></dt>
<dd>yarn を使い慣れてるからそれを指定。ただ <code>yarn link</code> に問題があるから <code>npm</code> を使う方がいいかも?</dd>
<dt><code>--dir ember/todo-app</code></dt>
<dd>ember というフォルダの中に構築するので指定する必要あり</dd>
</dl>
<h3 id="ember-cli-rails-addon-の導入">ember-cli-rails-addon の導入</h3>
<p>ember-cli-rails と連携して ember-cli app を動かす時には
ember-cli app 側に <a href="https://github.com/rondale-sc/ember-cli-rails-addon">ember-cli-rails-addon</a> を入れておく必要があるので、早い段階で追加しておく</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember/todo-app &amp;&amp; ember install ember-cli-rails-addon
</code></pre></div><p>これを入れておくと CSRF Token のことを意識しないで済むし、ファイルを更新するだけで Rails から読めるように Ember.js app を build してくれたりする。というか、入れてないとそれらがうまく動かなくてハマる。</p>
<h3 id="active-model-adapter-の導入">active-model-adapter の導入</h3>
<p><a href="https://github.com/ember-data/active-model-adapter">active-model-adapter</a> は
ActiveModelSerializer の出力をいい感じに Ember.js で扱えるようにする Addon で
ember-rails でも使われている。</p>
<p>というわけでこいつも Rails でいい感じに Ember.js を使うためには必要なので先に入れておく</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember/todo-app &amp;&amp; ember install active-model-adapter
</code></pre></div><h2 id="ember-cli-rails-の導入と設定">ember-cli-rails の導入と設定</h2>
<p>ここは Rails 側の作業。ひとまず ember-cli-rails の導入に留め、
ember-rails は一旦そのままにしておく。</p>
<h3 id="ember-cli-rails-の導入">ember-cli-rails の導入</h3>
<p>これは単に Gemfile に記載して <code>bundle install</code> を叩くだけである</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">gem <span style="color:#e6db74">&#39;ember-cli-rails&#39;</span>
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ bundle
</code></pre></div><h3 id="config-initializers-ember-dot-rb-で-ember-rails-の設定">config/initializers/ember.rb で ember-rails の設定</h3>
<p>ember-cli-rails で generate コマンドが用意されているのでまずはそれでファイルを生成する</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ rails generate ember:init
</code></pre></div><p>これで <code>config/initializers/ember.rb</code> が作られるの。初期状態は以下の通り。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">EmberCli</span><span style="color:#f92672">.</span>configure <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>c<span style="color:#f92672">|</span>
  c<span style="color:#f92672">.</span>app <span style="color:#e6db74">:frontend</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><p>それに変更を加えて、以下のようにする</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">EmberCli</span><span style="color:#f92672">.</span>configure <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>c<span style="color:#f92672">|</span>
  c<span style="color:#f92672">.</span>app <span style="color:#e6db74">:todo_app</span>, name: <span style="color:#e6db74">&#39;todo-app&#39;</span>, <span style="color:#e6db74">path</span>: <span style="color:#66d9ef">Rails</span><span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;ember&#39;</span>, <span style="color:#e6db74">&#39;todo-app&#39;</span>), <span style="color:#e6db74">yarn</span>: <span style="color:#66d9ef">true</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><h4 id="引数について">引数について</h4>
<dl>
<dt>第一引数</dt>
<dd>あとで mount する時に使う値</dd>
<dt>name</dt>
<dd>ハイフン繋ぎにしたかったので指定しているが、多分なんでもいい</dd>
<dt>path</dt>
<dd><code>ember/todo-app</code> に構築しているのでそれを見てもらえるように指定</dd>
<dt>yarn</dt>
<dd>yarn を使い慣れてるので指定。ただ yarn link がうまく動かないのでやめた方がいいかも</dd>
</dl>
<h3 id="config-routes-dot-rb-で-ember-dot-js-app-を-mount">config/routes.rb で Ember.js App を Mount</h3>
<p>Embedded Ember.js App というわけで
Controller を自前で用意するので、contoller としてそれを指定する。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">mount_ember_app <span style="color:#e6db74">:todo_app</span>, <span style="color:#e6db74">to</span>: <span style="color:#e6db74">&#39;/ember_cli_todo_items&#39;</span>, <span style="color:#e6db74">controller</span>: <span style="color:#e6db74">&#39;ember_cli_todo_items&#39;</span>, <span style="color:#e6db74">action</span>: <span style="color:#e6db74">&#39;index&#39;</span>
</code></pre></div><h3 id="controller-等の用意">Controller 等の用意</h3>
<p>移植途中で元のアプリに戻せなくなるのは移行失敗時のリカバリを考えると嫌なのと元の挙動を確認したくなった時のために元の PATH で動く状態にすぐ戻せるようにしておきたい。というわけで別の PATH を用意して、ember-cli で構築したアプリはそこで動くようにする。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ rails g controller ember_cli_todo_items index
</code></pre></div><p>あとは ember-rails 実装での Controller, View を参考にしたりして以下の感じに。</p>
<h4 id="controller">Controller</h4>
<p>特にサーバから何かを View に渡す必要はないので基本的に空っぽ。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">EmberCliTodoItemsController</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ApplicationController</span>
  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">index</span>
  <span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><h4 id="view">View</h4>
<p>rootElement を用意して、そこに initializer に渡す data 属性を置いておく。</p>
<p>さらに ember-cli で生成する JS/CSS が読まれるように設定する。
(今回 CSS は書かないけど……)</p>
<pre tabindex="0"><code class="language-haml" data-lang="haml">#ember-cli-todo-app{ data: { email: current_user.email } }

%base{ href: '/ember_cli_todo_items/' }
= include_ember_script_tags :todo_app
= include_ember_stylesheet_tags :todo_app
</code></pre><p><code>%base</code> は Ember.js のアプリケーションを動かす PATH に合わせる必要があるのと最後の <code>/</code> が抜けていると script や stylesheet で正しく PATH 解決できないので注意。</p>
<p><a href="https://github.com/seanpdoyle/ember-cli-rails-assets">ember-cli-rails-assets</a> の README を見ていると
include_ember_script_tags とかに追加の引数で
<code>prepend: '/ember_cli_todo_items/'</code> とか書いていれば <code>%base</code> は使わなくて良さそうだけどまだ試してはいない</p>
<h2 id="ember-cli-で作ったアプリが-rails-上で動くようにする">ember-cli で作ったアプリが Rails 上で動くようにする</h2>
<p>Rails 側の設定はここまでで完了しているはずなので次は ember-cli 側の設定を進めて Rails 上で動くようにしていく。</p>
<h3 id="config-environement-dot-js-の設定">config/environement.js の設定</h3>
<p>まず config/environment.js で以下を指定している</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">modulePrefix</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;todo-app&#39;</span>,
<span style="color:#a6e22e">rootURL</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;/&#39;</span>,
<span style="color:#a6e22e">locationType</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;hash&#39;</span>,
</code></pre></div><p>rootURL は ember-cli-rails の README 通りに設定していると
<code>/ember_cli_todo_app</code> になりそうだがそれを指定すると Ember.js App が読まれた時に URL が
<code>http://localhost:3000/ember_cli_todo_app/ember_cli_todo_app</code> というように
<code>ember_cli_todo_app</code> が二重に表示されてしまう。</p>
<p>ちゃんと調べられていないが、恐らく README の記載では SPA として Ember が動く想定であって、
<code>include_ember_script_tags</code> で読み込まれる Embedded App という想定ではないからと思われる。</p>
<p>locationType は多分 hash にしておく方が
ember-rails からの移行だと URL が変わらなくて良さそう、と思いつつ、深い PATH とかにしてないからか検証はできてない</p>
<h3 id="app-dot-js-の設定">app.js の設定</h3>
<p>あとは app.js の方でも config/environemt から読むようにしたり
rootElement を指定したりしている。</p>
<p>rootElement は config/environment で指定して、
app.js ではそれを利用するのが正しい気はするが、一旦放置。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">TodoApp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Application</span>.<span style="color:#a6e22e">extend</span>({
  <span style="color:#a6e22e">rootElement</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#todo-app&#39;</span>,
  <span style="color:#a6e22e">modulePrefix</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">modulePrefix</span>,
  <span style="color:#a6e22e">podModulePrefix</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">podModulePrefix</span>,
  <span style="color:#a6e22e">locationType</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">locationType</span>,
  <span style="color:#a6e22e">rootUrl</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">rootUrl</span>,
  <span style="color:#a6e22e">Resolver</span>
});
</code></pre></div><h2 id="アプリの移植">アプリの移植</h2>
<p>これまでの手順ではとりあえず ember-cli で構築した空っぽの Ember.js アプリが
Rails の指定した PATH 上でとりあえず動くことを主眼に当ててやってきている。</p>
<p>ここからはようやく、既存アプリの実装の移植。いくつかの段階に分かれるから、ここからも長いんだけどね。</p>
<h3 id="共通化してない機能のみで起動するようにする">共通化してない機能のみで起動するようにする</h3>
<p>ember-libs というフォルダに切り出している部分までまとめて対応しようとするとえらく面倒なので、そのあたりを呼び出している部分はコメントアウトなどで呼び出されないようにして、とりあえず最低限の表示がされる程度を目指して移植するフェーズ。</p>
<p>やってることは
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/3c31b5bcf86d68ac5db0eca9bb4af410df31c2f1">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/3c31b5bcf86d68ac5db0eca9bb4af410df31c2f1</a>
のコミットが全てである。</p>
<p>ざっくり説明すると</p>
<ul>
<li>ember-rails で作っていた adapter, component, controller, initializer, model, route, template 等を ember-cli で作ったアプリの適切なディレクトリに配置
<ul>
<li>router.js は ember-cli 自動生成の雛形に必要な部分だけ移植している</li>
<li>adapter は ActiveModelAdapter を active-model-adapter addon から import するように変更している</li>
</ul>
</li>
<li>共通ライブラリに持って行った component の呼び出し部分をコメントアウト</li>
</ul>
<p>という感じ。これをすることで、不完全ながらも元のアプリと同じものが動くようになる</p>
<p>ちなみにもっと複雑なアプリだと mixin を使っていたりなどするがそれもテキトーに読み込まれないようにするなどで対処したらなんとなーく動く感じになるはず。なんとなーく。</p>
<p>そうそう。ember-cli 対応することで各ファイルの単体テストなんかを書けるようになってるはずだけど元々そんなものを書いてないので、今回もそこまで頑張る必要はないと判断してフロントエンドのテストは一切書いていません。自動生成されたファイルはそのまま追加しているけど。</p>
<p>一応、動作保証は system spec である程度担保しているつもり。
ember-rails の時はそこでしか保証してないしね。</p>
<h3 id="共通ライブラリの-addon-化">共通ライブラリの Addon 化</h3>
<p>上までの段階だと共通ライブラリにした部分が全然動かないので、当然それを動く状態に持って行く必要がある。</p>
<p>で、その際には、共通ライブラリを addon として構築し直すことをオススメする。なぜなら、なんか無理やり自前の仕組みで動くようにするより公式に提供されてる仕組みに乗っかる方が後々楽そうだからだ。</p>
<p>ember-rails で動かしていた時に自前で解決していたのは
ember-rails だと addon がサポートされてないからというだけの理由だしね。</p>
<p>Addon 化の手順は大体以下の感じ</p>
<ol>
<li>ember-cli で Addon を generate</li>
<li>共通ライブラリのコンポーネントを Addon に移植
<ul>
<li>もし共通ライブラリに mixin とかも作っていたら同様に移植すること</li>
</ul>
</li>
<li>Addon をアプリ側で使えるように変更</li>
</ol>
<p>なお今回の手順では App と同様に Addon のテストを書く、みたいな丁寧な暮らしはしていない。元々書いてないんだし、そこまで頑張る必要もないという判断。</p>
<p>あとやってることは <a href="https://cli.emberjs.com/release/writing-addons/intro-tutorial/">Addon 作成のチュートリアル</a> に書いていることをベースにしている</p>
<h4 id="ember-cli-で-addon-を-generate">ember-cli で Addon を generate</h4>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/4d6713abfbed3217d65f7382e1f46d341c11d6aa">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/4d6713abfbed3217d65f7382e1f46d341c11d6aa</a>
でやっていることである</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember &amp;&amp; ember addon my-components --skip-git --yarn
</code></pre></div><p>というように適当な名前の Addon を作ってるだけ。</p>
<h4 id="共通ライブラリのコンポーネントを-addon-に移植">共通ライブラリのコンポーネントを Addon に移植</h4>
<ul>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/cde30b30727d6eb9507b835d009d85759ddff5ee">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/cde30b30727d6eb9507b835d009d85759ddff5ee</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/4ad2f8a59ccc846a63e6ff31c8f8b53df81d8e42">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/4ad2f8a59ccc846a63e6ff31c8f8b53df81d8e42</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/30439f21f0659044bb4d2ea80ce68a2f8e0011b7">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/30439f21f0659044bb4d2ea80ce68a2f8e0011b7</a></li>
</ul>
<p>あたりでやってる作業。</p>
<p>実際の作業では1つ目を移植してみた段階で、動作確認のためにアプリ側で Addon が使えるように設定していたりする。</p>
<p>ちなみに ember の addon は
app/components のファイルから addon/components のファイルを import してやるみたいなお作法がある。</p>
<h4 id="addon-をアプリ側で使えるように変更">Addon をアプリ側で使えるように変更</h4>
<p>まずは上の手順で作った my-components という addon を
App 側で読み込めるように package.json の dependencies に以下を書き加える</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;my-components&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;link:../my-components&#34;</span>
</code></pre></div><p>ember-cli の公式ドキュメントだと「yarn link を使う」というように書いているがそれだとうまくいかないみたいな Issue が何個か立っているのでドキュメント通りのやりかたは諦めて、それらの Issue の中に書かれている方法を選択した。</p>
<p>npm link だとうまくいきそうな雰囲気もあるので
yarn を使わず npm link にしておけばいい可能性はある。未検証。</p>
<p>まあそれらは置いといて、とにかく Addon が使える状態になったら各コンポーネントでコメントアウトとかで読めなくしていた共通ライブラリの呼び出しを元に戻したり記述を直したりして、元のように動くようにしましょう。</p>
<h3 id="ember-bootstrap-の導入と-bootstrap-を使った機能を移植">ember-bootstrap の導入と bootstrap を使った機能を移植</h3>
<p>ここまでやって、麦汁さんは「わーい動いた〜」と思っていたけどボタンとかをクリックしてみると、Bootstrap 関係のやつが動かない。</p>
<p>そう。元の記述のままだと Bootstrap 関係のやつはメソッド呼び出しでエラーになって動かないのです。というわけでそれらも動くようにしないといけない。</p>
<p>というところで、どうやるのが手っ取り早いかというと
<a href="https://github.com/kaliber5/ember-bootstrap">ember-bootstrap</a> という Addon が転がっているのでそれをインストールして使うように変更するのが多分手っ取り早い。</p>
<h4 id="ember-boostrap-のインストール-初期設定">ember-boostrap のインストール・初期設定</h4>
<p>最新版は <a href="mailto:ember-cli-rails@2.18.2">ember-cli-rails@2.18.2</a> をサポートしていないので3系を使う必要がある。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember/todo-app &amp;&amp; ember install ember-bootstrap@3.1.4
</code></pre></div><p>その上で、元々使っている Bootstrap のバージョンに合わせて
ember-bootstrap でも3系が使われるように設定する。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember/todo-app &amp;&amp; ember generate ember-bootstrap --bootstrap-version=3
</code></pre></div><h4 id="bootstrap-を使ってる機能の移植">Bootstrap を使ってる機能の移植</h4>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/22a3bff502ce993c2f2288623b061a4f38652a29">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/22a3bff502ce993c2f2288623b061a4f38652a29</a>
でやっていることである。</p>
<p>基本的には、自前で bootstrap 用に DOM を組み立てていたところを
ember-bootstrap の Modal コンポーネント用に書き換えて、開いたりするための挙動を修正するだけである。</p>
<p>ember-boostrap の公式ドキュメントでは Handlebars の書き方が
<code>&lt;BsModal&gt;</code> みたいになっていて
3.4 以降でサポートされた Angle Bracket 方式の表記になっているが、
<code>&lt;&gt;</code> は <code>{{}}</code> に置き換えて
PascalCase を snake-cake にしたりするぐらいで動くので、落ち着いて移植しよう。</p>
<h3 id="既存の-system-spec-が新しい-path-で動くことを確認">既存の system spec が新しい PATH で動くことを確認</h3>
<p>ここまでやると、全機能を手動で確認できる状態になってるので既存の system spec がアクセスするポイントを新しく作ったアプリの方に変更しテストが通ることを確認すると、ちゃんと移植できたんだなって安心できる</p>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/0c59057ec458edb7cda0febd15585dfc0a916bc1">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/0c59057ec458edb7cda0febd15585dfc0a916bc1</a></p>
<h2 id="元の-path-で動くようにする">元の PATH で動くようにする</h2>
<h3 id="元の-path-への再移植">元の PATH への再移植</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/334ce5052564a1499de03fb5a6630af3a339af21">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/334ce5052564a1499de03fb5a6630af3a339af21</a>
でやっていること。</p>
<ol>
<li>EmberCliTodoItemsController と TodoItemsController に移植</li>
<li>app/views/ember_cli_todo_items/index.html.haml を app/views/todo_items/index.html.haml に移植
<ul>
<li>rootElement に使う ID も <code>todo-app</code> に変更</li>
<li><code>%base</code> の href 属性も <code>/todo_items/</code> に変更</li>
</ul>
</li>
<li>resources :ember_cli_todo_items を削除
<ul>
<li>同時に controller, view も消す</li>
</ul>
</li>
<li>mount_ember_app で <code>to</code> と <code>controller</code> の指定を変更
<ul>
<li><code>to</code> を <code>/todo_items</code> に変更</li>
<li><code>controller</code> を <code>todo_items</code> に変更</li>
</ul>
</li>
<li>Ember.js 側で rootElement を <code>#todo-app</code> にする</li>
</ol>
<h3 id="テストの-path-を戻す">テストの PATH を戻す</h3>
<p>これは
<a href="#%E6%97%A2%E5%AD%98%E3%81%AE-system-spec-%E3%81%8C%E6%96%B0%E3%81%97%E3%81%84-path-%E3%81%A7%E5%8B%95%E3%81%8F%E3%81%93%E3%81%A8%E3%82%92%E7%A2%BA%E8%AA%8D">既存の system spec が新しい PATH で動くことを確認</a> でやったことを revert してテストが通ることを確認したら OK</p>
<h2 id="ember-rails-関連の削除">ember-rails 関連の削除</h2>
<h3 id="ember-rails-用のコードの削除">ember-rails 用のコードの削除</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/138ac7b8a76ec0f299edb2d626c9252927647229">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/138ac7b8a76ec0f299edb2d626c9252927647229</a>
でやってるように
app/assets/javascripts の下にある
ember-rails 関連のコードを全部消すだけ。</p>
<h3 id="ember-rails-用の設定を削除">ember-rails 用の設定を削除</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/9e036017b7ebee1a84b6f6847d5079a61ca5177c">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/9e036017b7ebee1a84b6f6847d5079a61ca5177c</a>
でやってるように</p>
<ul>
<li><code>config/application.rb</code></li>
<li><code>config/initializers/assets.rb</code></li>
</ul>
<p>の中に ember-rails のために書いた設定を丸っと消しましょう。もう不要なので。</p>
<h3 id="ember-rails-及びその関連-gem-と決別">ember-rails 及びその関連 Gem と決別</h3>
<p>設定も消せたら ember-rails, ember-source も要らないのでさっくり Gemfile から消して bundle install し直しましょう。イエイ。</p>
<h2 id="github-actions-の修正">GitHub Actions の修正</h2>
<p>あとはやり残しとしては
CI でもちゃんとテストが通るようにすること。</p>
<p>このプロジェクトでは GitHub Actions を使ってるのでそのワークフローを修正する</p>
<h3 id="最新-lts-の-node-dot-js-を使うようにする">最新 LTS の Node.js を使うようにする</h3>
<p>Dockerfile のところでもやりましたね。同じようなことをしましょう。とは言っても setup-node という action が公式に提供されているし
<a href="https://docs.github.com/ja/actions/guides/building-and-testing-nodejs">公式ドキュメント</a> もあるので、それに従って設定するだけで使えるようになる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Use Node.js</span>
  <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-node@v1</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">node-version</span>: <span style="color:#ae81ff">14.</span><span style="color:#ae81ff">x</span>
</code></pre></div><h3 id="ember-cli-をインストール">ember-cli をインストール</h3>
<p>これも似たようなことを Dockerfile でやってるので同じ感じに。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">install ember-cli</span>
  <span style="color:#f92672">run</span>: <span style="color:#ae81ff">yarn global add ember-cli</span>
</code></pre></div><h3 id="ember-addon-及び-ember-app-で-yarn-install">Ember Addon 及び Ember App で yarn install</h3>
<p>こちらも依存を解決してやる必要があるので。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Ember.js Addon</span>
  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    cd ember/my-components
</span><span style="color:#e6db74">    yarn</span>    
- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Ember.js App</span>
  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    cd ember/todo-app
</span><span style="color:#e6db74">    yarn</span>    
</code></pre></div><p>ここまでやると
GitHub Actions でもテストが通るし普通に使えるようになる。やったね。</p>
<h2 id="最後に">最後に</h2>
<p>以上の手順で ember-rails から ember-cli-rails への置き換えができます。</p>
<p>現実世界のアプリケーションはこのケースよりもっと複雑でしょうけども、やってやれないことはないはず。</p>
<p>それに ember-cli が使えるようにしておかないと
3系に移行ができないし、つまり、サポート切れのフレームワークを使い続けることになるのでもしまだ ember-rails のアプリが残っていたら頑張ってやっていきましょ。別フレームワークに置き換えるよりは労力はかからないはずですし。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails でユーザー情報を Rails から inject</title>
            <link>https://mugijiru.github.io/posts/ember-rails-inject-from-rails/</link>
            <pubDate>Sun, 28 Feb 2021 13:10:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-inject-from-rails/</guid>
            <description>フロントエンドのフレームワークを使っていて、そのフレームワークで Server Side Rendering をしてない時に API 経由でデータ渡すよりも表示用の HTML 経由で直接データを渡し</description>
            <content type="html"><![CDATA[<p>フロントエンドのフレームワークを使っていて、そのフレームワークで Server Side Rendering をしてない時に
API 経由でデータ渡すよりも表示用の HTML 経由で直接データを渡したい時がある。</p>
<p>ember-rails を使ってる時もそれはあって、今回は Haml 経由で Ember.js に情報を渡して表示する方法を書いてみた。もちろん旧来版と ES6 Module 対応版の両方で実装している。</p>
<h2 id="旧来版">旧来版</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/16">https://github.com/mugijiru/ember-rails-todo-app/pull/16</a> で実装したやつ。</p>
<h3 id="おおまかな実装内容">おおまかな実装内容</h3>
<p>こちらは名前空間に Ember.js の外からアクセスできるので
Haml 内に JavaScript を埋め込んで Ember に渡すというちょっと乱暴なことができる。</p>
<p>今回は email を todo-items テンプレート内で表示したかったので
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/16/files#diff-69c2e4b0a6040f2873e963c79265340fd97c099e1ea1a7fbf579902259126e3fR1">Ember.js の呼び出し元の haml</a> 内で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">:</span><span style="color:#a6e22e">javascript</span>
  <span style="color:#a6e22e">TodoApp</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;session:current-user&#39;</span>, <span style="color:#a6e22e">Ember</span>.Object.<span style="color:#a6e22e">extend</span>({ <span style="color:#a6e22e">email</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#{current_user.email}&#39;</span> }));
  <span style="color:#a6e22e">TodoApp</span>.<span style="color:#a6e22e">inject</span>(<span style="color:#e6db74">&#39;controller:todo-items&#39;</span>, <span style="color:#e6db74">&#39;current-user&#39;</span>, <span style="color:#e6db74">&#39;session:current-user&#39;</span>);
</code></pre></div><p>と書いてみた。</p>
<p>以下にもう少し詳細に書いてみる。</p>
<h3 id="ユーザー情報の登録">ユーザー情報の登録</h3>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">TodoApp</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;session:current-user&#39;</span>, <span style="color:#a6e22e">Ember</span>.Object.<span style="color:#a6e22e">extend</span>({ <span style="color:#a6e22e">email</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#{current_user.email}&#39;</span> }));
</code></pre></div><p>という記述で JavaScript の中に Haml での Ruby のコード呼び出し機能を用いて
email を EmberObject を継承したクラスにぶち込んでいる。</p>
<p>正直 <code>:javascript</code> で書いて Ruby のコードを呼び出すのは結構乱暴だとは思うけどできちゃうのでやっちゃった。</p>
<h3 id="コントローラへの-inject">コントローラへの inject</h3>
<p>アプリケーションに <code>session:current-user</code> として登録できたので、後はもう</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">TodoApp</span>.<span style="color:#a6e22e">inject</span>(<span style="color:#e6db74">&#39;controller:todo-items&#39;</span>, <span style="color:#e6db74">&#39;current-user&#39;</span>, <span style="color:#e6db74">&#39;session:current-user&#39;</span>);
</code></pre></div><p>として controller に inject することができる。</p>
<h3 id="template-での表示">template での表示</h3>
<p>inject された controller の template で <code>{{current-user.email}}</code> と記述するだけでそのユーザーのメアドが表示される。以上。</p>
<h2 id="es6-module-対応版">ES6 Module 対応版</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/17">https://github.com/mugijiru/ember-rails-todo-app/pull/17</a> で実装したやつ。</p>
<h3 id="おおまかな実装内容">おおまかな実装内容</h3>
<p>こちらは旧来版とは違って名前空間は隠蔽されているため
Haml で JavaScript を書いて埋め込むなんて荒技はできない。</p>
<p>だけどまあそんなことをしなくても
data 属性に情報を埋めておいてそれを initializer で取得して使えばいいだけである。</p>
<h3 id="haml-へのデータ埋め込み">Haml へのデータ埋め込み</h3>
<p>Haml の方では</p>
<pre tabindex="0"><code class="language-haml" data-lang="haml">#todo-app{ data: { email: current_user.email } }
</code></pre><p>こんな感じにデータを埋めておく。それを Ember.js の initializer で取得して処理してあげれば良い。</p>
<h3 id="initializer-でのデータの取得">initializer でのデータの取得</h3>
<p>まずはデータを</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">currentUser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.Object.<span style="color:#a6e22e">extend</span>({
  <span style="color:#a6e22e">email</span><span style="color:#f92672">:</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">rootElement</span>).<span style="color:#a6e22e">dataset</span>.<span style="color:#a6e22e">email</span>
});
</code></pre></div><p>という感じで取得して適当な変数に放り込んでおく。ま、大体普通の JavaScript なので何も難しいことはない。</p>
<h3 id="アプリケーションへの登録">アプリケーションへの登録</h3>
<p>上で取得したデータをアプリケーションから見れるように登録してあげる必要があるので以下のように <code>application.register()</code> でデータを登録する。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;session:current-user&#39;</span>, <span style="color:#a6e22e">currentUser</span>);
</code></pre></div><h3 id="controller-への-inject">controller への inject</h3>
<p>上に書いた感じで application に登録してしまえば、後は旧来版と同じように</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">inject</span>(<span style="color:#e6db74">&#39;controller:todo-items&#39;</span>, <span style="color:#e6db74">&#39;current-user&#39;</span>, <span style="color:#e6db74">&#39;session:current-user&#39;</span>);
</code></pre></div><p>という感じで設定できる。</p>
<h3 id="template-での表示">template での表示</h3>
<p>あとは旧来版と同じく
inject された controller の template で <code>{{current-user.email}}</code> と記述するだけでそのユーザーのメアドが表示されると。うん、簡単でしたね。</p>
<h2 id="最後に">最後に</h2>
<p>API を経由せずに Ember.js にデータを渡す方法が旧来版と ES6 Module 対応版の両方で書けることがわかったので、旧来版から移行しようとした時もすぐ書き直せそうで安心。</p>
<p>ES6 Module 対応版の方は、
ember-rails から ember-cli-rails とかに乗り換えてもそのまま使えそうだしね。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails でコンポーネントをサブフォルダに配置する</title>
            <link>https://mugijiru.github.io/posts/ember-rails-component-in-subfolder/</link>
            <pubDate>Sun, 28 Feb 2021 11:19:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-component-in-subfolder/</guid>
            <description>Ember.js に限らずコンポーネントは増えてくるとサブフォルダに分割して管理したくなるよね。ということでそのあたりの記事。 これも、ES6 Module 対応版と旧来版</description>
            <content type="html"><![CDATA[<p>Ember.js に限らずコンポーネントは増えてくるとサブフォルダに分割して管理したくなるよね。ということでそのあたりの記事。</p>
<p>これも、ES6 Module 対応版と旧来版の両方を書く。
ES6 Module 対応版は何も考えることがないので、この記事は旧来版のためにあるようなものだけど。</p>
<h2 id="es6-module-対応版の場合">ES6 Module 対応版の場合</h2>
<p>上に書いたようにこれは <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/14">https://github.com/mugijiru/ember-rails-todo-app/pull/14</a> に実装してあるけどとっても簡単</p>
<h3 id="component-をサブフォルダに移動">component をサブフォルダに移動</h3>
<p><code>components</code> の下に適当なフォルダを掘ってその中に移動するだけ。</p>
<h3 id="template-をサブフォルダに移動">template をサブフォルダに移動</h3>
<p><code>templates/components</code> の下に適当なフォルダを掘ってその中に移動するだけ。</p>
<h3 id="template-からの呼び出し">template からの呼び出し</h3>
<p>template, component をそれぞれ</p>
<dl>
<dt>template</dt>
<dd><code>templates/components/hoge/fuga.hbs</code></dd>
<dt>component</dt>
<dd><code>components/hoge/fuga.module.es6</code></dd>
</dl>
<p>と配置した場合は
<code>{{hoge/fuga}}</code> と書いて呼び出せばいい感じに動く。以上。</p>
<p>こういう感じで動くように <a href="https://github.com/ember-cli/ember-resolver/tree/v0.1.21">ember-resolver@0.1.21</a> が作られてるっぽいのでとても楽。</p>
<p>Ember.js のドキュメントなどを見ている感じだと多分もっと新しいバージョンでも同じ感じで動くっぽい。というわけで Ember.js@3 にしても多分動きそうなので安心感がある。</p>
<h2 id="旧来版の場合">旧来版の場合</h2>
<p>これは GlobalsResolver の挙動のおかげでちょっと大変。</p>
<p>と言っても
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/15">https://github.com/mugijiru/ember-rails-todo-app/pull/15</a>
で実装してある。</p>
<p>今回やりたかったことは、テンプレートとコンポーネントをサブフォルダに移動して扱えるようにすることなので、その実現方法を書いておく</p>
<h3 id="template-からの呼び出し">template からの呼び出し</h3>
<p><code>{{hoge/fuga}}</code> と呼び出した際に <a href="https://github.com/emberjs/ember.js/tree/v2.18.2/packages/ember-application/lib/system/resolver.js#L34">GlobalsResolver</a> でどう解釈されるとかというと
<a href="/posts/ember-rails-extract-common-libs/">前の記事</a> にも書いたように
Hoge という名前空間の FugaComponent を探しに行くようになってるというのが前提。</p>
<h3 id="component-をサブフォルダに移動">component をサブフォルダに移動</h3>
<p>GlobalsRegister の解釈に合わせて
FugaCompnent を Hoge 名前空間に所属させればいいので</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Hoge</span>.<span style="color:#a6e22e">FugaComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Compnent</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>という形で定義しておけばいい。</p>
<p>旧来方式だとファイル自体は components の中にあればファイル名も位置も何でもいいはずなので人間がわかりやすいように <code>components/hoge/fuga.js.es6</code> として配置したら良い。</p>
<p>また、事前に Hoge という名前空間は必要なので
<code>components/hoge.js.es6</code> とファイルで</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">Hoge</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namespace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><p>としておく。</p>
<p>前回の共通ライブラリ切り出しと大体似たお話ですね。</p>
<h3 id="template-をサブフォルダに移動">template をサブフォルダに移動</h3>
<p>これは難しいことは何もなくて
<code>templates/components/&lt;名前空間&gt;/&lt;コンポーネント名&gt;.hbs</code>
みたいに配置したら良い。</p>
<p>つまり <code>Hoge.FugaComponent</code> の場合は
<code>templates/components/hoge/fuga.hbs</code>
と置けばいい。</p>
<h3 id="さらにネストさせたい場合">さらにネストさせたい場合</h3>
<p>試してないけど、
<a href="https://github.com/emberjs/ember.js/blob/e2007b6ecb046fd06f6b43c381e8a1128914ad43/packages/%40ember/application/globals-resolver.js#L221">GlobalsRegister の実装</a> を見ている感じだと、多分</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">Hoge</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namesupace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Hoge</span>.<span style="color:#a6e22e">Fuga</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namesupace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Hoge</span>.<span style="color:#a6e22e">Fuga</span>.<span style="color:#a6e22e">PiyoComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>にみたいな感じに名前空間をネストさせれば大丈夫そう。</p>
<h2 id="最後に">最後に</h2>
<p>前回の共通ライブラリ切り出しよりは簡単でしたね。</p>
<p>ES6 Module 対応版では直感的にやるだけで終わるし、旧来版でも共通ライブラリと大体やること一緒というか、それよりも手順が少ないので、サブフォルダへの移動を先にやった方が良かったかも。</p>
<p>あと、今回も両パターンでやってるので、
ES6 Module 移行前にこちらを実施しても簡単な修正で対応できることがわかりました。やったね。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails でコンポーネントを共通ライブラリとして切り出す</title>
            <link>https://mugijiru.github.io/posts/ember-rails-extract-common-libs/</link>
            <pubDate>Sun, 28 Feb 2021 10:45:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-extract-common-libs/</guid>
            <description>ember-rails を使って1つの Rails アプリの上に複数の Ember.js アプリケーションを動かしていると各アプリで同じようなコンポーネントを使っていたり、あるいは同じようなコ</description>
            <content type="html"><![CDATA[<p>ember-rails を使って1つの Rails アプリの上に複数の Ember.js アプリケーションを動かしていると各アプリで同じようなコンポーネントを使っていたり、あるいは同じようなコンポーネントが必要だというのに気付いて共通ライブラリとして実装したくなることがある。あるんだよ。</p>
<p>というわけで、その共通化を2パターンでやってみた。
2パターンというのは 旧来の書き方の場合と
ES6 Module 対応版の場合とである。</p>
<p>なおいずれのパターンもサーバへのデプロイはやってないのでもしかしたらサーバ環境では動かないかもしれないがご容赦を。</p>
<h2 id="旧来版">旧来版</h2>
<p>先に答えを出すと
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13">https://github.com/mugijiru/ember-rails-todo-app/pull/13</a>
に実装した通りである。</p>
<h3 id="template-からの呼び出し">template からの呼び出し</h3>
<p>template で <code>{{ember-libs/button}}</code> と書いた場合に
Resolver には <code>component:ember-libs/button</code> として解釈するように要求されるっぽい。これはソースからではなく、挙動的に確かめただけ。</p>
<h3 id="コンポーネントの探索">コンポーネントの探索</h3>
<p>旧来の書き方の場合に探索に使われるのが GlobalsResolver というやつ。</p>
<p>この GlobalsResolver というやつは <a href="https://github.com/emberjs/ember.js/blob/e2007b6ecb046fd06f6b43c381e8a1128914ad43/packages/%40ember/application/globals-resolver.js#L59-L76">コメント</a> にも書かれてるように
<code>component:ember-libs/button</code> と渡されたら、
GlobalsResolver は <code>EmberLibs.ButtonComponent</code> として解釈するようになっている。つまり EmberLibs という名前空間の ButtonComponent を探しに行くようになっている。</p>
<h3 id="名前空間の定義">名前空間の定義</h3>
<p>というわけで、まずは <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-e1803bb0635866bc90975a1321dbfa6d20be59e76ec3d7b80c8acc4656f8af9fR6">ember-libs/ember-libs.js.es6</a> に書いてるように</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">EmberLibs</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namespace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><p>と書くことで
EmberLibs という名前空間を定義してやる。</p>
<p>一応 <code>ember-libs/ember-libs.js.es6</code> では require の順番として
ember はそこで定義している実装を使うので先に require してそのファイルで定義している名前空間を components で使うので components を require するより前に
require_self をしている。</p>
<h3 id="共通コンポーネントの記述">共通コンポーネントの記述</h3>
<p>各コンポーネントはその名前空間の下に入るように書けばいい。例えば <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-9f9be147342dc470d8f0cba8a06a55a210550e01b22502bd6e0aff0d029ae38cR1">ember-libs/components/button.js.es6</a> に書いてるように</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">EmberLibs</span>.<span style="color:#a6e22e">ButtonComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>というように書いてやれば動く。</p>
<h3 id="config-dot-handlerbars-dot-templates-root-の設定">config.handlerbars.templates_root の設定</h3>
<p>templates を ember-libs/templates に入れるので
Rails 側の設定で <code>config.handlebars.templates_root</code> に <code>ember-libs/templates</code> を追加するのを忘れずに。
ember-rails の設定例に従っていれば <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-c1fd91cb1911a0512578b99f657554526f3e1421decdb9e908712beab57e10f9R34">config/application.rb</a> に設定があるはず。</p>
<h3 id="利用側の設定">利用側の設定</h3>
<p>あとは <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-2cb7f9d0c761533d0e2b01e0b7e6f4a34529c7b52f9a13c7493b2629251bccd8R9">todo-app/application.js.es6</a> に書いてるようにこの共通コンポーネントを使いたいアプリ側で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//= require ember-libs/ember-libs
</span></code></pre></div><p>としてやるだけでさくっと使えるようになる。</p>
<h3 id="他の-type-について">他の type について</h3>
<p>試してないけど mixin や service ぐらいなら同じノリでいけるんじゃないかなと思ってる。
model もいけそう。名前空間が変わるだけだし、その呼び出しも難しくないし、大体なんとかなりそう。</p>
<h3 id="余談-名前空間を分けない場合">余談: 名前空間を分けない場合</h3>
<p>上のようなやりかたをしているのは、名前空間を分けたいってのが先だったので、各アプリで名前空間を分ける必要がなければ、全部のアプリで</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window <span style="color:#a6e22e">App</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Application</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><p>とかしちゃって</p>
<p><code>ember-libs/components/button.js.es6</code> では普通に書く場合と同じように</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">App</span>.<span style="color:#a6e22e">ButtonComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>みたいにしておいて require したら <code>{{button}}</code> で使える。個人的には、名前空間が混ざるとどっちかが上書きされたりしそうで怖くて嫌だけど。</p>
<h2 id="es6-module-対応版の場合">ES6 Module 対応版の場合</h2>
<p>最初に答えを出すと
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12">https://github.com/mugijiru/ember-rails-todo-app/pull/12</a>
で実装したやつ。</p>
<h3 id="コンポーネントの探索">コンポーネントの探索</h3>
<p>ES6 Module で書かれている Ember Application では基本的に単一の名前空間しか持たないようである。また、使用される Resolver が <a href="https://github.com/ember-cli/ember-resolver/tree/v0.1.21">ember-resolver@0.1.21</a> となっている。</p>
<p>こいつは <code>component:ember-libs/button</code> と渡って来た時の解釈が GlobalsResolver と異なっている。この ember-resolver の場合は、アプリケーションの下の <code>components/ember-libs/button</code> を探しに行く。</p>
<p>なのだけど今回はそんなところを探しに行って欲しくないので、
regsiter を Ember.js で自動的に解決して対応してもらうのではなく
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-029812c538a995224fcf19bfa24f65558246c054aea77c95ec1f4a404b4f5256R1">ember-libs/ember-libs.module.es6</a> に書いているように、自前で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">register</span>()
</code></pre></div><p>して対応することにした。</p>
<h3 id="コンポーネントの-register">コンポーネントの register</h3>
<p>基本的には以下のように書いておけば Button コンポーネントは動くようになる。</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Button</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./components/button&#39;</span>;

<span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;component:ember-libs/button&#39;</span>, <span style="color:#a6e22e">Button</span>);
</code></pre></div><p>が、コンポーネントが増えていった際に全部そうやって書くのはアホらしい。というわけで、自動的に解決するようにした。</p>
<h3 id="コンポーネントの-auto-register">コンポーネントの auto register</h3>
<p>ES6 Module 対応して import している場合に ember-rails では実際はどんな形に transpile されるかというとどうやら requirejs の機能で読み込んだりしているらしい。</p>
<p>で export されているファイルは <code>requirejs.entries</code> に含まれているのでそこから必要なものを探し出して
<code>application.register</code> に対し、解釈してほしい名前で渡してクラスを渡しておけば
template で <code>{{ember-libs/button}}</code> とした時に require したクラスのインスタンスとして動いてもらえる。</p>
<p>という感じで自動的に register する処理を <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-029812c538a995224fcf19bfa24f65558246c054aea77c95ec1f4a404b4f5256R4">メソッドにして</a> おけば、利用側はそれを呼び出すだけでセットアップが済む</p>
<h3 id="config-dot-handlebars-dot-templates-root-の設定">config.handlebars.templates_root の設定</h3>
<p>やはりこちらの場合も templates を <code>ember-libs/templates</code> に入れるので
Rails 側の設定で <code>config.handlebars.templates_root</code> に <code>ember-libs/templates</code> を追加するのを忘れずに。
ember-rails の設定例に従っていれば <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-c1fd91cb1911a0512578b99f657554526f3e1421decdb9e908712beab57e10f9R34">config/application.rb</a> に設定があるはず。</p>
<h3 id="利用側の設定">利用側の設定</h3>
<p>アプリ側では <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-97468a821d4c12c1b223617fba29257a5b1e00553a1b8e8f403ee99864756ebaR4">initializers/resolve-common-libs に書いている</a> ように
initializer で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">EmberLibs</span>.<span style="color:#a6e22e">registerAll</span>()
</code></pre></div><p>を叩くだけでいい感じに使えるようになる。</p>
<h3 id="他の-type-について">他の type について</h3>
<p>試してないけど、component でやってみた所感。</p>
<p>mixin はどうせ明示的に import して使うので関係なさそう。
service は、component と同じやりかたでいけそうな気がする。
model もいけそうなので user model を共通化するような用途がありそう。</p>
<p>controller もいけそうだけどそれに付随する route からどう呼ばれるかが難しそう。</p>
<h3 id="余談-他の方法について">余談: 他の方法について</h3>
<p>多分 EmberEngine とか EmberAddon の仕組みを使って似たようなことはできそうな気はする。</p>
<p>だけど ember-rails で Engine や Addon を使うというのはそれはそれでかなり大変かと思われるので今回はそれを動かすようなことはしてない。</p>
<p>より正確にいうと、それしか方法がないかもと思って途中まで調べたけど、厳しそうだったので今回は上述の方法にしておいた。</p>
<h2 id="最後に">最後に</h2>
<p>旧来版と ES6 Module 対応版とで実装方法は異なるがどちらでも同じような使い勝手でコンポーネントを共通ライブラリとすることができることがわかった。</p>
<p>両方のパターンが使えることがわかったので、
ES6 Module 対応版への移行がまだでも躊躇せずライブラリを分割できそう。</p>
]]></content>
        </item>
        
        <item>
            <title>古い ember-rails App で ES6 Module 化を完了した</title>
            <link>https://mugijiru.github.io/posts/ember-rails-complete-modulize/</link>
            <pubDate>Tue, 23 Feb 2021 20:45:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-complete-modulize/</guid>
            <description>#10 サブフォルダのファイルを全て module に移行した #11 残りのファイルも module 化した でやってることで全てだけど 前回の記事 でやってた内容を完了まで持って行った</description>
            <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/10">#10 サブフォルダのファイルを全て module に移行した</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11">#11 残りのファイルも module 化した</a></li>
</ul>
<p>でやってることで全てだけど
<a href="/posts/ember-rails-partial-modulize/">前回の記事</a> でやってた内容を完了まで持って行った。</p>
<h2 id="サブフォルダ以下の-es6-module-化">サブフォルダ以下の ES6 Module 化</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/10">https://github.com/mugijiru/ember-rails-todo-app/pull/10</a> でやったこと。</p>
<p>これは基本的に単純で、ほぼ前回の記事でやってることを全部のフォルダに適用しただけ。</p>
<p>Model だけ命名規則が他と違うので
import 関連の処理をそこだけ分岐している</p>
<pre tabindex="0"><code class="language-erb" data-lang="erb">&lt;% if dir == 'models' %&gt;
  &lt;% klass_name = module_name.underscore.camelize %&gt;
&lt;% else %&gt;
  &lt;% klass_name = &quot;#{module_name.underscore.camelize}#{dir.underscore.singularize.camelize}&quot; %&gt;
&lt;% end %&gt;
import &lt;%= klass_name %&gt; from 'todo-app/modules/&lt;%= dir %&gt;/&lt;%= module_name %&gt;';
TodoApp.&lt;%= klass_name %&gt; = &lt;%= klass_name %&gt;;
</code></pre><p>Model は <code>models/hoge.module.es6</code> とあったら <code>Hoge</code> として使われるようにして、他は例えば Component だと <code>components/fuga.module.es6</code> とあったら <code>FugaComponent</code> として使われるようにしているだけ。</p>
<p>あとはそれぞれのファイルを <code>*.js.es6</code> から <code>*.module.es6</code> に rename して import, export に書き換えるだけ。とても簡単だし、全部まとめて変更する必要もないので楽。</p>
<p>ただこれをやってる時に気付いたのが
<code>import-modules.js.es6.erb</code> が cache されてるおかげで
module 化対象のファイルだけ変更・移動しても import 文が変更されなくてうまく読み込まれない問題があるということ。何故か rspec は通ったりするけど。</p>
<p>まあその時は <code>rails tmp:cache:clear</code> して cache を消すか
<code>import-modules.js.es6.erb</code> に適当に空行でも加えて cache を使われないようにしたら解決する。</p>
<h2 id="router-dot-js-dot-es6-app-name-dot-js-dot-es6-environment-dot-js-dot-es6-の-es6-module-化">router.js.es6, &lt;APP_NAME&gt;.js.es6, environment.js.es6 の ES6 Module 化</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11">https://github.com/mugijiru/ember-rails-todo-app/pull/11</a> でやったこと。</p>
<p>サブフォルダのファイルを全部 module にしたら後は変更しないといけないファイルはこれぐらい。</p>
<p>変更の流れは大体以下の感じ</p>
<ol>
<li>router.js.es6 をこれまでのファイルと同じように module 化</li>
<li>environment.js.es6 も同様に module 化</li>
<li>&lt;APP_NAME&gt;.js.es6 の module 化とそれに伴うファイル移動等</li>
</ol>
<h3 id="router-dot-js-dot-es6-をこれまでのファイルと同じように-module-化">router.js.es6 をこれまでのファイルと同じように module 化</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/359520f6656920ac8ef3fe623d15f2368cc66a78">https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/359520f6656920ac8ef3fe623d15f2368cc66a78</a></p>
<p>この commit でやってることそのもの。</p>
<p>拡張子を module.es6 に変更して中身を module っぽく書いて
require される順番を最後に移動し、最後に他のファイルみたいに import してあげるだけ。</p>
<h3 id="environment-dot-js-dot-es6-も同様に-module-化">environment.js.es6 も同様に module 化</h3>
<p>実はこのファイルをまともに使ってなかったので PR では後ろに回したんだけど、多分ちゃんとやるならこのタイミングかなって。</p>
<p>これもさっきの手順と同じ感じだと思う。
require するタイミングは <code>//= require ./todo-app</code> の直前になる。そのタイミングになる理由はよく知らんけど
ember-rails で generate したらそこに来るからそこでいいんだろ(適当)</p>
<p>実際 import して使われるタイミングは application.js.es6 の中で明示的に import することになるので
require_self するより前ならどこでも良さそうな気はする。</p>
<p>あと、多分、古いスタイルに書き換える時に適当にやってたのでそもそも古いスタイルでの environment の置き方が正しくなさそうな気もする。</p>
<p>一応 <a href="https://guides.emberjs.com/v1.10.0/configuring-ember/">https://guides.emberjs.com/v1.10.0/configuring-ember/</a> に</p>
<blockquote>
<p>Note that the above code must be evaluated before Ember.js loads.</p>
</blockquote>
<p>と書いてるのでそれに従って対応してたつもりだけどね。</p>
<p>ま、古いスタイルの正しいやりかたを必要としている人はいないだろうし新しい形式でちゃんと動けば良かろう。ちゃんと動くか知らんけど。</p>
<h3 id="app-name-dot-js-dot-es6-の-module-化とそれに伴うファイル移動等">&lt;APP_NAME&gt;.js.es6 の module 化とそれに伴うファイル移動等</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/d3673bfa455906abd0ff6d31d1d3f4f083bd4a71">https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/d3673bfa455906abd0ff6d31d1d3f4f083bd4a71</a>
の commit でやってることだけど、ここが結構まとめて色々やらないといけなさそう。</p>
<p>&lt;APP_NAME&gt;.js.es6 を ES6 Module 化をするんだけどここが一番色々書き変わるところ。</p>
<p>事前に Namespace を用意する必要がなくなったので require_self を一番最後にしたり、
<code>import Application from 'ember-rails/application</code> しておいてそこから extend して export して、みたいな。まあ <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/d3673bfa455906abd0ff6d31d1d3f4f083bd4a71#diff-7aa5fb21bec5b1e11d78f1b7c34b3b92f05b293d97a99ed2af713f81ea5dab82">ファイル</a> を見た方が早いか。</p>
<p>で、こいつを ES6 Module にすると ember-rails での自動 import が動くようになる。なので、事前に module 化していたファイルを全部本来の位置に戻した上でこれまでお世話になってきた <code>import-modules.js.es6.erb</code> にさよならすることになる。ま、そいつは消しやすいように別ファイルに分離していたんだけども。</p>
<p>あと当然 application.js.es6 も、他のファイルが全部 module 化された前提で書き換える必要がある。まあほとんど &lt;APP_NAME&gt;.js.es6 を import して create するだけなんだけど。</p>
<p>以上でほぼ終わりだけど、不要になった modules フォルダを消して require_tree する処理を消すのを忘れずに。麦汁さんはそれを忘れて <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/0f90fda419f9c23f844ba2e53dc1c2fa2e9b5d51">commit を積むことになった</a></p>
<h2 id="ここまでやると何ができるようになるか">ここまでやると何ができるようになるか</h2>
<p>ember-rails で書いた上で最も最新の記述に変更できた状態となる。というわけで、これでようやく ember-cli-rails 移行する準備ができました! やったね!</p>
<p>まあぶっちゃけ ember-cli-rails 移行と module 化を同時にやっちゃうという手もあるけど、
1回1回の変更差分を小さくするには、バラバラがいいかなってことで分けてやっている。</p>
<p>だって、そうじゃないと「はい変更の多い PR はリジェクト〜wwww」ってされかねない^^</p>
]]></content>
        </item>
        
        <item>
            <title>古い ember-rails App で一部ファイルを ES6 Module 化</title>
            <link>https://mugijiru.github.io/posts/ember-rails-partial-modulize/</link>
            <pubDate>Sun, 21 Feb 2021 22:41:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-partial-modulize/</guid>
            <description>これは何? ember-rails を古いスタイルで書いておいてそれをモダン化していく企画の第一弾の記事。 何をしたのか 今回は ES6 module を使ってない ember-rails アプリケーションで一部</description>
            <content type="html"><![CDATA[<h2 id="これは何">これは何?</h2>
<p>ember-rails を古いスタイルで書いておいてそれをモダン化していく企画の第一弾の記事。</p>
<h2 id="何をしたのか">何をしたのか</h2>
<p>今回は ES6 module を使ってない ember-rails アプリケーションで一部のファイルだけ ES6 Module にしてみた。</p>
<h2 id="何が嬉しい">何が嬉しい?</h2>
<p>今回扱ってるアプリケーションのサイズはとても小さいのでまとめて置き換えることも可能というか、ぶっちゃけ <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/7">古いスタイルに書き換えた PR</a> を revert するだけで
ES6 Module 化できたりする。</p>
<p>しかし、世の中に潜んでいる、レガシー化した ember-rails のプロジェクトでは全部まとめて ES6 Module にするのはファイル数が多過ぎて困難かと考え、敢えて一部のファイルだけ ES6 Module 化する方法を探してみた。</p>
<h2 id="どうやったらできるの">どうやったらできるの?</h2>
<p>簡単に言うと
ES6 Module 形式で書いたやつを import して
Ember.js Application の Namespace に放り込めばいいだけ。</p>
<h3 id="example">Example</h3>
<p>まずはコンポーネントなどを
<code>app/assets/javascripts/ember-app/components/foo.module.es6</code> ってファイル名で</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Ember</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember&#39;</span>;

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>({});
</code></pre></div><p>のように書いておく。拡張子が <code>.module.es6</code> というのがポイントで、そうしておくと
<a href="https://github.com/tricknotes/ember-es6%5Ftemplate">ember-es6_template</a> という Gem が自動的に ES6 の module として判定してくれるようになっている
<a href="https://github.com/tricknotes/ember-es6%5Ftemplate/blob/c1c7b8d23be7669a0aa6c5f9c71b916a3799f9a6/lib/ember/es6%5Ftemplate/sprockets.rb#L10">https://github.com/tricknotes/ember-es6%5Ftemplate/blob/c1c7b8d23be7669a0aa6c5f9c71b916a3799f9a6/lib/ember/es6%5Ftemplate/sprockets.rb#L10</a></p>
<p>そして <code>app/assets/javascripts/ember-app/application.js.es6</code> の末尾にでも</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">FooComponent</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember-app/components/foo&#39;</span>;

<span style="color:#a6e22e">EmberApp</span>.<span style="color:#a6e22e">FooComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">FooComponent</span>;
</code></pre></div><p>のように書いたら、一応 module 形式で書けるし、それを window.EmberApp で用意した Ember.js Application で使えるって感じ。</p>
<h2 id="ファイルの数と同じ量の-import-書くの">ファイルの数と同じ量の import 書くの?</h2>
<p>だるいよね。なので import 処理は
<code>app/assets/javascripts/ember-app/import-modules.js.es6.erb</code>
という erb template でも分離して</p>
<pre tabindex="0"><code class="language-erb" data-lang="erb">&lt;% module_dir = Rails.root.join('app/assets/javascripts/ember-app/modules') %&gt;
&lt;% Dir.each_child(module_dir) do |dir| %&gt;
  &lt;% next unless FileTest.directory?(&quot;#{module_dir}/#{dir}&quot;) %&gt;
  &lt;% Dir.glob('*.module.es6', base: &quot;#{module_dir}/#{dir}&quot;) do |module_file| %&gt;
    &lt;% module_name = File.basename(module_file, '.module.es6') %&gt;
    &lt;% klass_name = &quot;#{module_name.underscore.camelize}#{dir.underscore.singularize.camelize}&quot; %&gt;
import &lt;%= klass_name %&gt; from 'ember-app/modules/&lt;%= dir %&gt;/&lt;%= module_name %&gt;';
EmberApp.&lt;%= klass_name %&gt; = &lt;%= klass_name %&gt;;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre><p>とでも書いておけば全部いい感じに読んでくれる。</p>
<h2 id="関連-pr">関連 PR</h2>
<p>実際に動くコードは以下の PR で用意した。
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/8">https://github.com/mugijiru/ember-rails-todo-app/pull/8</a>
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/9">https://github.com/mugijiru/ember-rails-todo-app/pull/9</a></p>
<p>最初の PR で <code>modules</code> フォルダにさらに components フォルダを掘ってその中にファイルを配置している。</p>
<p>その方が全部移行できた後にまるっと置き換えするのに楽そうだからだ。</p>
<p>また import して Namespace に放り込む処理も別ファイルに追い出している。これも、完全移行が済んだら不要になるファイルなので消しやすさを重視して分割しておいた。</p>
<p>さらに後続の PR で、複数のタイプが来ても対応できるように書き換えている。
Model は対応できてないけど、ま、Model は移行してないのでとりあえず放置。</p>
<p>CI でテストも通しているしバッチリだと思う。デプロイできるようにはしてないからサーバで動くかは確認してないけど、ま、大丈夫だろ</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails で書いた Web アプリを GitHub で公開した</title>
            <link>https://mugijiru.github.io/posts/publish-ember-rails-app/</link>
            <pubDate>Sun, 21 Feb 2021 15:40:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/publish-ember-rails-app/</guid>
            <description>この間の記事 で書いたように ember-rails で簡単なアプリケーションを作ってた。よくある TODO アプリである。 先週時点では「テストとかなくてもいいから動けばいいだ</description>
            <content type="html"><![CDATA[<p><a href="/posts/ember-rails-in-2021/">この間の記事</a> で書いたように
ember-rails で簡単なアプリケーションを作ってた。よくある TODO アプリである。</p>
<figure><img src="/ox-hugo/screenshot-ember-rails-todo-app.png"/>
</figure>

<p>先週時点では「テストとかなくてもいいから動けばいいだろ」って気持ちだったけどなんとなーくテストを追加したくなったりあんまり慣れてない docker-compose 対応してみたりしていたのと平日はこのプログラムに触れてなかったので、結構日が空いてしまった。</p>
<p>まあ、それはともかくとして、とりあえず <a href="https://github.com/mugijiru/ember-rails-todo-app/">https://github.com/mugijiru/ember-rails-todo-app/</a> に置いておいた現時点の最新コミットで <a href="https://github.com/mugijiru/ember-rails-todo-app/tree/v1.1.1">v1.1.1</a> のタグを振ってるやつは自分の知ってる一番古いスタイルで書かれてる状態にしてある。</p>
<h2 id="使ってる-gem">使ってる Gem</h2>
<ul>
<li>Ember.js 関係
<ul>
<li>ember-rails</li>
<li>ember-source</li>
<li>jquery-rails
<ul>
<li>Ember.js は 2 系まで jquery に依存しているので
<ul>
<li>よく見ると ember-rails の依存に入ってるから書かなくて良かったな……</li>
</ul>
</li>
</ul>
</li>
<li>active_model_serializers 0.9
<ul>
<li>0.9 系じゃないとうまく動かないっぽい</li>
</ul>
</li>
</ul>
</li>
<li>CSS framework
<ul>
<li>bootstrap-sass
<ul>
<li>レガシー感の演出のため敢えてこれにしている</li>
</ul>
</li>
</ul>
</li>
<li>テスト関係
<ul>
<li>rspec-rails</li>
<li>factory_bot_rails</li>
<li>database_rewinder</li>
<li>capybara</li>
<li>selenium-webdriver</li>
</ul>
</li>
</ul>
<p>あたり。</p>
<h2 id="レガシー感の演出">レガシー感の演出</h2>
<p>レガシー感を出すために bootstrap-sass(Bootstrap3系になる)を使ったりはしているがあまり特別なものは使ってない。</p>
<p>また ember-rails で ember アプリのソースコードを generate すると
es6 module を使ったようなコードが出力されるけど、これも敢えてレガシー感を出すために module を使わない形式に書き直している。</p>
<p>よりレガシー感を出すために CoffeeScript にするという手もあったけど、さすがにそこまでは頑張りたくないw
もう何年も触ってないよ CoffeeScript&hellip;</p>
<p>そしてページ全体を Ember.js にはしないでページの一部を Ember.js にする <a href="https://guides.emberjs.com/v2.18.0/configuring-ember/embedding-applications/">埋め込み</a> 形式を採用している。既存のアプリに Ember.js を後乗せした感の演出である。実際、構築時には一時的に普通の Rails App として動くようにしていた。</p>
<p>他にこだわったところは、今回は単一のアプリケーションしか動かしてないけど
<a href="https://github.com/emberjs/ember-rails#multiple-ember-application">Multiple Ember Application</a>
の作法に則って、Ember アプリケーションを追加で乗せられるようにしている。これにより「この画面も Ember 化しようず」という流れで
Ember アプリが複数動いてる状態により近くなったんじゃないかなと。実際今回動いてるのは1つだから、ちょっと違うけどね。。。</p>
<h2 id="最後に">最後に</h2>
<p>ここから段々と最新の Ember.js を使えるように寄せていくつもり。</p>
]]></content>
        </item>
        
        <item>
            <title>2021年にもなって ember-rails で新規アプリを書いてみてる</title>
            <link>https://mugijiru.github.io/posts/ember-rails-in-2021/</link>
            <pubDate>Sat, 13 Feb 2021 01:15:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-in-2021/</guid>
            <description>少し思うところがあって、 2021 年になったというのに ember-rails を使って新規で Web アプリを書いている。 ember-rails とは? ember-rails は Ember.js という Web フロントエンド MVC なフレームワークを</description>
            <content type="html"><![CDATA[<p>少し思うところがあって、
2021 年になったというのに <a href="https://github.com/emberjs/ember-rails">ember-rails</a> を使って新規で Web アプリを書いている。</p>
<h2 id="ember-rails-とは">ember-rails とは?</h2>
<p>ember-rails は
Ember.js という Web フロントエンド MVC なフレームワークを
Rails といい感じに連携してくれて快適な Web アプリケーション開発体験を提供してくれるものであった。</p>
<p>過去形なのは、ember-rails は Rails3 とか 4 とかの時代に主に使われていて既にメンテナンスされてないのと、今はそれよりも良い <a href="https://github.com/thoughtbot/ember-cli-rails">ember-cli-rails</a> というのがあるから。</p>
<h2 id="今-ember-rails-を使うと何がつらいか">今 ember-rails を使うと何がつらいか</h2>
<p>色々つらい。</p>
<h3 id="まずメンテナンスが止まってる">まずメンテナンスが止まってる</h3>
<p>なので Rails 6 で動くかがわからない。多分、試している人はいないし、自分もそこまで試す気力はない。</p>
<h3 id="ember-dot-js-のサポートが-2-dot-18-dot-2-までとなっている">Ember.js のサポートが 2.18.2 までとなっている。</h3>
<p>より詳細に話すと
ember-rails が依存している Gem である ember-source で本当は 3.0.0.beta.2 まで出てるんだけど、β版のことは無視する。
<a href="https://rubygems.org/gems/ember-source/versions/2.18.2">https://rubygems.org/gems/ember-source/versions/2.18.2</a></p>
<p>で、その 2.18.2 は既にサポートされてないバージョンである。</p>
<p>サポートされてないバージョンを使うのはセキュリティ面でもまずいしもはや情報もあまり落ちてないので苦行である。</p>
<p>Ember.js 公式サイトのドキュメントが過去のバージョンのものも残されているのでそれを頼りにするしかない。というか公式で残しててくれてありがとう。それがないと何もできないよ。</p>
<h3 id="ember-rails-だと-ember-dot-js-の-addon-が導入できない">ember-rails だと Ember.js の addon が導入できない</h3>
<p>例えば Handlebars でロジックを書く上でとても基本的な比較用のヘルパーを提供してくれる <a href="https://github.com/jmurphyau/ember-truth-helpers">ember-truth-helper</a> が使えない。これが使えないはめっちゃ不便で、それをなんとかするために同じようなコードを自前で用意するハメになる。</p>
<p>他にも <a href="https://github.com/ember-community-russia/awesome-ember">ember-community-russia/awesome-ember</a> に載っている色々なものが使えないわけだ。つらいどころか悲しくなってくる。</p>
<h3 id="自動テストが書けない">自動テストが書けない</h3>
<p>Ember.js は QUnit で自動テストができるようになっているのだが
ember-rails だとそれも使えない。すなわちフロントエンドのコンポーネントの単体テストが書けないのである。</p>
<h2 id="それでも-ember-rails-を使いたい方には">それでも ember-rails を使いたい方には</h2>
<p>どうして素直に ember-cli-rails や ember-cli そのものを使おうとしないのかはわからないけどどうしても ember-rails の世界に住みたいのであれば
<a href="https://github.com/discourse/discourse">discourse</a> のソースを参考にしたら良いと思う。</p>
<p>どうやら <a href="https://github.com/discourse/discourse/pull/11932">ember-cli に乗り換える方針で動いているよう</a> だが今日時点の Gemfile には未だに discourse-ember-source などの記述が残っている状態であり、まだ完全移行はできてない様子。</p>
<p><a href="https://rubygems.org/gems/discourse-ember-source/versions/3.12.2.2">discourse-ember-source</a> は 3.12 系まで追従していたようなのでそこまでは discourse の真似をすれば使えるだろう。</p>
<p>また彼らは ember-rails を使いながら qunit でのテストもできるようにしているようである。正直マジか頑張ったなって気持ち。ちょっとどうやって動かしているのかはわからない。あんまり調べる気力もない。なんとなくわかったことは ES6 の module システムを活用して頑張ってる雰囲気があることである。</p>
<p>他にも addon も使えるようにしている様子でもあるが、これもちょっとよくわかってない。あまり adoon が使われてる気もしないが……。</p>
<p>ともかく ember-rails を独自に拡張した上で色々頑張っているようである。すごい。それでももう ember-cli-rails に乗り換えようとしているようなので今から ember-rails の世界に住もうとするのはやめた方がいいはず。</p>
<p>あ、よく見ると Rails は 6.0 系だ。ってことは少なくとも discourse-ember-rails なら Rails 6.0 でも動くわけか。なるほど。</p>
<h2 id="で-なぜ自分は-ember-rails-で新規アプリを書いているか">で、なぜ自分は ember-rails で新規アプリを書いているか</h2>
<p>マゾなので、敢えてその環境で新規アプリを用意しておいてそこから ember-cli-rails に移行する、みたいなことをしてみたいから。</p>
<p>本当は自分で ember-rails なアプリを書くつもりはなかったんだけどサンプルになるようなアプリが探せなかったってのもある。これが Yak Shaving か〜と思いながら粛々と小さなアプリを書いていくのであった</p>
<p>できたらまた記事にする。アプリ自体は公開しないけど、ソースは GitHub に上げるつもり。</p>
]]></content>
        </item>
        
        <item>
            <title>browse-at-remote を導入した</title>
            <link>https://mugijiru.github.io/posts/add-browse-at-remote/</link>
            <pubDate>Sat, 23 Jan 2021 23:18:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/add-browse-at-remote/</guid>
            <description>仕事中、プルリクのレビューをする際に、「ここのコードがこんな感じになってるから〜」みたいな感じで既存コードへのリンクを張ることがちょくちょく</description>
            <content type="html"><![CDATA[<p>仕事中、プルリクのレビューをする際に、「ここのコードがこんな感じになってるから〜」みたいな感じで既存コードへのリンクを張ることがちょくちょくある。</p>
<p>そういうことをする時、まずそもそも差し示したいコードを確認するんだけどその時は Emacs の中で探す方が早い。で、探して確認するまではいいんだけど、そこから GitHub 上のコードへのリンクを取得しようとするとちょっと面倒。</p>
<p>これまでは、GitHub のリポジトリのトップからディレクトリを辿って行って当該コードを再度探していました。めんどくさいねっ。</p>
<p>というわけで解決する手段を探していて最近導入したのが <a href="https://github.com/rmuslimov/browse-at-remote">browse-at-remote</a> というやつ。</p>
<p>こいつを入れてる状態で、GitHub のリポジトリに突っ込んであるコードの上で
<code>M-x browse-at-remote</code> を実行すると
GitHub でのリポジトリでのコードの位置でブラウザを開いてくれる。</p>
<p>コードの上でと書いたけど、リージョンを選択していればその範囲が選択された状態で実行すると選択した行がハイライトされた状態で開いて便利。</p>
<p>その状態から GitHub 上で <code>Copy permalink</code> をしておいて
PR のコメントにコピーしたリンクを貼り付けるとコードも表示されて便利。</p>
<p>で、結構よく使うコマンドとなったので
Hydra から即呼び出せるようにしてある。</p>
<p>Global に使うコマンドを突っ込んでる Hydra は key-chord で <code>jk</code> を叩くと呼べるようにしていてその中で <code>B</code> を叩けば browse-at-point が呼ばれるようにしてある。</p>
<p>というわけで、導入と Hydra の設定を追加しているプルリクが以下になります。
<a href="https://github.com/mugijiru/.emacs.d/pull/205">https://github.com/mugijiru/.emacs.d/pull/205</a></p>
<p>という使い方をしているけど、実は似た機能を提供している <a href="https://github.com/sshaw/git-link">git-link</a> で <code>git-link-use-commit</code> のフラグを立てておいて他にもいくつか設定を入れたりしたらもっといい感じのことができるのかもしれない。今度試すか……。</p>
]]></content>
        </item>
        
        <item>
            <title>新年明けましておめでとうございます</title>
            <link>https://mugijiru.github.io/posts/happy-new-year-2021/</link>
            <pubDate>Sat, 02 Jan 2021 20:31:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/happy-new-year-2021/</guid>
            <description>&lt;p&gt;新年明けましておめでとうございます。麦汁です。昨年の終わり頃、世間では AdventCalendar で賑ってる頃に、ふと「サイトのリニューアルしたいなあ」なんてことを思って、リニューアルに着手しましたが、ようやくそれが実りそうです。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>新年明けましておめでとうございます。麦汁です。昨年の終わり頃、世間では AdventCalendar で賑ってる頃に、ふと「サイトのリニューアルしたいなあ」なんてことを思って、リニューアルに着手しましたが、ようやくそれが実りそうです。</p>
<p>なんでそんなことをしてるかというと前の記事 <a href="/posts/starting-hugo/">Hugo 始めました</a> でも書いたように「自分が作ったサイトだっせー」ってのが1つあります。</p>
<p>それを構築した時には「デザインとかも全部自分でやっちまおう」ということで全部やろうとしていたのですがデザインセンスが壊滅的だったとか時間がろくに取れないとかやる気が他に吸われていったとかでイマイチなまま放置していました。よくないですねえ。</p>
<p>あと、そことは別にブログサービスを借りて使ってるのですがそっちはそっちで更新がだるいなってのもあってリニューアルと同時に今後のブログ更新はこっちにしてしまおう、というのもあったりします。</p>
<p>Hugo でブログもやってしまう方が <a href="https://ox-hugo.scripter.co/">ox-hugo</a> も使って記事を書き出せるので
org-mode 使い的には幸せになれそうですし。</p>
<p>あとは折角リニューアルしたんだからモチベーションが続くことを願っています。</p>
<p>というわけで 2021 年の抱負は「月に2回はブログを更新する」とします。</p>
<p>結構、緩めな抱負ですが、仕事じゃないのでこのぐらいの方が良かろう……。</p>]]></content>
        </item>
        
        <item>
            <title>Hugo 始めました</title>
            <link>https://mugijiru.github.io/posts/starting-hugo/</link>
            <pubDate>Sun, 20 Dec 2020 15:22:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/starting-hugo/</guid>
            <description>&lt;p&gt;Hugo はなんか Emacs 界隈で流行ってるし、自分のサイトだっせーなーって思ってたので
Hugo を使って、公開されてるテンプレートを適用して
Web サイトを再構築してみることにした。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Hugo はなんか Emacs 界隈で流行ってるし、自分のサイトだっせーなーって思ってたので
Hugo を使って、公開されてるテンプレートを適用して
Web サイトを再構築してみることにした。</p>
<p>他の静的サイトジェネレータもちょっと検討したけど機能面とかも考慮した上で Hugo がいいかなって。主な理由は「流行ってるから」ですが。ほら、流行りに乗りたいじゃん。ちょっと乗り遅れてる気もするけど。</p>
<p>今、とりあえず作ってる最中なんだけど、つい BBS とかチャットとかリンク集とか置きたくなる。
90年代または2000年代脳である。お絵描き BBS も置いたろうかって気持ちになる。</p>]]></content>
        </item>
        
        <item>
            <title>org-todo を ivy で設定できるようにした</title>
            <link>https://mugijiru.github.io/posts/set-org-todo-from-ivy/</link>
            <pubDate>Sun, 31 May 2020 01:32:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/set-org-todo-from-ivy/</guid>
            <description>posframe っていいですよね。いきなりタイトルと関係なさそうな単語出したけど。まあ ivy-posframe を使ってるので ivy を使うと posframe が使えて便利って話なんだけど。 ところで話</description>
            <content type="html"><![CDATA[<p>posframe っていいですよね。いきなりタイトルと関係なさそうな単語出したけど。まあ ivy-posframe を使ってるので ivy を使うと posframe が使えて便利って話なんだけど。</p>
<p>ところで話は若干変わって、
org-todo って実行するとウインドウが分割されてバッファが表示されてそこから選ぶ形になるじゃないですか。もしかしたら設定がちゃんとしてたりしたらならないのかもしれませんけど、とりあえず私の環境だとなるんですよ。</p>
<p>で、それだと何が問題かというとウインドウ分割される時に元々見ていたバッファがガチャガチャと移動しちゃってつらいんですよ。
posframe を使えるとそれが起きなくて便利なんですよ。</p>
<p>というわけで、org-todo でキーワード選ぶ時にも
posframe が使えるといいなって思ったんですよ。</p>
<p>で、色々調べた結果、自分にはそういうのを提供してくれる設定とか拡張とか見つけられなかったんですよ。</p>
<p>じゃあ作るしかないじゃん?
というわけで、そういう関数作った</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-emacs-lisp" data-lang="emacs-lisp">(defun my/org-todo ()
  (interactive)
  (ivy-read <span style="color:#e6db74">&#34;Org todo: &#34;</span>
            org-todo-keywords-for-agenda
            :require-match <span style="color:#66d9ef">t</span>
            :sort <span style="color:#66d9ef">nil</span>
            :action (lambda (keyword)
                      (org-todo keyword))))
</code></pre></div><p>org-todo の代わりにこの関数を呼ぶと
ivy で TODO のキーワードが設定できる。
ivy は ivy-posframe を使ってるから、画面がガチャガチャ動かなくなる。便利。</p>
<p>この変更に関する Emacs の設定ファイルへの Pull request は
<a href="https://github.com/mugijiru/.emacs.d/pull/74">https://github.com/mugijiru/.emacs.d/pull/74</a>
に置いてるので興味があれば見てもらえると。</p>
<p>ところで ivy でこういう選択するインターフェース書いたの初めて。とりあえず書いてみたらできたので、また別のやつも ivy を使って書いてみたい。</p>
]]></content>
        </item>
        
    </channel>
</rss>
