<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 麦汁三昧</title>
        <link>https://mugijiru.github.io/posts/</link>
        <description>Recent content in Posts on 麦汁三昧</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>ja-JP</language>
        <lastBuildDate>Fri, 26 Mar 2021 01:49:00 +0900</lastBuildDate>
        <atom:link href="https://mugijiru.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>自作の Ember.js Addon を ember-rails 用に無理やり Gem 化した</title>
            <link>https://mugijiru.github.io/posts/ember-components-addon-as-gem/</link>
            <pubDate>Fri, 26 Mar 2021 01:49:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-components-addon-as-gem/</guid>
            <description>前回の記事 で Ember.js の共通コンポーネントを詰めた Addon を NPM package にしたわけですが、今度はそいつを割と無理やり Gem 化して ember-rails でも使えるようにしたよ、というお話で</description>
            <content type="html"><![CDATA[<p><a href="/posts/my-ember-libs-to-npm/">前回の記事</a> で Ember.js の共通コンポーネントを詰めた Addon を
NPM package にしたわけですが、今度はそいつを割と無理やり Gem 化して
ember-rails でも使えるようにしたよ、というお話です。</p>
<h2 id="目的">目的</h2>
<p>Ember.js の Addon として切り出した共通コンポーネントを同一ソースで ember-rails でも使いたいな〜、使えるようにしたいな〜、という目的。</p>
<p>ほら。
ember-rails で1つの Rails アプリケーションの上に複数の Ember.js アプリを動かしていて一部ずつ ember-cli-rails 移行を進めていたらどうしても混ざる時期あるじゃないですか。</p>
<p>そういう時に共通コンポーネントは同一ソースで両方で動かせると多分便利じゃないですか。</p>
<h2 id="ember-components-の-gem-化">ember-components の Gem 化</h2>
<p>Gem にして ember-rails でも使えるようにするために色々やりました。こんなにやらないといけないのかってぐらいやった気がします。。。</p>
<h3 id="component-の書き方を古い方式に戻した">Component の書き方を古い方式に戻した</h3>
<p>ember-rails だとどうも</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Component</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;@ember/component&#39;</span>

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>({})
</code></pre></div><p>という書き方だと読み込んでくれないようなので全部以下のように書き換えている。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Ember</span> <span style="color:#a6e22e">from</span> <span style="color:#960050;background-color:#1e0010">&#39;</span><span style="color:#a6e22e">ember</span>

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>({})
</code></pre></div><p>で、この変更を加えると eslint に怒られるので新しい記述を要求する eslint のルールをオフにしてあげる必要がある。悲しい。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">rules</span><span style="color:#f92672">:</span> {
  <span style="color:#e6db74">&#39;ember/new-module-imports&#39;</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;off&#39;</span>
},
</code></pre></div><h3 id="components-を-ember-rails-で読み込めるようにする">components を ember-rails で読み込めるようにする</h3>
<p>ember-libs というフォルダに共通コンポーネントとして分割した時も同じようなことをしたんだけど
ember-rails に components を読み込ませるためのコードをこのリポジトリに用意してある。</p>
<p><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/lib/ember/components/templates/ember-components.js">lib/ember/components/templates/ember-components.js</a></p>
<p>やってることは、
requirejs で読み込まれてるファイルを調べて component を見つけ次第
<code>application.register</code> するだけのコードである。このコードは後で利用側から実行されるようにする。</p>
<h3 id="addon-以下のファイルを-vendor-assets-以下にコピー-変更する-raketask-作成">addon 以下のファイルを vendor/assets 以下にコピー、変更する Raketask 作成</h3>
<p>ここでやってることは</p>
<ul>
<li>上で用意した ember-rails に読み込ませるためのコードをコピー。</li>
<li>Rails が読んでくれるところにファイルを置きたいのでaddon 以下のファイルを vendor/assets/javascripts 以下にコピー</li>
<li>ember-rails で module として読み込んでほしいので拡張子を <code>.module.es6</code> に変更</li>
<li><code>import layout</code> などの Addon 用記述があるとエラーになるのでそれらの記述を強制排除</li>
</ul>
<p>となっている。</p>
<p>後者2つは実装都合上、まとめてやっている</p>
<h4 id="ファイルのコピー">ファイルのコピー</h4>
<p>addon 以下に入っていても Rails 的には通常読み込めないので
<code>vendor/assets/javascripts</code> 以下にファイルをコピーしてあげている。あと上の手順で作った ember-rails に読み込ませるためのコードもコピーしている。</p>
<p><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/Rakefile#L14-L18">https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/Rakefile#L14-L18</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">path <span style="color:#f92672">=</span> <span style="color:#e6db74">&#39;vendor/assets/javascripts/ember-components&#39;</span>
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>mkdir_p(path)
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>cp(<span style="color:#e6db74">&#39;lib/ember/components/templates/ember-components.js&#39;</span>, <span style="color:#e6db74">&#34;</span><span style="color:#e6db74">#{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">.module.es6&#34;</span>)
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>cp_r(<span style="color:#e6db74">&#39;addon/templates&#39;</span>, path)
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>cp_r(<span style="color:#e6db74">&#39;addon/components&#39;</span>, path)
</code></pre></div><p>多分 <code>app/assets/javascripts</code> 以下でもいいんだろう。というかそっちの方が良さそうな気もするけど、
<code>app</code> は Ember.js 側で使っているので、それと混ざると嫌だなということで避けている。</p>
<h4 id="addon-用の記述削除-and-拡張子の変更">addon 用の記述削除 &amp; 拡張子の変更</h4>
<p>component に関しては addon での component 作成のお作法に従い
<code>import layout</code> とか書いているけど
ember-rails ではその記述はむしろ不要になるというか
hbs を import できない問題が発生するのでそれらの行を強制的に削除する処理を入れている。</p>
<p>また、それと同時に ember-rails で ES6 module として読み込めるように拡張子を <code>.module.es6</code> にしている。</p>
<p>方法としては、ファイルを <code>.js</code> から <code>.module.es6</code> にコピーしつつ不要な行を消してそれが済んだら <code>.js</code> ファイルを消すという手法を取ってる。結構、無理やり感がある。</p>
<p><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/Rakefile#L19-L33">https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/Rakefile#L19-L33</a></p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span><span style="color:#e6db74">&#34;</span><span style="color:#e6db74">#{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">/components/*.js&#34;</span><span style="color:#f92672">].</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>file_path<span style="color:#f92672">|</span>
  <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>open(file_path, <span style="color:#e6db74">&#39;r&#39;</span>)
  basename <span style="color:#f92672">=</span> <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>basename(file_path, <span style="color:#e6db74">&#39;.js&#39;</span>)
  <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>open(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">#{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">/components/</span><span style="color:#e6db74">#{</span>basename<span style="color:#e6db74">}</span><span style="color:#e6db74">.module.es6&#34;</span>, <span style="color:#e6db74">&#39;w&#39;</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>write_f<span style="color:#f92672">|</span>
    <span style="color:#66d9ef">File</span><span style="color:#f92672">.</span>open(file_path, <span style="color:#e6db74">&#39;r&#39;</span>) <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>read_f<span style="color:#f92672">|</span>
      read_f<span style="color:#f92672">.</span>each <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>line<span style="color:#f92672">|</span>
        <span style="color:#66d9ef">next</span> <span style="color:#66d9ef">if</span> line <span style="color:#f92672">=~</span> <span style="color:#e6db74">/^\s*import layout/</span>
        <span style="color:#66d9ef">next</span> <span style="color:#66d9ef">if</span> line <span style="color:#f92672">=~</span> <span style="color:#e6db74">/^\s*layout,/</span>

        write_f<span style="color:#f92672">.</span>puts line
      <span style="color:#66d9ef">end</span>
    <span style="color:#66d9ef">end</span>
  <span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">FileUtils</span><span style="color:#f92672">.</span>rm(<span style="color:#66d9ef">Dir</span><span style="color:#f92672">.</span>glob(<span style="color:#e6db74">&#34;</span><span style="color:#e6db74">#{</span>path<span style="color:#e6db74">}</span><span style="color:#e6db74">/components/*.js&#34;</span>))
</code></pre></div><h3 id="rails-engine-化">Rails Engine 化</h3>
<p>Rails Engine として組み込んで使えるように
<code>lib</code> 以下にちょろちょろコードを書いている。</p>
<ul>
<li><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/lib/ember/components.rb">lib/ember/components.rb</a></li>
<li><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/lib/ember/components/version.rb">lib/ember/components/version.rb</a></li>
<li><a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/lib/ember/components/engine.rb">lib/ember/components/engine.rb</a></li>
</ul>
<p>ほとんど「Rails Engine のお作法」ってだけのコードだけど上に書いたファイルをコピーしたりする時の
PATH を取得するための便利メソッドとして以下を生やしている。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">def</span> <span style="color:#a6e22e">self</span><span style="color:#f92672">.</span><span style="color:#a6e22e">root</span>
  <span style="color:#66d9ef">Pathname</span>(__FILE__)<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;../../..&#39;</span>)
<span style="color:#66d9ef">end</span>
</code></pre></div><h3 id="gemspec-修正">gemspec 修正</h3>
<p>Gem として GitHub Packages に登録するので当然 .gemspec ファイルを用意している。
<a href="https://github.com/mugijiru/ember-components/blob/bfbcda1c31a8bdf0efcb6aeaa0fb15efaccc5a7a/ember-components.gemspec">ember-components.gemspec</a></p>
<p>一応 GitHub Packages に出すためのお作法として</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">spec<span style="color:#f92672">.</span>metadata<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;allowed_push_host&#34;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;https://rubygems.pkg.github.com&#34;</span>
</code></pre></div><p>というように push できるホストをしていしたり</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">spec<span style="color:#f92672">.</span>metadata<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;github_repo&#34;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ssh://github.com/mugijiru/ember-components.git&#34;</span>
spec<span style="color:#f92672">.</span>metadata<span style="color:#f92672">[</span><span style="color:#e6db74">&#34;git_repo&#34;</span><span style="color:#f92672">]</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;ssh://github.com/mugijiru/ember-components.git&#34;</span>
</code></pre></div><p>というようにリポジトリを指定していたりする。</p>
<p><a href="https://docs.github.com/ja/packages/guides/configuring-rubygems-for-use-with-github-packages#publishing-multiple-packages-to-the-same-repository">同じリポジトリへの複数パッケージ公開</a> の記述を読む限り
github_repo だけ指定あれば良さそうな気もするが
git_repo があっても特に害もないだろうということでとりあえず入れている。</p>
<p>あとは gem に含めたいファイルとして</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">spec<span style="color:#f92672">.</span>files <span style="color:#f92672">=</span> <span style="color:#66d9ef">Dir</span><span style="color:#f92672">[</span>
  <span style="color:#e6db74">&#39;lib/**/*&#39;</span>,
  <span style="color:#e6db74">&#39;vendor/**/*&#39;</span>,
  <span style="color:#e6db74">&#39;README.md&#39;</span>,
  <span style="color:#e6db74">&#39;LICENSE.md&#39;</span>
<span style="color:#f92672">]</span>
</code></pre></div><p>としている。
lib 以下は Rails Engine として組込むために必要だし
vendor 以下には ember-rails で読み込める形に変換したファイルがあるので
gem に含める必要がある。</p>
<h3 id="github-actions-での-gem-登録">GitHub Actions での Gem 登録</h3>
<p><a href="/posts/my-ember-libs-to-npm/">NPM Package にした時</a> と同様に
Tag を打ってそれからリリースを作ったら Gem が登録されるように
GitHub Actions を設定している。</p>
<h4 id="gem-の-build">Gem の build</h4>
<p>publish する前に以下のようにして Rake Task を実行している。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Build gem</span>
  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    </span>    <span style="color:#ae81ff">bundle exec rake clean_assets generate_assets build</span>
</code></pre></div><p>clean_assets は説明してなかったけど <code>vendor/assets/javascripts</code> 以下を真っ新にするだけの処理。</p>
<p>で、generate_assets が
<a href="#addon-%E4%BB%A5%E4%B8%8B%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92-vendor-assets-%E4%BB%A5%E4%B8%8B%E3%81%AB%E3%82%B3%E3%83%94%E3%83%BC-%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B-raketask-%E4%BD%9C%E6%88%90">addon 以下のファイルを vendor/assets 以下にコピー、変更する Raketask 作成</a>
のあたりで書いた、コピーしたり中身を弄ったりしている処理。</p>
<p>最後の build は Gem を作ったことある人ならわかるはずだけど
gemspec の記述に従って gem ファイルを生成する処理。これを実行する pkg 以下に <code>ember-components-x.y.z.gem</code> みたいなファイルが作られる。</p>
<h4 id="publish">Publish</h4>
<p>上の手順で gem はできたので、あとはそれを GitHub Packages に登録するだけである。そのための step が以下。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Publish to RubyGems</span>
  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    mkdir -p $HOME/.gem
</span><span style="color:#e6db74">    touch $HOME/.gem/credentials
</span><span style="color:#e6db74">    chmod 0600 $HOME/.gem/credentials
</span><span style="color:#e6db74">    printf -- &#34;---\n:github: Bearer ${{ secrets.GITHUB_TOKEN }}\n&#34; &gt; $HOME/.gem/credentials
</span><span style="color:#e6db74">    gem push --key github --host https://rubygems.pkg.github.com/mugijiru pkg/*.gem</span>    
</code></pre></div><p>まずは <a href="https://docs.github.com/en/packages/guides/configuring-rubygems-for-use-with-github-packages#authenticating-with-a-personal-access-token">Authenticating with a personal access token</a> の手順に従って
<code>~.gem/credentials</code> に
<code>github: Bearer ${{ secrets.GITHUB_TOKEN }}</code>
の記述が入るようにしている。</p>
<p>それをすると GitHub Packages の認証が通るようになるので</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">gem push --key github --host https://rubygems.pkg.github.com/mugijiru pkg/*.gem
</code></pre></div><p>を実行することで Gem として登録ができる。</p>
<h2 id="ember-rails-アプリケーションから-gem-化した-addon-の読み込んで利用する">ember-rails アプリケーションから Gem 化した Addon の読み込んで利用する</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/51">https://github.com/mugijiru/ember-rails-todo-app/pull/51</a>
の PR でやっていることである。</p>
<p>PR では途中色々ごちゃごちゃやってるけど、ここでは最終結果に基いて説明をする。</p>
<h3 id="gem-を-bundle-install-できるようにする">Gem を bundle install できるようにする</h3>
<p>まずは bundle install で組込めないと何も始まらないので
Gemfile に以下を追加する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">source <span style="color:#e6db74">&#34;https://rubygems.pkg.github.com/mugijiru&#34;</span> <span style="color:#66d9ef">do</span>
  gem <span style="color:#e6db74">&#34;ember-components&#34;</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><p>さらに手元のマシンで以下のコマンドを実行して、
bundle install の際に GitHub Packages への認証が通るようにする。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ bundle config --local https://rubygems.pkg.github.com/mugijiru mugijiru:XXXXXX
</code></pre></div><p><code>XXXXXX</code> には Gem をインストールできるパーソナルアクセストークンを設定すること。</p>
<p>こうしておけば</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ bundle install
</code></pre></div><p>で無事に自作 Gem の ember-components がインストールできる</p>
<p>Docker を使ってる場合は以下のようにして
Docker 内で bundle config が設定された状態で <code>bundle</code> を実行する必要あり</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ docker-compose run rails bash -c &#34;bundle config --local https://rubygems.pkg.github.com/mugijiru mugijiru:XXXXXX &amp;&amp; bundle&#34;
</code></pre></div><h3 id="templates-root-への登録">templates_root への登録</h3>
<p>ember-rails は Rails 側で templates_root を設定してあげる必要がある。</p>
<p>というわけで config/application.rb で
<code>ember-components/templates</code> が templates_root として認識されるように記述する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">config<span style="color:#f92672">.</span>handlebars<span style="color:#f92672">.</span>templates_root <span style="color:#f92672">=</span> <span style="color:#e6db74">%w[todo-app/templates ember-components/templates]</span>
</code></pre></div><h3 id="sprockets-で-ember-rails-を読み込む">sprockets で ember-rails を読み込む</h3>
<p>Gem として読み込めるようになったので
Sprockets で以下のようにして require してあげると
Gem の <code>vendor/assets/javascrips/ember-components</code> に生成したファイルが
ember-rails アプリ側で認識されるようになる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//= require ember-components
</span></code></pre></div><h3 id="ember-dot-js-に-component-を-register-する">Ember.js に component を register する</h3>
<p>require するだけだと Ember.js ではまだ使えないので
Gem 内の Componentを登録する必要がある。</p>
<p>が、基本的な処理は
<a href="#components-%E3%82%92-ember-rails-%E3%81%A7%E8%AA%AD%E3%81%BF%E8%BE%BC%E3%82%81%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B">components を ember-rails で読み込めるようにする</a> のところで書いたので、
ember-rails 側では initializers に以下のような内容のファイルを置けば良い。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">EmberComponents</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember-components&#39;</span>;

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">function</span> <span style="color:#a6e22e">initialize</span>(<span style="color:#a6e22e">application</span>) {
  <span style="color:#a6e22e">EmberComponents</span>.<span style="color:#a6e22e">registerAll</span>(<span style="color:#a6e22e">application</span>);
}

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> {
  <span style="color:#a6e22e">name</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;register-ember-components&#39;</span>,
  <span style="color:#a6e22e">initialize</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">initialize</span>
};
</code></pre></div><p>実質的にやってることは
Gem 内のスクリプトに定義している registerAll メソッドを叩いているだけ。</p>
<p>本当はこういう処理すらなしに使えるのがベストだけどそこまでうまくやる方法は見つけられず……。</p>
<h3 id="利用箇所の修正">利用箇所の修正</h3>
<p>これは component の prefix を <code>my-</code> から <code>mg-</code> に変えたから発生している作業なので本質的には不要な作業。</p>
<p>とにかく <code>my-button</code> のような古い prefix になっているところを
<code>mg-button</code> というように新しい prefix に置き換えるだけの簡単なお仕事。</p>
<h3 id="github-actions-の修正">GitHub Actions の修正</h3>
<h4 id="setup-ruby-で-ember-components-を-bundle-install-できるようにする">setup-ruby で ember-components を bundle install できるようにする</h4>
<p>GitHub Actions の CI でも bundle install をしているのでそこでもインストールが正常に行われるようにしてあげないといけない。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">ruby/setup-ruby@v1</span>
  <span style="color:#f92672">env</span>:
    <span style="color:#f92672">BUNDLE_HTTPS://RUBYGEMS__PKG__GITHUB__COM/MUGIJIRU/</span>: <span style="color:#e6db74">&#34;mugijiru:${{ secrets.NPM_AUTH_TOKEN }}&#34;</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">bundler-cache</span>: <span style="color:#66d9ef">true</span>
</code></pre></div><p>のように <code>bundle config</code> で設定したのと同じようなものを
env で設定してあげるとインストールができる。</p>
<p>NPM_AUTH_TOKEN なのは、NPM Package にした時に使ったやつが丁度いいスコープを持っていたから流用しちゃった。てへぺろっ。</p>
<h4 id="assets-precompile">assets:precompile</h4>
<p>Gem の作りが悪いのか、
rspec を流す前に</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ bin/rails assets:precompile
</code></pre></div><p>を流さないと component の template がテスト環境でで読まれない。というわけで GitHub Actions で rspec を実行する前にその手順を挟んでいる。</p>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/blob/4acafe0fd741fd24dc4e6bc69d98df5cbb68ef0e/.github/workflows/ci.yml#L32">https://github.com/mugijiru/ember-rails-todo-app/blob/4acafe0fd741fd24dc4e6bc69d98df5cbb68ef0e/.github/workflows/ci.yml#L32</a></p>
<p>ちなみにこれは手元で rspec を流す時も同じなのでちゃんと手元のマシンでも precompile してあげましょう。だるい。</p>
<h3 id="旧共通ライブラリの削除">旧共通ライブラリの削除</h3>
<p><code>app/assets/javascripts/ember-libs</code> に配置していたファイルは不要なのでさっくりと</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ rm -rf app/assets/javascripts/ember-libs
</code></pre></div><p>して</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//= require_tree ../ember-libs
</span></code></pre></div><p>としている行が残っていればそれも削除すること。</p>
<p><code>config/application.rb</code> で templates_root として
<code>ember-libs/templates</code> を追加している場合はそれも削除しておくこと。まあこれは残っててもエラーにならないけどね。</p>
<h2 id="旧スタイルの-ember-rails-アプリケーションでも-gem-化-addon-を利用する">旧スタイルの ember-rails アプリケーションでも Gem 化 Addon を利用する</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/52">https://github.com/mugijiru/ember-rails-todo-app/pull/52</a>
でやっていること。</p>
<p>まあ正直 module 化しているやつとほとんどやってることは変わらない。</p>
<p>変わってる点は、registerAll の呼び出し方ぐらいで
TodoApp という Ember.js アプリケーションが入ってる変数がグローバル空間に収まっているので
application.js.es6 の方で直接以下のように書いている。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">EmberComponents</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember-components&#39;</span>;
<span style="color:#a6e22e">EmberComponents</span>.<span style="color:#a6e22e">registerAll</span>(<span style="color:#a6e22e">TodoApp</span>);
</code></pre></div><p>他は module 化しているパターンと一緒なので割愛。</p>
<h2 id="最後に">最後に</h2>
<p>という手順で
NPM Package にした Ember.js Addon を若干無理やりながらも ember-rails で使えるようにすることができました。</p>
<p>まあ mixin とかは試してないのと
Component をサブフォルダに分割していたりするともうちょっと手をかけないといけなさそうだけどとりあえず動いたから許して。</p>
<p>正直、無理やり感が結構あるので普通のプロダクトに適用するのは厳しい感じある。</p>
]]></content>
        </item>
        
        <item>
            <title>Ember.js の共通コンポーネントの NPM への分離</title>
            <link>https://mugijiru.github.io/posts/my-ember-libs-to-npm/</link>
            <pubDate>Wed, 24 Mar 2021 13:04:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/my-ember-libs-to-npm/</guid>
            <description>相変わらず Rails における Ember.js 関連で遊んでいます。 今回の記事で書くのは「Ember.js Addon を別リポジトリに分離して NPM パッケージにして利用する」なんだ</description>
            <content type="html"><![CDATA[<p>相変わらず Rails における Ember.js 関連で遊んでいます。</p>
<p>今回の記事で書くのは「Ember.js Addon を別リポジトリに分離して NPM パッケージにして利用する」なんだけど、後追いで出す「分離したリポジトリを Gem としても使えるようにし ember-rails 環境で動かす」という感じに記事の前振りです。</p>
<p>本当は1つの記事にしたかったけど記述量が増えたから分割……。</p>
<h2 id="目的">目的</h2>
<p>なんでこんなことをしているかというと「単一ソースで ember-cli にも ember-rails にも対応したい」「じゃあ NPM と Gem で公開してインスコしたらいいんじゃね」という考えから。</p>
<p>というのも、この一連の記事は ember-rails から ember-cli-rails に徐々に移行していく手段を確立することが目的なので、
1つの Rails の中に複数の Ember.js アプリがあって
ember-rails と ember-cli-rails が混在している状況も有り得るかなあと。</p>
<p>そういう時に、共通コンポーネントは単一ソースで使いたいよね〜と思って両対応ができるようにしてみている。</p>
<p>まあ今回は ember-cli-rails だけの対応なんだけども。</p>
<h2 id="実践">実践</h2>
<p>ember-cli-rails に移行した時に元々 <code>RAILS_ROOT/app/assets/javascripts/ember-libs</code> というところに共通コンポーネントとして置いていたファイル群を
<code>RAILS_ROOT/ember/my-components</code> というところに
Ember.js のアドオンという形で設置していました。</p>
<p>正直そのままの方が、同一リポジトリなので改修とかしやすいんだけど「他のプロジェクトでも使いたい」といった時には分離も必要になるかなと。まあ今回の目的は別のところにあるけども。</p>
<h3 id="従来の実装を-ember-components-に移植">従来の実装を ember-components に移植</h3>
<p><a href="https://github.com/mugijiru/ember-components/commit/847981e9732385d08db4f5f703813196622b80d2">https://github.com/mugijiru/ember-components/commit/847981e9732385d08db4f5f703813196622b80d2</a></p>
<p>でやっていること。</p>
<p>基本的には、元々のソースを addons 以下に置いているだけ。なんとなく、コンポーネントの prefix を my- から mg- に変えてるけど。</p>
<p>あとは ember-cli-htmlbars を dependencies にも移動する必要あり。</p>
<p><a href="https://github.com/mugijiru/ember-components/commit/922d1f7ed5f6b3372b1d1551792f4e9739f5b1e3">https://github.com/mugijiru/ember-components/commit/922d1f7ed5f6b3372b1d1551792f4e9739f5b1e3</a></p>
<p>他にも <a href="https://github.com/mugijiru/ember-components/commit/30b3257227dab623c86dedfab032b85f32414e42">Docker で動かせるようにしたり</a>
<a href="https://github.com/mugijiru/ember-components/commit/34e81e2905e32dd2878b95fb9d5c7eb3b3a0b463">GitHub Actions でテストできるようにしたり</a>
ちょっと細かい修正をしたりしている。</p>
<p>ここまでの差分は
<a href="https://github.com/mugijiru/ember-components/compare/bbaf38aa0f6c99ebbc7e0cb7ee5ac2c201706bc6...34e81e2905e32dd2878b95fb9d5c7eb3b3a0b463">https://github.com/mugijiru/ember-components/compare/bbaf38aa0f6c99ebbc7e0cb7ee5ac2c201706bc6...34e81e2905e32dd2878b95fb9d5c7eb3b3a0b463</a>
で確認可能。</p>
<h3 id="github-packages-の-npm-package-の公開">GitHub Packages の NPM Package の公開</h3>
<p>まず <a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages#publishing-a-package">パッケージを公開する</a> に従って以下の変更をしている。</p>
<p>パッケージ名を <code>@mugijiru/ember-components</code> にしたり、</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;name&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;@mugijiru/ember-components&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>publishConfig の registry に GitHub Packages の URL を入れることでそこで公開できるようにしている。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;publishConfig&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;access&#34;</span>: <span style="color:#e6db74">&#34;restricted&#34;</span>,
  <span style="color:#f92672">&#34;registry&#34;</span>: <span style="color:#e6db74">&#34;https://npm.pkg.github.com&#34;</span>
}<span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>access は GitHub 側の記載は何もないが
<a href="https://tech.plaid.co.jp/npm-private-registry-to-github-packages-registry/">https://tech.plaid.co.jp/npm-private-registry-to-github-packages-registry/</a>
を参考にして restricted にすることで、許可された人だけが使えるようにしている。</p>
<p>今は公開リポジトリにしているから public でもいい気もするけど、実装当時はより業務でやりそうな雰囲気にしたかったので、非公開リポジトリかつ限定的な公開で進めていたので、このようになっている。</p>
<p>さらに、今後 GitHub Packages に複数パッケージ公開するかもしれないので
<a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages#publishing-multiple-packages-to-the-same-repository">同じリポジトリへの複数パッケージの公開</a> に従って registory を指定したりしている</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;repository&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;git://github.com/mugijiru/ember-components.git&#34;</span><span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>その上で
<a href="https://github.com/mugijiru/ember-components/blob/main/.github/workflows/release.yml">https://github.com/mugijiru/ember-components/blob/main/.github/workflows/release.yml</a>
のようなワークフローを用意すると
Tag を打って push して
GitHub 上でそのタグを使って Release を作成すると
NPM Package として公開されるようになっている。</p>
<p>上にも出した <a href="https://tech.plaid.co.jp/npm-private-registry-to-github-packages-registry/">https://tech.plaid.co.jp/npm-private-registry-to-github-packages-registry/</a> を真似するともっとスマートな感じになりそうだけど、一旦これでいいやってなってる。</p>
<h3 id="公開したパッケージを利用する">公開したパッケージを利用する</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/48">https://github.com/mugijiru/ember-rails-todo-app/pull/48</a> の PR でやったこと。</p>
<p>元々は <code>RAILS_ROOT/ember/my-components</code> に置いていたやつを NPM Package にしているので
my-components 関連のやつをさっくり消してあげている。</p>
<p>具体的には <code>ember/my-components</code> は全部消して
package.json の devDependencies に入れていた
<code>&quot;my-components&quot;: &quot;link:../my-components&quot;</code> を削除している。</p>
<p>今思ったけどこれ devDependencies だと多分 production 環境だと動かなかったな。まあ 2.18 なので公開する気がゼロだったからすっかり気付かなかったんだけど。</p>
<p>まあそれは置いといて公開したパッケージを入れるため dependencies に以下のように記述する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;dependencies&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> {
  <span style="color:#f92672">&#34;@mugijiru/ember-components&#34;</span>: <span style="color:#e6db74">&#34;^0.0.1&#34;</span>
}<span style="color:#960050;background-color:#1e0010">,</span>
</code></pre></div><p>あとはプライベートなパッケージを入れられるように
<code>RAILS_ROOT/ember/todo-app/.npmrc</code> に以下のような設定を入れている。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">@mugijiru:registry=https://npm.pkg.github.com
</code></pre></div><p>この設定は <a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages#installing-a-package">パッケージをインストールする</a> の通りだとなんかうまく動かなかったので
<a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages#installing-packages-from-other-organizations">他のOrganizationからのパッケージのインストール</a> のやり方を採用している。あとでまた検証した方がいいかもなあ。。。</p>
<p>それと <a href="https://docs.github.com/ja/packages/guides/configuring-npm-for-use-with-github-packages">GitHub Packages への認証を行う</a> に従って</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">//npm.pkg.github.com/:_authToken=${NPM_TOKEN}
</code></pre></div><p>としている。
NPM_TOKEN には GitHub のパーソナルアクセストークンが入るので環境変数にしている。</p>
<p>なので GitHub Actions で CI を回す際のパッケージのインストール時に</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml"><span style="color:#f92672">env</span>:
  <span style="color:#f92672">NPM_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.NPM_AUTH_TOKEN }}</span>
</code></pre></div><p>みたいに環境変数に PAT を入れてあげる必要あり。</p>
<p>他には、これまた公開したパッケージを使う上で本質的ではないんだけど、移植した際に <code>my-button</code> から <code>mg-button</code> みたいに全部
<code>my-</code> prefix だったのを <code>mg-</code> prefix にしているので利用箇所でそれらの修正の必要あり。命名を適当にやってたのでここでそれが仇になってる。つらい。</p>
<p>以上で GitHub Packages に NPM として公開した Ember.js の Addon を
ember-cli-rails で使えるようになりますよっと。正直 NPM とかに慣れてる人ならさっくりできそうな内容。。。</p>
<p>まあ Ember.js の Addon も実際は NPM Package なので普通に NPM Package として公開するだけで使えたりするってだけですね。
.ember-cli-build.js を活用したらまたちょっと話は違うはずだけど今回のはそこまでのやつじゃないし……。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails から ember-cli-rails へ</title>
            <link>https://mugijiru.github.io/posts/migrate-ember-rails-to-ember-cli-rails/</link>
            <pubDate>Sat, 06 Mar 2021 17:05:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/migrate-ember-rails-to-ember-cli-rails/</guid>
            <description>Ember.js 関係で最も書きたかった記事にやっと辿り着いた。表題の通りで、 ember-rails から ember-cli-rails に置き換える、という記事です。多分長くなる。 やったことはいつも通り GitHub の</description>
            <content type="html"><![CDATA[<p>Ember.js 関係で最も書きたかった記事にやっと辿り着いた。表題の通りで、
ember-rails から ember-cli-rails に置き換える、という記事です。多分長くなる。</p>
<p>やったことはいつも通り <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18">GitHub の PR</a> にしています。</p>
<p>PR の Description で「Rails 側ではこうした」「Ember 側ではこうした」みたいに書いているのでここではある程度時系列に沿ったような書き方にしようかな。</p>
<p>完全に時系列通りには書かないので、正確な時系列でどうしたか知りたかったら PR のコミットログを追ってください</p>
<h2 id="アプリの前提">アプリの前提</h2>
<p>これまで作って来た <a href="https://github.com/mugijiru/ember-rails-todo-app">https://github.com/mugijiru/ember-rails-todo-app</a> が前提になります。ざっくり内容を書くと</p>
<ul>
<li>ember-rails で Ember.js 2.18 の環境を動かしている</li>
<li>Sprockets での ES6 Module 対応済</li>
<li>現実世界の複雑さを持ち込むために敢えて以下の手法を導入
<ul>
<li>Embedded Ember App</li>
<li>Multiple で動かせる構成</li>
<li>一部コンポーネントの共通ライブラリ化
<ul>
<li>ember-libs という名前で別フォルダに切り出している</li>
</ul>
</li>
<li>Bootstrap の利用</li>
</ul>
</li>
<li>複雑さでは以下もありうるが面倒などの理由でやってない
<ul>
<li>i18n.js での多言語対応</li>
<li>コンポーネント以外の共通ライブラリ化</li>
</ul>
</li>
</ul>
<p>という感じ。</p>
<h2 id="ember-rails-用の-js-のコードが読まれないようにコメントアウト">ember-rails 用の JS のコードが読まれないようにコメントアウト</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/8dd44540bd7d352e497f87a9a12df5ad3cf6efbb">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/8dd44540bd7d352e497f87a9a12df5ad3cf6efbb</a>
のあたりのコミット。</p>
<p>本当は後からやった手順だけど、ここで読まれてるコードが邪魔になるので先にコメントアウトしておく方が後の手順でハマらなくて済むのでここに置いといた。</p>
<p>まあ実は ember-cli-rails のアプリが読まれるところで
ember-rails が require されてなければいいだけなので
application.js で require_tree とかをしなければ良かったりはする。</p>
<h2 id="docker-環境への-ember-cli-の導入">Docker 環境への ember-cli の導入</h2>
<p>Docker でアプリが動くようにしているので、
ember-cli も Docker で動くようにしている。</p>
<h3 id="docker-で最新-lts-の-node-dot-js-が使われるように設定">Docker で最新 LTS の Node.js が使われるように設定</h3>
<p>ember-cli と直接は関係ないけど、Node.js は入れる必要があるのでやってる手順。</p>
<p>とりあえず最新の LTS を入れておく。
Ubuntu で普通に apt から入れると 10 系が入っちゃうので
yarn の apt リポジトリを登録してそこからインストールする。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">RUN</span> curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add - <span style="color:#ae81ff">\
</span><span style="color:#ae81ff"></span><span style="color:#f92672">&amp;&amp;</span> echo <span style="color:#e6db74">&#34;deb https://dl.yarnpkg.com/debian/ stable main&#34;</span> | tee /etc/apt/sources.list.d/yarn.list<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#66d9ef">RUN</span> apt-get update -qq <span style="color:#f92672">&amp;&amp;</span> apt-get install -y nodejs yarn<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h3 id="ember-cli-を-global-に導入">ember-cli を Global に導入</h3>
<p>ember-rails で動いているアプリは Ember.js 2.18.2 で動いているので
ember-cli も 2.18.2 を導入する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-Dockerfile" data-lang="Dockerfile"><span style="color:#66d9ef">RUN</span> yarn global add ember-cli@2.18.2<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><h2 id="アプリの初期構築">アプリの初期構築</h2>
<p>上記手順で導入した ember-cli を使って改めて Ember.js アプリを構築する。ゼロから作っておく方が、より ember-cli-rails に向いた形になるとの判断。</p>
<h3 id="ember-cli-で移植先のアプリの雛形を構築">ember-cli で移植先のアプリの雛形を構築</h3>
<p><code>RAILS_ROOT/ember/todo-app</code> に構築する。</p>
<p>ember-cli-rails の README だと <code>RAILS_ROOT/frontend</code> に構築するように書かれているが、複数の Ember.js アプリを平等に扱える形にしたいのと
Ember.js アプリのコード置場を <code>RAILS_ROOT/frontend</code> にしていると
Ember.js から別のフレームワークに差し替えが決まって、その移行作業をしている間に</p>
<ul>
<li>frontend に新しいフレームワークで構築しようと思ったら既に Ember.js がいた</li>
<li>新しいフレームワークでの実装を修正しようと思って frontend 以下を探していて時間を潰した</li>
</ul>
<p>ということが起こりそうなので、フレームワーク名は明示しておきたいお気持ち。というわけで <code>ember</code> というフォルダの下に更にフォルダを掘っているが、この考え方、あまり合意を得られた試しはない。みんな移行は発生しないつもりなのかな。</p>
<p>ま、とりあえず以下のコマンドを実行したら <code>RAILS_ROOT/ember/todo-app</code> に雛形が作成される。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ ember new todo-app --no-welcome --skip-git --yarn --dir ember/todo-app
</code></pre></div><p>なお、面倒なので <code>docker-compose run</code> とかは省略している。ここより下の部分でも同様に省略しているので、そのあたりは読みながら脳内で補完とかしてください。</p>
<h4 id="オプションについて">オプションについて</h4>
<dl>
<dt><code>--no-welcome</code></dt>
<dd>どうせ後で消すファイルが作られるだけなので出す必要なし</dd>
<dt><code>--skip-git</code></dt>
<dd>Rails アプリと同じリポジトリに作るので git init は不要</dd>
<dt><code>--yarn</code></dt>
<dd>yarn を使い慣れてるからそれを指定。ただ <code>yarn link</code> に問題があるから <code>npm</code> を使う方がいいかも?</dd>
<dt><code>--dir ember/todo-app</code></dt>
<dd>ember というフォルダの中に構築するので指定する必要あり</dd>
</dl>
<h3 id="ember-cli-rails-addon-の導入">ember-cli-rails-addon の導入</h3>
<p>ember-cli-rails と連携して ember-cli app を動かす時には
ember-cli app 側に <a href="https://github.com/rondale-sc/ember-cli-rails-addon">ember-cli-rails-addon</a> を入れておく必要があるので、早い段階で追加しておく</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember/todo-app &amp;&amp; ember install ember-cli-rails-addon
</code></pre></div><p>これを入れておくと CSRF Token のことを意識しないで済むし、ファイルを更新するだけで Rails から読めるように Ember.js app を build してくれたりする。というか、入れてないとそれらがうまく動かなくてハマる。</p>
<h3 id="active-model-adapter-の導入">active-model-adapter の導入</h3>
<p><a href="https://github.com/ember-data/active-model-adapter">active-model-adapter</a> は
ActiveModelSerializer の出力をいい感じに Ember.js で扱えるようにする Addon で
ember-rails でも使われている。</p>
<p>というわけでこいつも Rails でいい感じに Ember.js を使うためには必要なので先に入れておく</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember/todo-app &amp;&amp; ember install active-model-adapter
</code></pre></div><h2 id="ember-cli-rails-の導入と設定">ember-cli-rails の導入と設定</h2>
<p>ここは Rails 側の作業。ひとまず ember-cli-rails の導入に留め、
ember-rails は一旦そのままにしておく。</p>
<h3 id="ember-cli-rails-の導入">ember-cli-rails の導入</h3>
<p>これは単に Gemfile に記載して <code>bundle install</code> を叩くだけである</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">gem <span style="color:#e6db74">&#39;ember-cli-rails&#39;</span>
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ bundle
</code></pre></div><h3 id="config-initializers-ember-dot-rb-で-ember-rails-の設定">config/initializers/ember.rb で ember-rails の設定</h3>
<p>ember-cli-rails で generate コマンドが用意されているのでまずはそれでファイルを生成する</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ rails generate ember:init
</code></pre></div><p>これで <code>config/initializers/ember.rb</code> が作られるの。初期状態は以下の通り。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">EmberCli</span><span style="color:#f92672">.</span>configure <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>c<span style="color:#f92672">|</span>
  c<span style="color:#f92672">.</span>app <span style="color:#e6db74">:frontend</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><p>それに変更を加えて、以下のようにする</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">EmberCli</span><span style="color:#f92672">.</span>configure <span style="color:#66d9ef">do</span> <span style="color:#f92672">|</span>c<span style="color:#f92672">|</span>
  c<span style="color:#f92672">.</span>app <span style="color:#e6db74">:todo_app</span>, name: <span style="color:#e6db74">&#39;todo-app&#39;</span>, <span style="color:#e6db74">path</span>: <span style="color:#66d9ef">Rails</span><span style="color:#f92672">.</span>root<span style="color:#f92672">.</span>join(<span style="color:#e6db74">&#39;ember&#39;</span>, <span style="color:#e6db74">&#39;todo-app&#39;</span>), <span style="color:#e6db74">yarn</span>: <span style="color:#66d9ef">true</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><h4 id="引数について">引数について</h4>
<dl>
<dt>第一引数</dt>
<dd>あとで mount する時に使う値</dd>
<dt>name</dt>
<dd>ハイフン繋ぎにしたかったので指定しているが、多分なんでもいい</dd>
<dt>path</dt>
<dd><code>ember/todo-app</code> に構築しているのでそれを見てもらえるように指定</dd>
<dt>yarn</dt>
<dd>yarn を使い慣れてるので指定。ただ yarn link がうまく動かないのでやめた方がいいかも</dd>
</dl>
<h3 id="config-routes-dot-rb-で-ember-dot-js-app-を-mount">config/routes.rb で Ember.js App を Mount</h3>
<p>Embedded Ember.js App というわけで
Controller を自前で用意するので、contoller としてそれを指定する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby">mount_ember_app <span style="color:#e6db74">:todo_app</span>, <span style="color:#e6db74">to</span>: <span style="color:#e6db74">&#39;/ember_cli_todo_items&#39;</span>, <span style="color:#e6db74">controller</span>: <span style="color:#e6db74">&#39;ember_cli_todo_items&#39;</span>, <span style="color:#e6db74">action</span>: <span style="color:#e6db74">&#39;index&#39;</span>
</code></pre></div><h3 id="controller-等の用意">Controller 等の用意</h3>
<p>移植途中で元のアプリに戻せなくなるのは移行失敗時のリカバリを考えると嫌なのと元の挙動を確認したくなった時のために元の PATH で動く状態にすぐ戻せるようにしておきたい。というわけで別の PATH を用意して、ember-cli で構築したアプリはそこで動くようにする。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ rails g controller ember_cli_todo_items index
</code></pre></div><p>あとは ember-rails 実装での Controller, View を参考にしたりして以下の感じに。</p>
<h4 id="controller">Controller</h4>
<p>特にサーバから何かを View に渡す必要はないので基本的に空っぽ。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-ruby" data-lang="ruby"><span style="color:#66d9ef">class</span> <span style="color:#a6e22e">EmberCliTodoItemsController</span> <span style="color:#f92672">&lt;</span> <span style="color:#66d9ef">ApplicationController</span>
  <span style="color:#66d9ef">def</span> <span style="color:#a6e22e">index</span>
  <span style="color:#66d9ef">end</span>
<span style="color:#66d9ef">end</span>
</code></pre></div><h4 id="view">View</h4>
<p>rootElement を用意して、そこに initializer に渡す data 属性を置いておく。</p>
<p>さらに ember-cli で生成する JS/CSS が読まれるように設定する。
(今回 CSS は書かないけど……)</p>
<pre><code class="language-haml" data-lang="haml">#ember-cli-todo-app{ data: { email: current_user.email } }

%base{ href: '/ember_cli_todo_items/' }
= include_ember_script_tags :todo_app
= include_ember_stylesheet_tags :todo_app
</code></pre><p><code>%base</code> は Ember.js のアプリケーションを動かす PATH に合わせる必要があるのと最後の <code>/</code> が抜けていると script や stylesheet で正しく PATH 解決できないので注意。</p>
<p><a href="https://github.com/seanpdoyle/ember-cli-rails-assets">ember-cli-rails-assets</a> の README を見ていると
include_ember_script_tags とかに追加の引数で
<code>prepend: '/ember_cli_todo_items/'</code> とか書いていれば <code>%base</code> は使わなくて良さそうだけどまだ試してはいない</p>
<h2 id="ember-cli-で作ったアプリが-rails-上で動くようにする">ember-cli で作ったアプリが Rails 上で動くようにする</h2>
<p>Rails 側の設定はここまでで完了しているはずなので次は ember-cli 側の設定を進めて Rails 上で動くようにしていく。</p>
<h3 id="config-environement-dot-js-の設定">config/environement.js の設定</h3>
<p>まず config/environment.js で以下を指定している</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">modulePrefix</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;todo-app&#39;</span>,
<span style="color:#a6e22e">rootURL</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;/&#39;</span>,
<span style="color:#a6e22e">locationType</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;hash&#39;</span>,
</code></pre></div><p>rootURL は ember-cli-rails の README 通りに設定していると
<code>/ember_cli_todo_app</code> になりそうだがそれを指定すると Ember.js App が読まれた時に URL が
<code>http://localhost:3000/ember_cli_todo_app/ember_cli_todo_app</code> というように
<code>ember_cli_todo_app</code> が二重に表示されてしまう。</p>
<p>ちゃんと調べられていないが、恐らく README の記載では SPA として Ember が動く想定であって、
<code>include_ember_script_tags</code> で読み込まれる Embedded App という想定ではないからと思われる。</p>
<p>locationType は多分 hash にしておく方が
ember-rails からの移行だと URL が変わらなくて良さそう、と思いつつ、深い PATH とかにしてないからか検証はできてない</p>
<h3 id="app-dot-js-の設定">app.js の設定</h3>
<p>あとは app.js の方でも config/environemt から読むようにしたり
rootElement を指定したりしている。</p>
<p>rootElement は config/environment で指定して、
app.js ではそれを利用するのが正しい気はするが、一旦放置。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">TodoApp</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Application</span>.<span style="color:#a6e22e">extend</span>({
  <span style="color:#a6e22e">rootElement</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#todo-app&#39;</span>,
  <span style="color:#a6e22e">modulePrefix</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">modulePrefix</span>,
  <span style="color:#a6e22e">podModulePrefix</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">podModulePrefix</span>,
  <span style="color:#a6e22e">locationType</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">locationType</span>,
  <span style="color:#a6e22e">rootUrl</span><span style="color:#f92672">:</span> <span style="color:#a6e22e">config</span>.<span style="color:#a6e22e">rootUrl</span>,
  <span style="color:#a6e22e">Resolver</span>
});
</code></pre></div><h2 id="アプリの移植">アプリの移植</h2>
<p>これまでの手順ではとりあえず ember-cli で構築した空っぽの Ember.js アプリが
Rails の指定した PATH 上でとりあえず動くことを主眼に当ててやってきている。</p>
<p>ここからはようやく、既存アプリの実装の移植。いくつかの段階に分かれるから、ここからも長いんだけどね。</p>
<h3 id="共通化してない機能のみで起動するようにする">共通化してない機能のみで起動するようにする</h3>
<p>ember-libs というフォルダに切り出している部分までまとめて対応しようとするとえらく面倒なので、そのあたりを呼び出している部分はコメントアウトなどで呼び出されないようにして、とりあえず最低限の表示がされる程度を目指して移植するフェーズ。</p>
<p>やってることは
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/3c31b5bcf86d68ac5db0eca9bb4af410df31c2f1">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/3c31b5bcf86d68ac5db0eca9bb4af410df31c2f1</a>
のコミットが全てである。</p>
<p>ざっくり説明すると</p>
<ul>
<li>ember-rails で作っていた adapter, component, controller, initializer, model, route, template 等を ember-cli で作ったアプリの適切なディレクトリに配置
<ul>
<li>router.js は ember-cli 自動生成の雛形に必要な部分だけ移植している</li>
<li>adapter は ActiveModelAdapter を active-model-adapter addon から import するように変更している</li>
</ul>
</li>
<li>共通ライブラリに持って行った component の呼び出し部分をコメントアウト</li>
</ul>
<p>という感じ。これをすることで、不完全ながらも元のアプリと同じものが動くようになる</p>
<p>ちなみにもっと複雑なアプリだと mixin を使っていたりなどするがそれもテキトーに読み込まれないようにするなどで対処したらなんとなーく動く感じになるはず。なんとなーく。</p>
<p>そうそう。ember-cli 対応することで各ファイルの単体テストなんかを書けるようになってるはずだけど元々そんなものを書いてないので、今回もそこまで頑張る必要はないと判断してフロントエンドのテストは一切書いていません。自動生成されたファイルはそのまま追加しているけど。</p>
<p>一応、動作保証は system spec である程度担保しているつもり。
ember-rails の時はそこでしか保証してないしね。</p>
<h3 id="共通ライブラリの-addon-化">共通ライブラリの Addon 化</h3>
<p>上までの段階だと共通ライブラリにした部分が全然動かないので、当然それを動く状態に持って行く必要がある。</p>
<p>で、その際には、共通ライブラリを addon として構築し直すことをオススメする。なぜなら、なんか無理やり自前の仕組みで動くようにするより公式に提供されてる仕組みに乗っかる方が後々楽そうだからだ。</p>
<p>ember-rails で動かしていた時に自前で解決していたのは
ember-rails だと addon がサポートされてないからというだけの理由だしね。</p>
<p>Addon 化の手順は大体以下の感じ</p>
<ol>
<li>ember-cli で Addon を generate</li>
<li>共通ライブラリのコンポーネントを Addon に移植
<ul>
<li>もし共通ライブラリに mixin とかも作っていたら同様に移植すること</li>
</ul>
</li>
<li>Addon をアプリ側で使えるように変更</li>
</ol>
<p>なお今回の手順では App と同様に Addon のテストを書く、みたいな丁寧な暮らしはしていない。元々書いてないんだし、そこまで頑張る必要もないという判断。</p>
<p>あとやってることは <a href="https://cli.emberjs.com/release/writing-addons/intro-tutorial/">Addon 作成のチュートリアル</a> に書いていることをベースにしている</p>
<h4 id="ember-cli-で-addon-を-generate">ember-cli で Addon を generate</h4>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/4d6713abfbed3217d65f7382e1f46d341c11d6aa">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/4d6713abfbed3217d65f7382e1f46d341c11d6aa</a>
でやっていることである</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember &amp;&amp; ember addon my-components --skip-git --yarn
</code></pre></div><p>というように適当な名前の Addon を作ってるだけ。</p>
<h4 id="共通ライブラリのコンポーネントを-addon-に移植">共通ライブラリのコンポーネントを Addon に移植</h4>
<ul>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/cde30b30727d6eb9507b835d009d85759ddff5ee">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/cde30b30727d6eb9507b835d009d85759ddff5ee</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/4ad2f8a59ccc846a63e6ff31c8f8b53df81d8e42">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/4ad2f8a59ccc846a63e6ff31c8f8b53df81d8e42</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/30439f21f0659044bb4d2ea80ce68a2f8e0011b7">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/30439f21f0659044bb4d2ea80ce68a2f8e0011b7</a></li>
</ul>
<p>あたりでやってる作業。</p>
<p>実際の作業では1つ目を移植してみた段階で、動作確認のためにアプリ側で Addon が使えるように設定していたりする。</p>
<p>ちなみに ember の addon は
app/components のファイルから addon/components のファイルを import してやるみたいなお作法がある。</p>
<h4 id="addon-をアプリ側で使えるように変更">Addon をアプリ側で使えるように変更</h4>
<p>まずは上の手順で作った my-components という addon を
App 側で読み込めるように package.json の dependencies に以下を書き加える</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json"><span style="color:#e6db74">&#34;my-components&#34;</span><span style="color:#960050;background-color:#1e0010">:</span> <span style="color:#e6db74">&#34;link:../my-components&#34;</span>
</code></pre></div><p>ember-cli の公式ドキュメントだと「yarn link を使う」というように書いているがそれだとうまくいかないみたいな Issue が何個か立っているのでドキュメント通りのやりかたは諦めて、それらの Issue の中に書かれている方法を選択した。</p>
<p>npm link だとうまくいきそうな雰囲気もあるので
yarn を使わず npm link にしておけばいい可能性はある。未検証。</p>
<p>まあそれらは置いといて、とにかく Addon が使える状態になったら各コンポーネントでコメントアウトとかで読めなくしていた共通ライブラリの呼び出しを元に戻したり記述を直したりして、元のように動くようにしましょう。</p>
<h3 id="ember-bootstrap-の導入と-bootstrap-を使った機能を移植">ember-bootstrap の導入と bootstrap を使った機能を移植</h3>
<p>ここまでやって、麦汁さんは「わーい動いた〜」と思っていたけどボタンとかをクリックしてみると、Bootstrap 関係のやつが動かない。</p>
<p>そう。元の記述のままだと Bootstrap 関係のやつはメソッド呼び出しでエラーになって動かないのです。というわけでそれらも動くようにしないといけない。</p>
<p>というところで、どうやるのが手っ取り早いかというと
<a href="https://github.com/kaliber5/ember-bootstrap">ember-bootstrap</a> という Addon が転がっているのでそれをインストールして使うように変更するのが多分手っ取り早い。</p>
<h4 id="ember-boostrap-のインストール-初期設定">ember-boostrap のインストール・初期設定</h4>
<p>最新版は <a href="mailto:ember-cli-rails@2.18.2">ember-cli-rails@2.18.2</a> をサポートしていないので3系を使う必要がある。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember/todo-app &amp;&amp; ember install ember-bootstrap@3.1.4
</code></pre></div><p>その上で、元々使っている Bootstrap のバージョンに合わせて
ember-bootstrap でも3系が使われるように設定する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">$ cd ember/todo-app &amp;&amp; ember generate ember-bootstrap --bootstrap-version=3
</code></pre></div><h4 id="bootstrap-を使ってる機能の移植">Bootstrap を使ってる機能の移植</h4>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/22a3bff502ce993c2f2288623b061a4f38652a29">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/22a3bff502ce993c2f2288623b061a4f38652a29</a>
でやっていることである。</p>
<p>基本的には、自前で bootstrap 用に DOM を組み立てていたところを
ember-bootstrap の Modal コンポーネント用に書き換えて、開いたりするための挙動を修正するだけである。</p>
<p>ember-boostrap の公式ドキュメントでは Handlebars の書き方が
<code>&lt;BsModal&gt;</code> みたいになっていて
3.4 以降でサポートされた Angle Bracket 方式の表記になっているが、
<code>&lt;&gt;</code> は <code>{{}}</code> に置き換えて
PascalCase を snake-cake にしたりするぐらいで動くので、落ち着いて移植しよう。</p>
<h3 id="既存の-system-spec-が新しい-path-で動くことを確認">既存の system spec が新しい PATH で動くことを確認</h3>
<p>ここまでやると、全機能を手動で確認できる状態になってるので既存の system spec がアクセスするポイントを新しく作ったアプリの方に変更しテストが通ることを確認すると、ちゃんと移植できたんだなって安心できる</p>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/0c59057ec458edb7cda0febd15585dfc0a916bc1">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/0c59057ec458edb7cda0febd15585dfc0a916bc1</a></p>
<h2 id="元の-path-で動くようにする">元の PATH で動くようにする</h2>
<h3 id="元の-path-への再移植">元の PATH への再移植</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/334ce5052564a1499de03fb5a6630af3a339af21">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/334ce5052564a1499de03fb5a6630af3a339af21</a>
でやっていること。</p>
<ol>
<li>EmberCliTodoItemsController と TodoItemsController に移植</li>
<li>app/views/ember_cli_todo_items/index.html.haml を app/views/todo_items/index.html.haml に移植
<ul>
<li>rootElement に使う ID も <code>todo-app</code> に変更</li>
<li><code>%base</code> の href 属性も <code>/todo_items/</code> に変更</li>
</ul>
</li>
<li>resources :ember_cli_todo_items を削除
<ul>
<li>同時に controller, view も消す</li>
</ul>
</li>
<li>mount_ember_app で <code>to</code> と <code>controller</code> の指定を変更
<ul>
<li><code>to</code> を <code>/todo_items</code> に変更</li>
<li><code>controller</code> を <code>todo_items</code> に変更</li>
</ul>
</li>
<li>Ember.js 側で rootElement を <code>#todo-app</code> にする</li>
</ol>
<h3 id="テストの-path-を戻す">テストの PATH を戻す</h3>
<p>これは
<a href="#%E6%97%A2%E5%AD%98%E3%81%AE-system-spec-%E3%81%8C%E6%96%B0%E3%81%97%E3%81%84-path-%E3%81%A7%E5%8B%95%E3%81%8F%E3%81%93%E3%81%A8%E3%82%92%E7%A2%BA%E8%AA%8D">既存の system spec が新しい PATH で動くことを確認</a> でやったことを revert してテストが通ることを確認したら OK</p>
<h2 id="ember-rails-関連の削除">ember-rails 関連の削除</h2>
<h3 id="ember-rails-用のコードの削除">ember-rails 用のコードの削除</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/138ac7b8a76ec0f299edb2d626c9252927647229">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/138ac7b8a76ec0f299edb2d626c9252927647229</a>
でやってるように
app/assets/javascripts の下にある
ember-rails 関連のコードを全部消すだけ。</p>
<h3 id="ember-rails-用の設定を削除">ember-rails 用の設定を削除</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/9e036017b7ebee1a84b6f6847d5079a61ca5177c">https://github.com/mugijiru/ember-rails-todo-app/pull/18/commits/9e036017b7ebee1a84b6f6847d5079a61ca5177c</a>
でやってるように</p>
<ul>
<li><code>config/application.rb</code></li>
<li><code>config/initializers/assets.rb</code></li>
</ul>
<p>の中に ember-rails のために書いた設定を丸っと消しましょう。もう不要なので。</p>
<h3 id="ember-rails-及びその関連-gem-と決別">ember-rails 及びその関連 Gem と決別</h3>
<p>設定も消せたら ember-rails, ember-source も要らないのでさっくり Gemfile から消して bundle install し直しましょう。イエイ。</p>
<h2 id="github-actions-の修正">GitHub Actions の修正</h2>
<p>あとはやり残しとしては
CI でもちゃんとテストが通るようにすること。</p>
<p>このプロジェクトでは GitHub Actions を使ってるのでそのワークフローを修正する</p>
<h3 id="最新-lts-の-node-dot-js-を使うようにする">最新 LTS の Node.js を使うようにする</h3>
<p>Dockerfile のところでもやりましたね。同じようなことをしましょう。とは言っても setup-node という action が公式に提供されているし
<a href="https://docs.github.com/ja/actions/guides/building-and-testing-nodejs">公式ドキュメント</a> もあるので、それに従って設定するだけで使えるようになる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Use Node.js</span>
  <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-node@v1</span>
  <span style="color:#f92672">with</span>:
    <span style="color:#f92672">node-version</span>: <span style="color:#ae81ff">14.</span><span style="color:#ae81ff">x</span>
</code></pre></div><h3 id="ember-cli-をインストール">ember-cli をインストール</h3>
<p>これも似たようなことを Dockerfile でやってるので同じ感じに。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">install ember-cli</span>
  <span style="color:#f92672">run</span>: <span style="color:#ae81ff">yarn global add ember-cli</span>
</code></pre></div><h3 id="ember-addon-及び-ember-app-で-yarn-install">Ember Addon 及び Ember App で yarn install</h3>
<p>こちらも依存を解決してやる必要があるので。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yaml" data-lang="yaml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Ember.js Addon</span>
  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    cd ember/my-components
</span><span style="color:#e6db74">    yarn</span>    
- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Setup Ember.js App</span>
  <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    cd ember/todo-app
</span><span style="color:#e6db74">    yarn</span>    
</code></pre></div><p>ここまでやると
GitHub Actions でもテストが通るし普通に使えるようになる。やったね。</p>
<h2 id="最後に">最後に</h2>
<p>以上の手順で ember-rails から ember-cli-rails への置き換えができます。</p>
<p>現実世界のアプリケーションはこのケースよりもっと複雑でしょうけども、やってやれないことはないはず。</p>
<p>それに ember-cli が使えるようにしておかないと
3系に移行ができないし、つまり、サポート切れのフレームワークを使い続けることになるのでもしまだ ember-rails のアプリが残っていたら頑張ってやっていきましょ。別フレームワークに置き換えるよりは労力はかからないはずですし。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails でユーザー情報を Rails から inject</title>
            <link>https://mugijiru.github.io/posts/ember-rails-inject-from-rails/</link>
            <pubDate>Sun, 28 Feb 2021 13:10:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-inject-from-rails/</guid>
            <description>フロントエンドのフレームワークを使っていて、そのフレームワークで Server Side Rendering をしてない時に API 経由でデータ渡すよりも表示用の HTML 経由で直接データを渡し</description>
            <content type="html"><![CDATA[<p>フロントエンドのフレームワークを使っていて、そのフレームワークで Server Side Rendering をしてない時に
API 経由でデータ渡すよりも表示用の HTML 経由で直接データを渡したい時がある。</p>
<p>ember-rails を使ってる時もそれはあって、今回は Haml 経由で Ember.js に情報を渡して表示する方法を書いてみた。もちろん旧来版と ES6 Module 対応版の両方で実装している。</p>
<h2 id="旧来版">旧来版</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/16">https://github.com/mugijiru/ember-rails-todo-app/pull/16</a> で実装したやつ。</p>
<h3 id="おおまかな実装内容">おおまかな実装内容</h3>
<p>こちらは名前空間に Ember.js の外からアクセスできるので
Haml 内に JavaScript を埋め込んで Ember に渡すというちょっと乱暴なことができる。</p>
<p>今回は email を todo-items テンプレート内で表示したかったので
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/16/files#diff-69c2e4b0a6040f2873e963c79265340fd97c099e1ea1a7fbf579902259126e3fR1">Ember.js の呼び出し元の haml</a> 内で</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#f92672">:</span><span style="color:#a6e22e">javascript</span>
  <span style="color:#a6e22e">TodoApp</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;session:current-user&#39;</span>, <span style="color:#a6e22e">Ember</span>.Object.<span style="color:#a6e22e">extend</span>({ <span style="color:#a6e22e">email</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#{current_user.email}&#39;</span> }));
  <span style="color:#a6e22e">TodoApp</span>.<span style="color:#a6e22e">inject</span>(<span style="color:#e6db74">&#39;controller:todo-items&#39;</span>, <span style="color:#e6db74">&#39;current-user&#39;</span>, <span style="color:#e6db74">&#39;session:current-user&#39;</span>);
</code></pre></div><p>と書いてみた。</p>
<p>以下にもう少し詳細に書いてみる。</p>
<h3 id="ユーザー情報の登録">ユーザー情報の登録</h3>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">TodoApp</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;session:current-user&#39;</span>, <span style="color:#a6e22e">Ember</span>.Object.<span style="color:#a6e22e">extend</span>({ <span style="color:#a6e22e">email</span><span style="color:#f92672">:</span> <span style="color:#e6db74">&#39;#{current_user.email}&#39;</span> }));
</code></pre></div><p>という記述で JavaScript の中に Haml での Ruby のコード呼び出し機能を用いて
email を EmberObject を継承したクラスにぶち込んでいる。</p>
<p>正直 <code>:javascript</code> で書いて Ruby のコードを呼び出すのは結構乱暴だとは思うけどできちゃうのでやっちゃった。</p>
<h3 id="コントローラへの-inject">コントローラへの inject</h3>
<p>アプリケーションに <code>session:current-user</code> として登録できたので、後はもう</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">TodoApp</span>.<span style="color:#a6e22e">inject</span>(<span style="color:#e6db74">&#39;controller:todo-items&#39;</span>, <span style="color:#e6db74">&#39;current-user&#39;</span>, <span style="color:#e6db74">&#39;session:current-user&#39;</span>);
</code></pre></div><p>として controller に inject することができる。</p>
<h3 id="template-での表示">template での表示</h3>
<p>inject された controller の template で <code>{{current-user.email}}</code> と記述するだけでそのユーザーのメアドが表示される。以上。</p>
<h2 id="es6-module-対応版">ES6 Module 対応版</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/17">https://github.com/mugijiru/ember-rails-todo-app/pull/17</a> で実装したやつ。</p>
<h3 id="おおまかな実装内容">おおまかな実装内容</h3>
<p>こちらは旧来版とは違って名前空間は隠蔽されているため
Haml で JavaScript を書いて埋め込むなんて荒技はできない。</p>
<p>だけどまあそんなことをしなくても
data 属性に情報を埋めておいてそれを initializer で取得して使えばいいだけである。</p>
<h3 id="haml-へのデータ埋め込み">Haml へのデータ埋め込み</h3>
<p>Haml の方では</p>
<pre><code class="language-haml" data-lang="haml">#todo-app{ data: { email: current_user.email } }
</code></pre><p>こんな感じにデータを埋めておく。それを Ember.js の initializer で取得して処理してあげれば良い。</p>
<h3 id="initializer-でのデータの取得">initializer でのデータの取得</h3>
<p>まずはデータを</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">currentUser</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.Object.<span style="color:#a6e22e">extend</span>({
  <span style="color:#a6e22e">email</span><span style="color:#f92672">:</span> document.<span style="color:#a6e22e">querySelector</span>(<span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">rootElement</span>).<span style="color:#a6e22e">dataset</span>.<span style="color:#a6e22e">email</span>
});
</code></pre></div><p>という感じで取得して適当な変数に放り込んでおく。ま、大体普通の JavaScript なので何も難しいことはない。</p>
<h3 id="アプリケーションへの登録">アプリケーションへの登録</h3>
<p>上で取得したデータをアプリケーションから見れるように登録してあげる必要があるので以下のように <code>application.register()</code> でデータを登録する。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;session:current-user&#39;</span>, <span style="color:#a6e22e">currentUser</span>);
</code></pre></div><h3 id="controller-への-inject">controller への inject</h3>
<p>上に書いた感じで application に登録してしまえば、後は旧来版と同じように</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">inject</span>(<span style="color:#e6db74">&#39;controller:todo-items&#39;</span>, <span style="color:#e6db74">&#39;current-user&#39;</span>, <span style="color:#e6db74">&#39;session:current-user&#39;</span>);
</code></pre></div><p>という感じで設定できる。</p>
<h3 id="template-での表示">template での表示</h3>
<p>あとは旧来版と同じく
inject された controller の template で <code>{{current-user.email}}</code> と記述するだけでそのユーザーのメアドが表示されると。うん、簡単でしたね。</p>
<h2 id="最後に">最後に</h2>
<p>API を経由せずに Ember.js にデータを渡す方法が旧来版と ES6 Module 対応版の両方で書けることがわかったので、旧来版から移行しようとした時もすぐ書き直せそうで安心。</p>
<p>ES6 Module 対応版の方は、
ember-rails から ember-cli-rails とかに乗り換えてもそのまま使えそうだしね。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails でコンポーネントをサブフォルダに配置する</title>
            <link>https://mugijiru.github.io/posts/ember-rails-component-in-subfolder/</link>
            <pubDate>Sun, 28 Feb 2021 11:19:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-component-in-subfolder/</guid>
            <description>Ember.js に限らずコンポーネントは増えてくるとサブフォルダに分割して管理したくなるよね。ということでそのあたりの記事。 これも、ES6 Module 対応版と旧来版</description>
            <content type="html"><![CDATA[<p>Ember.js に限らずコンポーネントは増えてくるとサブフォルダに分割して管理したくなるよね。ということでそのあたりの記事。</p>
<p>これも、ES6 Module 対応版と旧来版の両方を書く。
ES6 Module 対応版は何も考えることがないので、この記事は旧来版のためにあるようなものだけど。</p>
<h2 id="es6-module-対応版の場合">ES6 Module 対応版の場合</h2>
<p>上に書いたようにこれは <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/14">https://github.com/mugijiru/ember-rails-todo-app/pull/14</a> に実装してあるけどとっても簡単</p>
<h3 id="component-をサブフォルダに移動">component をサブフォルダに移動</h3>
<p><code>components</code> の下に適当なフォルダを掘ってその中に移動するだけ。</p>
<h3 id="template-をサブフォルダに移動">template をサブフォルダに移動</h3>
<p><code>templates/components</code> の下に適当なフォルダを掘ってその中に移動するだけ。</p>
<h3 id="template-からの呼び出し">template からの呼び出し</h3>
<p>template, component をそれぞれ</p>
<dl>
<dt>template</dt>
<dd><code>templates/components/hoge/fuga.hbs</code></dd>
<dt>component</dt>
<dd><code>components/hoge/fuga.module.es6</code></dd>
</dl>
<p>と配置した場合は
<code>{{hoge/fuga}}</code> と書いて呼び出せばいい感じに動く。以上。</p>
<p>こういう感じで動くように <a href="https://github.com/ember-cli/ember-resolver/tree/v0.1.21">ember-resolver@0.1.21</a> が作られてるっぽいのでとても楽。</p>
<p>Ember.js のドキュメントなどを見ている感じだと多分もっと新しいバージョンでも同じ感じで動くっぽい。というわけで Ember.js@3 にしても多分動きそうなので安心感がある。</p>
<h2 id="旧来版の場合">旧来版の場合</h2>
<p>これは GlobalsResolver の挙動のおかげでちょっと大変。</p>
<p>と言っても
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/15">https://github.com/mugijiru/ember-rails-todo-app/pull/15</a>
で実装してある。</p>
<p>今回やりたかったことは、テンプレートとコンポーネントをサブフォルダに移動して扱えるようにすることなので、その実現方法を書いておく</p>
<h3 id="template-からの呼び出し">template からの呼び出し</h3>
<p><code>{{hoge/fuga}}</code> と呼び出した際に <a href="https://github.com/emberjs/ember.js/tree/v2.18.2/packages/ember-application/lib/system/resolver.js#L34">GlobalsResolver</a> でどう解釈されるとかというと
<a href="/posts/ember-rails-extract-common-libs/">前の記事</a> にも書いたように
Hoge という名前空間の FugaComponent を探しに行くようになってるというのが前提。</p>
<h3 id="component-をサブフォルダに移動">component をサブフォルダに移動</h3>
<p>GlobalsRegister の解釈に合わせて
FugaCompnent を Hoge 名前空間に所属させればいいので</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Hoge</span>.<span style="color:#a6e22e">FugaComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Compnent</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>という形で定義しておけばいい。</p>
<p>旧来方式だとファイル自体は components の中にあればファイル名も位置も何でもいいはずなので人間がわかりやすいように <code>components/hoge/fuga.js.es6</code> として配置したら良い。</p>
<p>また、事前に Hoge という名前空間は必要なので
<code>components/hoge.js.es6</code> とファイルで</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">Hoge</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namespace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><p>としておく。</p>
<p>前回の共通ライブラリ切り出しと大体似たお話ですね。</p>
<h3 id="template-をサブフォルダに移動">template をサブフォルダに移動</h3>
<p>これは難しいことは何もなくて
<code>templates/components/&lt;名前空間&gt;/&lt;コンポーネント名&gt;.hbs</code>
みたいに配置したら良い。</p>
<p>つまり <code>Hoge.FugaComponent</code> の場合は
<code>templates/components/hoge/fuga.hbs</code>
と置けばいい。</p>
<h3 id="さらにネストさせたい場合">さらにネストさせたい場合</h3>
<p>試してないけど、
<a href="https://github.com/emberjs/ember.js/blob/e2007b6ecb046fd06f6b43c381e8a1128914ad43/packages/%40ember/application/globals-resolver.js#L221">GlobalsRegister の実装</a> を見ている感じだと、多分</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">Hoge</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namesupace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Hoge</span>.<span style="color:#a6e22e">Fuga</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namesupace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">Hoge</span>.<span style="color:#a6e22e">Fuga</span>.<span style="color:#a6e22e">PiyoComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>にみたいな感じに名前空間をネストさせれば大丈夫そう。</p>
<h2 id="最後に">最後に</h2>
<p>前回の共通ライブラリ切り出しよりは簡単でしたね。</p>
<p>ES6 Module 対応版では直感的にやるだけで終わるし、旧来版でも共通ライブラリと大体やること一緒というか、それよりも手順が少ないので、サブフォルダへの移動を先にやった方が良かったかも。</p>
<p>あと、今回も両パターンでやってるので、
ES6 Module 移行前にこちらを実施しても簡単な修正で対応できることがわかりました。やったね。</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails でコンポーネントを共通ライブラリとして切り出す</title>
            <link>https://mugijiru.github.io/posts/ember-rails-extract-common-libs/</link>
            <pubDate>Sun, 28 Feb 2021 10:45:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-extract-common-libs/</guid>
            <description>ember-rails を使って1つの Rails アプリの上に複数の Ember.js アプリケーションを動かしていると各アプリで同じようなコンポーネントを使っていたり、あるいは同じようなコ</description>
            <content type="html"><![CDATA[<p>ember-rails を使って1つの Rails アプリの上に複数の Ember.js アプリケーションを動かしていると各アプリで同じようなコンポーネントを使っていたり、あるいは同じようなコンポーネントが必要だというのに気付いて共通ライブラリとして実装したくなることがある。あるんだよ。</p>
<p>というわけで、その共通化を2パターンでやってみた。
2パターンというのは 旧来の書き方の場合と
ES6 Module 対応版の場合とである。</p>
<p>なおいずれのパターンもサーバへのデプロイはやってないのでもしかしたらサーバ環境では動かないかもしれないがご容赦を。</p>
<h2 id="旧来版">旧来版</h2>
<p>先に答えを出すと
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13">https://github.com/mugijiru/ember-rails-todo-app/pull/13</a>
に実装した通りである。</p>
<h3 id="template-からの呼び出し">template からの呼び出し</h3>
<p>template で <code>{{ember-libs/button}}</code> と書いた場合に
Resolver には <code>component:ember-libs/button</code> として解釈するように要求されるっぽい。これはソースからではなく、挙動的に確かめただけ。</p>
<h3 id="コンポーネントの探索">コンポーネントの探索</h3>
<p>旧来の書き方の場合に探索に使われるのが GlobalsResolver というやつ。</p>
<p>この GlobalsResolver というやつは <a href="https://github.com/emberjs/ember.js/blob/e2007b6ecb046fd06f6b43c381e8a1128914ad43/packages/%40ember/application/globals-resolver.js#L59-L76">コメント</a> にも書かれてるように
<code>component:ember-libs/button</code> と渡されたら、
GlobalsResolver は <code>EmberLibs.ButtonComponent</code> として解釈するようになっている。つまり EmberLibs という名前空間の ButtonComponent を探しに行くようになっている。</p>
<h3 id="名前空間の定義">名前空間の定義</h3>
<p>というわけで、まずは <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-e1803bb0635866bc90975a1321dbfa6d20be59e76ec3d7b80c8acc4656f8af9fR6">ember-libs/ember-libs.js.es6</a> に書いてるように</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window.<span style="color:#a6e22e">EmberLibs</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Namespace</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><p>と書くことで
EmberLibs という名前空間を定義してやる。</p>
<p>一応 <code>ember-libs/ember-libs.js.es6</code> では require の順番として
ember はそこで定義している実装を使うので先に require してそのファイルで定義している名前空間を components で使うので components を require するより前に
require_self をしている。</p>
<h3 id="共通コンポーネントの記述">共通コンポーネントの記述</h3>
<p>各コンポーネントはその名前空間の下に入るように書けばいい。例えば <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-9f9be147342dc470d8f0cba8a06a55a210550e01b22502bd6e0aff0d029ae38cR1">ember-libs/components/button.js.es6</a> に書いてるように</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">EmberLibs</span>.<span style="color:#a6e22e">ButtonComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>というように書いてやれば動く。</p>
<h3 id="config-dot-handlerbars-dot-templates-root-の設定">config.handlerbars.templates_root の設定</h3>
<p>templates を ember-libs/templates に入れるので
Rails 側の設定で <code>config.handlebars.templates_root</code> に <code>ember-libs/templates</code> を追加するのを忘れずに。
ember-rails の設定例に従っていれば <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-c1fd91cb1911a0512578b99f657554526f3e1421decdb9e908712beab57e10f9R34">config/application.rb</a> に設定があるはず。</p>
<h3 id="利用側の設定">利用側の設定</h3>
<p>あとは <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/13/files#diff-2cb7f9d0c761533d0e2b01e0b7e6f4a34529c7b52f9a13c7493b2629251bccd8R9">todo-app/application.js.es6</a> に書いてるようにこの共通コンポーネントを使いたいアプリ側で</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#75715e">//= require ember-libs/ember-libs
</span></code></pre></div><p>としてやるだけでさくっと使えるようになる。</p>
<h3 id="他の-type-について">他の type について</h3>
<p>試してないけど mixin や service ぐらいなら同じノリでいけるんじゃないかなと思ってる。
model もいけそう。名前空間が変わるだけだし、その呼び出しも難しくないし、大体なんとかなりそう。</p>
<h3 id="余談-名前空間を分けない場合">余談: 名前空間を分けない場合</h3>
<p>上のようなやりかたをしているのは、名前空間を分けたいってのが先だったので、各アプリで名前空間を分ける必要がなければ、全部のアプリで</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js">window <span style="color:#a6e22e">App</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Application</span>.<span style="color:#a6e22e">create</span>()
</code></pre></div><p>とかしちゃって</p>
<p><code>ember-libs/components/button.js.es6</code> では普通に書く場合と同じように</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">App</span>.<span style="color:#a6e22e">ButtonComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>()
</code></pre></div><p>みたいにしておいて require したら <code>{{button}}</code> で使える。個人的には、名前空間が混ざるとどっちかが上書きされたりしそうで怖くて嫌だけど。</p>
<h2 id="es6-module-対応版の場合">ES6 Module 対応版の場合</h2>
<p>最初に答えを出すと
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12">https://github.com/mugijiru/ember-rails-todo-app/pull/12</a>
で実装したやつ。</p>
<h3 id="コンポーネントの探索">コンポーネントの探索</h3>
<p>ES6 Module で書かれている Ember Application では基本的に単一の名前空間しか持たないようである。また、使用される Resolver が <a href="https://github.com/ember-cli/ember-resolver/tree/v0.1.21">ember-resolver@0.1.21</a> となっている。</p>
<p>こいつは <code>component:ember-libs/button</code> と渡って来た時の解釈が GlobalsResolver と異なっている。この ember-resolver の場合は、アプリケーションの下の <code>components/ember-libs/button</code> を探しに行く。</p>
<p>なのだけど今回はそんなところを探しに行って欲しくないので、
regsiter を Ember.js で自動的に解決して対応してもらうのではなく
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-029812c538a995224fcf19bfa24f65558246c054aea77c95ec1f4a404b4f5256R1">ember-libs/ember-libs.module.es6</a> に書いているように、自前で</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">register</span>()
</code></pre></div><p>して対応することにした。</p>
<h3 id="コンポーネントの-register">コンポーネントの register</h3>
<p>基本的には以下のように書いておけば Button コンポーネントは動くようになる。</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Button</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;./components/button&#39;</span>;

<span style="color:#a6e22e">application</span>.<span style="color:#a6e22e">register</span>(<span style="color:#e6db74">&#39;component:ember-libs/button&#39;</span>, <span style="color:#a6e22e">Button</span>);
</code></pre></div><p>が、コンポーネントが増えていった際に全部そうやって書くのはアホらしい。というわけで、自動的に解決するようにした。</p>
<h3 id="コンポーネントの-auto-register">コンポーネントの auto register</h3>
<p>ES6 Module 対応して import している場合に ember-rails では実際はどんな形に transpile されるかというとどうやら requirejs の機能で読み込んだりしているらしい。</p>
<p>で export されているファイルは <code>requirejs.entries</code> に含まれているのでそこから必要なものを探し出して
<code>application.register</code> に対し、解釈してほしい名前で渡してクラスを渡しておけば
template で <code>{{ember-libs/button}}</code> とした時に require したクラスのインスタンスとして動いてもらえる。</p>
<p>という感じで自動的に register する処理を <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-029812c538a995224fcf19bfa24f65558246c054aea77c95ec1f4a404b4f5256R4">メソッドにして</a> おけば、利用側はそれを呼び出すだけでセットアップが済む</p>
<h3 id="config-dot-handlebars-dot-templates-root-の設定">config.handlebars.templates_root の設定</h3>
<p>やはりこちらの場合も templates を <code>ember-libs/templates</code> に入れるので
Rails 側の設定で <code>config.handlebars.templates_root</code> に <code>ember-libs/templates</code> を追加するのを忘れずに。
ember-rails の設定例に従っていれば <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-c1fd91cb1911a0512578b99f657554526f3e1421decdb9e908712beab57e10f9R34">config/application.rb</a> に設定があるはず。</p>
<h3 id="利用側の設定">利用側の設定</h3>
<p>アプリ側では <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/12/files#diff-97468a821d4c12c1b223617fba29257a5b1e00553a1b8e8f403ee99864756ebaR4">initializers/resolve-common-libs に書いている</a> ように
initializer で</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#a6e22e">EmberLibs</span>.<span style="color:#a6e22e">registerAll</span>()
</code></pre></div><p>を叩くだけでいい感じに使えるようになる。</p>
<h3 id="他の-type-について">他の type について</h3>
<p>試してないけど、component でやってみた所感。</p>
<p>mixin はどうせ明示的に import して使うので関係なさそう。
service は、component と同じやりかたでいけそうな気がする。
model もいけそうなので user model を共通化するような用途がありそう。</p>
<p>controller もいけそうだけどそれに付随する route からどう呼ばれるかが難しそう。</p>
<h3 id="余談-他の方法について">余談: 他の方法について</h3>
<p>多分 EmberEngine とか EmberAddon の仕組みを使って似たようなことはできそうな気はする。</p>
<p>だけど ember-rails で Engine や Addon を使うというのはそれはそれでかなり大変かと思われるので今回はそれを動かすようなことはしてない。</p>
<p>より正確にいうと、それしか方法がないかもと思って途中まで調べたけど、厳しそうだったので今回は上述の方法にしておいた。</p>
<h2 id="最後に">最後に</h2>
<p>旧来版と ES6 Module 対応版とで実装方法は異なるがどちらでも同じような使い勝手でコンポーネントを共通ライブラリとすることができることがわかった。</p>
<p>両方のパターンが使えることがわかったので、
ES6 Module 対応版への移行がまだでも躊躇せずライブラリを分割できそう。</p>
]]></content>
        </item>
        
        <item>
            <title>古い ember-rails App で ES6 Module 化を完了した</title>
            <link>https://mugijiru.github.io/posts/ember-rails-complete-modulize/</link>
            <pubDate>Tue, 23 Feb 2021 20:45:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-complete-modulize/</guid>
            <description>#10 サブフォルダのファイルを全て module に移行した #11 残りのファイルも module 化した でやってることで全てだけど 前回の記事 でやってた内容を完了まで持って行った</description>
            <content type="html"><![CDATA[<ul>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/10">#10 サブフォルダのファイルを全て module に移行した</a></li>
<li><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11">#11 残りのファイルも module 化した</a></li>
</ul>
<p>でやってることで全てだけど
<a href="/posts/ember-rails-partial-modulize/">前回の記事</a> でやってた内容を完了まで持って行った。</p>
<h2 id="サブフォルダ以下の-es6-module-化">サブフォルダ以下の ES6 Module 化</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/10">https://github.com/mugijiru/ember-rails-todo-app/pull/10</a> でやったこと。</p>
<p>これは基本的に単純で、ほぼ前回の記事でやってることを全部のフォルダに適用しただけ。</p>
<p>Model だけ命名規則が他と違うので
import 関連の処理をそこだけ分岐している</p>
<pre><code class="language-erb" data-lang="erb">&lt;% if dir == 'models' %&gt;
  &lt;% klass_name = module_name.underscore.camelize %&gt;
&lt;% else %&gt;
  &lt;% klass_name = &quot;#{module_name.underscore.camelize}#{dir.underscore.singularize.camelize}&quot; %&gt;
&lt;% end %&gt;
import &lt;%= klass_name %&gt; from 'todo-app/modules/&lt;%= dir %&gt;/&lt;%= module_name %&gt;';
TodoApp.&lt;%= klass_name %&gt; = &lt;%= klass_name %&gt;;
</code></pre><p>Model は <code>models/hoge.module.es6</code> とあったら <code>Hoge</code> として使われるようにして、他は例えば Component だと <code>components/fuga.module.es6</code> とあったら <code>FugaComponent</code> として使われるようにしているだけ。</p>
<p>あとはそれぞれのファイルを <code>*.js.es6</code> から <code>*.module.es6</code> に rename して import, export に書き換えるだけ。とても簡単だし、全部まとめて変更する必要もないので楽。</p>
<p>ただこれをやってる時に気付いたのが
<code>import-modules.js.es6.erb</code> が cache されてるおかげで
module 化対象のファイルだけ変更・移動しても import 文が変更されなくてうまく読み込まれない問題があるということ。何故か rspec は通ったりするけど。</p>
<p>まあその時は <code>rails tmp:cache:clear</code> して cache を消すか
<code>import-modules.js.es6.erb</code> に適当に空行でも加えて cache を使われないようにしたら解決する。</p>
<h2 id="router-dot-js-dot-es6-app-name-dot-js-dot-es6-environment-dot-js-dot-es6-の-es6-module-化">router.js.es6, &lt;APP_NAME&gt;.js.es6, environment.js.es6 の ES6 Module 化</h2>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11">https://github.com/mugijiru/ember-rails-todo-app/pull/11</a> でやったこと。</p>
<p>サブフォルダのファイルを全部 module にしたら後は変更しないといけないファイルはこれぐらい。</p>
<p>変更の流れは大体以下の感じ</p>
<ol>
<li>router.js.es6 をこれまでのファイルと同じように module 化</li>
<li>environment.js.es6 も同様に module 化</li>
<li>&lt;APP_NAME&gt;.js.es6 の module 化とそれに伴うファイル移動等</li>
</ol>
<h3 id="router-dot-js-dot-es6-をこれまでのファイルと同じように-module-化">router.js.es6 をこれまでのファイルと同じように module 化</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/359520f6656920ac8ef3fe623d15f2368cc66a78">https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/359520f6656920ac8ef3fe623d15f2368cc66a78</a></p>
<p>この commit でやってることそのもの。</p>
<p>拡張子を module.es6 に変更して中身を module っぽく書いて
require される順番を最後に移動し、最後に他のファイルみたいに import してあげるだけ。</p>
<h3 id="environment-dot-js-dot-es6-も同様に-module-化">environment.js.es6 も同様に module 化</h3>
<p>実はこのファイルをまともに使ってなかったので PR では後ろに回したんだけど、多分ちゃんとやるならこのタイミングかなって。</p>
<p>これもさっきの手順と同じ感じだと思う。
require するタイミングは <code>//= require ./todo-app</code> の直前になる。そのタイミングになる理由はよく知らんけど
ember-rails で generate したらそこに来るからそこでいいんだろ(適当)</p>
<p>実際 import して使われるタイミングは application.js.es6 の中で明示的に import することになるので
require_self するより前ならどこでも良さそうな気はする。</p>
<p>あと、多分、古いスタイルに書き換える時に適当にやってたのでそもそも古いスタイルでの environment の置き方が正しくなさそうな気もする。</p>
<p>一応 <a href="https://guides.emberjs.com/v1.10.0/configuring-ember/">https://guides.emberjs.com/v1.10.0/configuring-ember/</a> に</p>
<blockquote>
<p>Note that the above code must be evaluated before Ember.js loads.</p>
</blockquote>
<p>と書いてるのでそれに従って対応してたつもりだけどね。</p>
<p>ま、古いスタイルの正しいやりかたを必要としている人はいないだろうし新しい形式でちゃんと動けば良かろう。ちゃんと動くか知らんけど。</p>
<h3 id="app-name-dot-js-dot-es6-の-module-化とそれに伴うファイル移動等">&lt;APP_NAME&gt;.js.es6 の module 化とそれに伴うファイル移動等</h3>
<p><a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/d3673bfa455906abd0ff6d31d1d3f4f083bd4a71">https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/d3673bfa455906abd0ff6d31d1d3f4f083bd4a71</a>
の commit でやってることだけど、ここが結構まとめて色々やらないといけなさそう。</p>
<p>&lt;APP_NAME&gt;.js.es6 を ES6 Module 化をするんだけどここが一番色々書き変わるところ。</p>
<p>事前に Namespace を用意する必要がなくなったので require_self を一番最後にしたり、
<code>import Application from 'ember-rails/application</code> しておいてそこから extend して export して、みたいな。まあ <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/d3673bfa455906abd0ff6d31d1d3f4f083bd4a71#diff-7aa5fb21bec5b1e11d78f1b7c34b3b92f05b293d97a99ed2af713f81ea5dab82">ファイル</a> を見た方が早いか。</p>
<p>で、こいつを ES6 Module にすると ember-rails での自動 import が動くようになる。なので、事前に module 化していたファイルを全部本来の位置に戻した上でこれまでお世話になってきた <code>import-modules.js.es6.erb</code> にさよならすることになる。ま、そいつは消しやすいように別ファイルに分離していたんだけども。</p>
<p>あと当然 application.js.es6 も、他のファイルが全部 module 化された前提で書き換える必要がある。まあほとんど &lt;APP_NAME&gt;.js.es6 を import して create するだけなんだけど。</p>
<p>以上でほぼ終わりだけど、不要になった modules フォルダを消して require_tree する処理を消すのを忘れずに。麦汁さんはそれを忘れて <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/11/commits/0f90fda419f9c23f844ba2e53dc1c2fa2e9b5d51">commit を積むことになった</a></p>
<h2 id="ここまでやると何ができるようになるか">ここまでやると何ができるようになるか</h2>
<p>ember-rails で書いた上で最も最新の記述に変更できた状態となる。というわけで、これでようやく ember-cli-rails 移行する準備ができました! やったね!</p>
<p>まあぶっちゃけ ember-cli-rails 移行と module 化を同時にやっちゃうという手もあるけど、
1回1回の変更差分を小さくするには、バラバラがいいかなってことで分けてやっている。</p>
<p>だって、そうじゃないと「はい変更の多い PR はリジェクト〜wwww」ってされかねない^^</p>
]]></content>
        </item>
        
        <item>
            <title>古い ember-rails App で一部ファイルを ES6 Module 化</title>
            <link>https://mugijiru.github.io/posts/ember-rails-partial-modulize/</link>
            <pubDate>Sun, 21 Feb 2021 22:41:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-partial-modulize/</guid>
            <description>これは何? ember-rails を古いスタイルで書いておいてそれをモダン化していく企画の第一弾の記事。 何をしたのか 今回は ES6 module を使ってない ember-rails アプリケーションで一部</description>
            <content type="html"><![CDATA[<h2 id="これは何">これは何?</h2>
<p>ember-rails を古いスタイルで書いておいてそれをモダン化していく企画の第一弾の記事。</p>
<h2 id="何をしたのか">何をしたのか</h2>
<p>今回は ES6 module を使ってない ember-rails アプリケーションで一部のファイルだけ ES6 Module にしてみた。</p>
<h2 id="何が嬉しい">何が嬉しい?</h2>
<p>今回扱ってるアプリケーションのサイズはとても小さいのでまとめて置き換えることも可能というか、ぶっちゃけ <a href="https://github.com/mugijiru/ember-rails-todo-app/pull/7">古いスタイルに書き換えた PR</a> を revert するだけで
ES6 Module 化できたりする。</p>
<p>しかし、世の中に潜んでいる、レガシー化した ember-rails のプロジェクトでは全部まとめて ES6 Module にするのはファイル数が多過ぎて困難かと考え、敢えて一部のファイルだけ ES6 Module 化する方法を探してみた。</p>
<h2 id="どうやったらできるの">どうやったらできるの?</h2>
<p>簡単に言うと
ES6 Module 形式で書いたやつを import して
Ember.js Application の Namespace に放り込めばいいだけ。</p>
<h3 id="example">Example</h3>
<p>まずはコンポーネントなどを
<code>app/assets/javascripts/ember-app/components/foo.module.es6</code> ってファイル名で</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">Ember</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember&#39;</span>;

<span style="color:#66d9ef">export</span> <span style="color:#66d9ef">default</span> <span style="color:#a6e22e">Ember</span>.<span style="color:#a6e22e">Component</span>.<span style="color:#a6e22e">extend</span>({});
</code></pre></div><p>のように書いておく。拡張子が <code>.module.es6</code> というのがポイントで、そうしておくと
<a href="https://github.com/tricknotes/ember-es6%5Ftemplate">ember-es6_template</a> という Gem が自動的に ES6 の module として判定してくれるようになっている
<a href="https://github.com/tricknotes/ember-es6%5Ftemplate/blob/c1c7b8d23be7669a0aa6c5f9c71b916a3799f9a6/lib/ember/es6%5Ftemplate/sprockets.rb#L10">https://github.com/tricknotes/ember-es6%5Ftemplate/blob/c1c7b8d23be7669a0aa6c5f9c71b916a3799f9a6/lib/ember/es6%5Ftemplate/sprockets.rb#L10</a></p>
<p>そして <code>app/assets/javascripts/ember-app/application.js.es6</code> の末尾にでも</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-js" data-lang="js"><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">FooComponent</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;ember-app/components/foo&#39;</span>;

<span style="color:#a6e22e">EmberApp</span>.<span style="color:#a6e22e">FooComponent</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">FooComponent</span>;
</code></pre></div><p>のように書いたら、一応 module 形式で書けるし、それを window.EmberApp で用意した Ember.js Application で使えるって感じ。</p>
<h2 id="ファイルの数と同じ量の-import-書くの">ファイルの数と同じ量の import 書くの?</h2>
<p>だるいよね。なので import 処理は
<code>app/assets/javascripts/ember-app/import-modules.js.es6.erb</code>
という erb template でも分離して</p>
<pre><code class="language-erb" data-lang="erb">&lt;% module_dir = Rails.root.join('app/assets/javascripts/ember-app/modules') %&gt;
&lt;% Dir.each_child(module_dir) do |dir| %&gt;
  &lt;% next unless FileTest.directory?(&quot;#{module_dir}/#{dir}&quot;) %&gt;
  &lt;% Dir.glob('*.module.es6', base: &quot;#{module_dir}/#{dir}&quot;) do |module_file| %&gt;
    &lt;% module_name = File.basename(module_file, '.module.es6') %&gt;
    &lt;% klass_name = &quot;#{module_name.underscore.camelize}#{dir.underscore.singularize.camelize}&quot; %&gt;
import &lt;%= klass_name %&gt; from 'ember-app/modules/&lt;%= dir %&gt;/&lt;%= module_name %&gt;';
EmberApp.&lt;%= klass_name %&gt; = &lt;%= klass_name %&gt;;
  &lt;% end %&gt;
&lt;% end %&gt;
</code></pre><p>とでも書いておけば全部いい感じに読んでくれる。</p>
<h2 id="関連-pr">関連 PR</h2>
<p>実際に動くコードは以下の PR で用意した。
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/8">https://github.com/mugijiru/ember-rails-todo-app/pull/8</a>
<a href="https://github.com/mugijiru/ember-rails-todo-app/pull/9">https://github.com/mugijiru/ember-rails-todo-app/pull/9</a></p>
<p>最初の PR で <code>modules</code> フォルダにさらに components フォルダを掘ってその中にファイルを配置している。</p>
<p>その方が全部移行できた後にまるっと置き換えするのに楽そうだからだ。</p>
<p>また import して Namespace に放り込む処理も別ファイルに追い出している。これも、完全移行が済んだら不要になるファイルなので消しやすさを重視して分割しておいた。</p>
<p>さらに後続の PR で、複数のタイプが来ても対応できるように書き換えている。
Model は対応できてないけど、ま、Model は移行してないのでとりあえず放置。</p>
<p>CI でテストも通しているしバッチリだと思う。デプロイできるようにはしてないからサーバで動くかは確認してないけど、ま、大丈夫だろ</p>
]]></content>
        </item>
        
        <item>
            <title>ember-rails で書いた Web アプリを GitHub で公開した</title>
            <link>https://mugijiru.github.io/posts/publish-ember-rails-app/</link>
            <pubDate>Sun, 21 Feb 2021 15:40:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/publish-ember-rails-app/</guid>
            <description>この間の記事 で書いたように ember-rails で簡単なアプリケーションを作ってた。よくある TODO アプリである。 先週時点では「テストとかなくてもいいから動けばいいだ</description>
            <content type="html"><![CDATA[<p><a href="/posts/ember-rails-in-2021/">この間の記事</a> で書いたように
ember-rails で簡単なアプリケーションを作ってた。よくある TODO アプリである。</p>
<figure>
    <img src="/ox-hugo/screenshot-ember-rails-todo-app.png"/> 
</figure>

<p>先週時点では「テストとかなくてもいいから動けばいいだろ」って気持ちだったけどなんとなーくテストを追加したくなったりあんまり慣れてない docker-compose 対応してみたりしていたのと平日はこのプログラムに触れてなかったので、結構日が空いてしまった。</p>
<p>まあ、それはともかくとして、とりあえず <a href="https://github.com/mugijiru/ember-rails-todo-app/">https://github.com/mugijiru/ember-rails-todo-app/</a> に置いておいた現時点の最新コミットで <a href="https://github.com/mugijiru/ember-rails-todo-app/tree/v1.1.1">v1.1.1</a> のタグを振ってるやつは自分の知ってる一番古いスタイルで書かれてる状態にしてある。</p>
<h2 id="使ってる-gem">使ってる Gem</h2>
<ul>
<li>Ember.js 関係
<ul>
<li>ember-rails</li>
<li>ember-source</li>
<li>jquery-rails
<ul>
<li>Ember.js は 2 系まで jquery に依存しているので
<ul>
<li>よく見ると ember-rails の依存に入ってるから書かなくて良かったな……</li>
</ul>
</li>
</ul>
</li>
<li>active_model_serializers 0.9
<ul>
<li>0.9 系じゃないとうまく動かないっぽい</li>
</ul>
</li>
</ul>
</li>
<li>CSS framework
<ul>
<li>bootstrap-sass
<ul>
<li>レガシー感の演出のため敢えてこれにしている</li>
</ul>
</li>
</ul>
</li>
<li>テスト関係
<ul>
<li>rspec-rails</li>
<li>factory_bot_rails</li>
<li>database_rewinder</li>
<li>capybara</li>
<li>selenium-webdriver</li>
</ul>
</li>
</ul>
<p>あたり。</p>
<h2 id="レガシー感の演出">レガシー感の演出</h2>
<p>レガシー感を出すために bootstrap-sass(Bootstrap3系になる)を使ったりはしているがあまり特別なものは使ってない。</p>
<p>また ember-rails で ember アプリのソースコードを generate すると
es6 module を使ったようなコードが出力されるけど、これも敢えてレガシー感を出すために module を使わない形式に書き直している。</p>
<p>よりレガシー感を出すために CoffeeScript にするという手もあったけど、さすがにそこまでは頑張りたくないw
もう何年も触ってないよ CoffeeScript&hellip;</p>
<p>そしてページ全体を Ember.js にはしないでページの一部を Ember.js にする <a href="https://guides.emberjs.com/v2.18.0/configuring-ember/embedding-applications/">埋め込み</a> 形式を採用している。既存のアプリに Ember.js を後乗せした感の演出である。実際、構築時には一時的に普通の Rails App として動くようにしていた。</p>
<p>他にこだわったところは、今回は単一のアプリケーションしか動かしてないけど
<a href="https://github.com/emberjs/ember-rails#multiple-ember-application">Multiple Ember Application</a>
の作法に則って、Ember アプリケーションを追加で乗せられるようにしている。これにより「この画面も Ember 化しようず」という流れで
Ember アプリが複数動いてる状態により近くなったんじゃないかなと。実際今回動いてるのは1つだから、ちょっと違うけどね。。。</p>
<h2 id="最後に">最後に</h2>
<p>ここから段々と最新の Ember.js を使えるように寄せていくつもり。</p>
]]></content>
        </item>
        
        <item>
            <title>2021年にもなって ember-rails で新規アプリを書いてみてる</title>
            <link>https://mugijiru.github.io/posts/ember-rails-in-2021/</link>
            <pubDate>Sat, 13 Feb 2021 01:15:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/ember-rails-in-2021/</guid>
            <description>少し思うところがあって、 2021 年になったというのに ember-rails を使って新規で Web アプリを書いている。 ember-rails とは? ember-rails は Ember.js という Web フロントエンド MVC なフレームワークを</description>
            <content type="html"><![CDATA[<p>少し思うところがあって、
2021 年になったというのに <a href="https://github.com/emberjs/ember-rails">ember-rails</a> を使って新規で Web アプリを書いている。</p>
<h2 id="ember-rails-とは">ember-rails とは?</h2>
<p>ember-rails は
Ember.js という Web フロントエンド MVC なフレームワークを
Rails といい感じに連携してくれて快適な Web アプリケーション開発体験を提供してくれるものであった。</p>
<p>過去形なのは、ember-rails は Rails3 とか 4 とかの時代に主に使われていて既にメンテナンスされてないのと、今はそれよりも良い <a href="https://github.com/thoughtbot/ember-cli-rails">ember-cli-rails</a> というのがあるから。</p>
<h2 id="今-ember-rails-を使うと何がつらいか">今 ember-rails を使うと何がつらいか</h2>
<p>色々つらい。</p>
<h3 id="まずメンテナンスが止まってる">まずメンテナンスが止まってる</h3>
<p>なので Rails 6 で動くかがわからない。多分、試している人はいないし、自分もそこまで試す気力はない。</p>
<h3 id="ember-dot-js-のサポートが-2-dot-18-dot-2-までとなっている">Ember.js のサポートが 2.18.2 までとなっている。</h3>
<p>より詳細に話すと
ember-rails が依存している Gem である ember-source で本当は 3.0.0.beta.2 まで出てるんだけど、β版のことは無視する。
<a href="https://rubygems.org/gems/ember-source/versions/2.18.2">https://rubygems.org/gems/ember-source/versions/2.18.2</a></p>
<p>で、その 2.18.2 は既にサポートされてないバージョンである。</p>
<p>サポートされてないバージョンを使うのはセキュリティ面でもまずいしもはや情報もあまり落ちてないので苦行である。</p>
<p>Ember.js 公式サイトのドキュメントが過去のバージョンのものも残されているのでそれを頼りにするしかない。というか公式で残しててくれてありがとう。それがないと何もできないよ。</p>
<h3 id="ember-rails-だと-ember-dot-js-の-addon-が導入できない">ember-rails だと Ember.js の addon が導入できない</h3>
<p>例えば Handlebars でロジックを書く上でとても基本的な比較用のヘルパーを提供してくれる <a href="https://github.com/jmurphyau/ember-truth-helpers">ember-truth-helper</a> が使えない。これが使えないはめっちゃ不便で、それをなんとかするために同じようなコードを自前で用意するハメになる。</p>
<p>他にも <a href="https://github.com/ember-community-russia/awesome-ember">ember-community-russia/awesome-ember</a> に載っている色々なものが使えないわけだ。つらいどころか悲しくなってくる。</p>
<h3 id="自動テストが書けない">自動テストが書けない</h3>
<p>Ember.js は QUnit で自動テストができるようになっているのだが
ember-rails だとそれも使えない。すなわちフロントエンドのコンポーネントの単体テストが書けないのである。</p>
<h2 id="それでも-ember-rails-を使いたい方には">それでも ember-rails を使いたい方には</h2>
<p>どうして素直に ember-cli-rails や ember-cli そのものを使おうとしないのかはわからないけどどうしても ember-rails の世界に住みたいのであれば
<a href="https://github.com/discourse/discourse">discourse</a> のソースを参考にしたら良いと思う。</p>
<p>どうやら <a href="https://github.com/discourse/discourse/pull/11932">ember-cli に乗り換える方針で動いているよう</a> だが今日時点の Gemfile には未だに discourse-ember-source などの記述が残っている状態であり、まだ完全移行はできてない様子。</p>
<p><a href="https://rubygems.org/gems/discourse-ember-source/versions/3.12.2.2">discourse-ember-source</a> は 3.12 系まで追従していたようなのでそこまでは discourse の真似をすれば使えるだろう。</p>
<p>また彼らは ember-rails を使いながら qunit でのテストもできるようにしているようである。正直マジか頑張ったなって気持ち。ちょっとどうやって動かしているのかはわからない。あんまり調べる気力もない。なんとなくわかったことは ES6 の module システムを活用して頑張ってる雰囲気があることである。</p>
<p>他にも addon も使えるようにしている様子でもあるが、これもちょっとよくわかってない。あまり adoon が使われてる気もしないが……。</p>
<p>ともかく ember-rails を独自に拡張した上で色々頑張っているようである。すごい。それでももう ember-cli-rails に乗り換えようとしているようなので今から ember-rails の世界に住もうとするのはやめた方がいいはず。</p>
<p>あ、よく見ると Rails は 6.0 系だ。ってことは少なくとも discourse-ember-rails なら Rails 6.0 でも動くわけか。なるほど。</p>
<h2 id="で-なぜ自分は-ember-rails-で新規アプリを書いているか">で、なぜ自分は ember-rails で新規アプリを書いているか</h2>
<p>マゾなので、敢えてその環境で新規アプリを用意しておいてそこから ember-cli-rails に移行する、みたいなことをしてみたいから。</p>
<p>本当は自分で ember-rails なアプリを書くつもりはなかったんだけどサンプルになるようなアプリが探せなかったってのもある。これが Yak Shaving か〜と思いながら粛々と小さなアプリを書いていくのであった</p>
<p>できたらまた記事にする。アプリ自体は公開しないけど、ソースは GitHub に上げるつもり。</p>
]]></content>
        </item>
        
        <item>
            <title>browse-at-remote を導入した</title>
            <link>https://mugijiru.github.io/posts/add-browse-at-remote/</link>
            <pubDate>Sat, 23 Jan 2021 23:18:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/add-browse-at-remote/</guid>
            <description>仕事中、プルリクのレビューをする際に、「ここのコードがこんな感じになってるから〜」みたいな感じで既存コードへのリンクを張ることがちょくちょく</description>
            <content type="html"><![CDATA[<p>仕事中、プルリクのレビューをする際に、「ここのコードがこんな感じになってるから〜」みたいな感じで既存コードへのリンクを張ることがちょくちょくある。</p>
<p>そういうことをする時、まずそもそも差し示したいコードを確認するんだけどその時は Emacs の中で探す方が早い。で、探して確認するまではいいんだけど、そこから GitHub 上のコードへのリンクを取得しようとするとちょっと面倒。</p>
<p>これまでは、GitHub のリポジトリのトップからディレクトリを辿って行って当該コードを再度探していました。めんどくさいねっ。</p>
<p>というわけで解決する手段を探していて最近導入したのが <a href="https://github.com/rmuslimov/browse-at-remote">browse-at-remote</a> というやつ。</p>
<p>こいつを入れてる状態で、GitHub のリポジトリに突っ込んであるコードの上で
<code>M-x browse-at-remote</code> を実行すると
GitHub でのリポジトリでのコードの位置でブラウザを開いてくれる。</p>
<p>コードの上でと書いたけど、リージョンを選択していればその範囲が選択された状態で実行すると選択した行がハイライトされた状態で開いて便利。</p>
<p>その状態から GitHub 上で <code>Copy permalink</code> をしておいて
PR のコメントにコピーしたリンクを貼り付けるとコードも表示されて便利。</p>
<p>で、結構よく使うコマンドとなったので
Hydra から即呼び出せるようにしてある。</p>
<p>Global に使うコマンドを突っ込んでる Hydra は key-chord で <code>jk</code> を叩くと呼べるようにしていてその中で <code>B</code> を叩けば browse-at-point が呼ばれるようにしてある。</p>
<p>というわけで、導入と Hydra の設定を追加しているプルリクが以下になります。
<a href="https://github.com/mugijiru/.emacs.d/pull/205">https://github.com/mugijiru/.emacs.d/pull/205</a></p>
<p>という使い方をしているけど、実は似た機能を提供している <a href="https://github.com/sshaw/git-link">git-link</a> で <code>git-link-use-commit</code> のフラグを立てておいて他にもいくつか設定を入れたりしたらもっといい感じのことができるのかもしれない。今度試すか……。</p>
]]></content>
        </item>
        
        <item>
            <title>新年明けましておめでとうございます</title>
            <link>https://mugijiru.github.io/posts/happy-new-year-2021/</link>
            <pubDate>Sat, 02 Jan 2021 20:31:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/happy-new-year-2021/</guid>
            <description>&lt;p&gt;新年明けましておめでとうございます。麦汁です。昨年の終わり頃、世間では AdventCalendar で賑ってる頃に、ふと「サイトのリニューアルしたいなあ」なんてことを思って、リニューアルに着手しましたが、ようやくそれが実りそうです。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>新年明けましておめでとうございます。麦汁です。昨年の終わり頃、世間では AdventCalendar で賑ってる頃に、ふと「サイトのリニューアルしたいなあ」なんてことを思って、リニューアルに着手しましたが、ようやくそれが実りそうです。</p>
<p>なんでそんなことをしてるかというと前の記事 <a href="/posts/starting-hugo/">Hugo 始めました</a> でも書いたように「自分が作ったサイトだっせー」ってのが1つあります。</p>
<p>それを構築した時には「デザインとかも全部自分でやっちまおう」ということで全部やろうとしていたのですがデザインセンスが壊滅的だったとか時間がろくに取れないとかやる気が他に吸われていったとかでイマイチなまま放置していました。よくないですねえ。</p>
<p>あと、そことは別にブログサービスを借りて使ってるのですがそっちはそっちで更新がだるいなってのもあってリニューアルと同時に今後のブログ更新はこっちにしてしまおう、というのもあったりします。</p>
<p>Hugo でブログもやってしまう方が <a href="https://ox-hugo.scripter.co/">ox-hugo</a> も使って記事を書き出せるので
org-mode 使い的には幸せになれそうですし。</p>
<p>あとは折角リニューアルしたんだからモチベーションが続くことを願っています。</p>
<p>というわけで 2021 年の抱負は「月に2回はブログを更新する」とします。</p>
<p>結構、緩めな抱負ですが、仕事じゃないのでこのぐらいの方が良かろう……。</p>]]></content>
        </item>
        
        <item>
            <title>Hugo 始めました</title>
            <link>https://mugijiru.github.io/posts/starting-hugo/</link>
            <pubDate>Sun, 20 Dec 2020 15:22:00 +0900</pubDate>
            
            <guid>https://mugijiru.github.io/posts/starting-hugo/</guid>
            <description>&lt;p&gt;Hugo はなんか Emacs 界隈で流行ってるし、自分のサイトだっせーなーって思ってたので
Hugo を使って、公開されてるテンプレートを適用して
Web サイトを再構築してみることにした。&lt;/p&gt;</description>
            <content type="html"><![CDATA[<p>Hugo はなんか Emacs 界隈で流行ってるし、自分のサイトだっせーなーって思ってたので
Hugo を使って、公開されてるテンプレートを適用して
Web サイトを再構築してみることにした。</p>
<p>他の静的サイトジェネレータもちょっと検討したけど機能面とかも考慮した上で Hugo がいいかなって。主な理由は「流行ってるから」ですが。ほら、流行りに乗りたいじゃん。ちょっと乗り遅れてる気もするけど。</p>
<p>今、とりあえず作ってる最中なんだけど、つい BBS とかチャットとかリンク集とか置きたくなる。
90年代または2000年代脳である。お絵描き BBS も置いたろうかって気持ちになる。</p>]]></content>
        </item>
        
    </channel>
</rss>
