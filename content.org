#+TODO: TODO(t) | DONE(o)
#+HUGO_BASE_DIR: ./
#+HUGO_SECTION: ./
#+title: 麦汁三昧
#+author: mugijiru

* 麦汁三昧
** DONE About
   CLOSED: [2020-12-20 日 11:59]
   :PROPERTIES:
   :EXPORT_FILE_NAME: about
   :END:

   この Web サイトは Web プログラマである麦汁の個人サイトです。

   気が向いたらブログ記事を更新したりするはず。

** DONE Profile
   CLOSED: [2020-12-20 日 12:15]
   :PROPERTIES:
   :EXPORT_FILE_NAME: profile
   :END:

   都内で Ruby on Rails と Vue.js を使った Web アプリケーションを開発している Web プログラマ。
   一部インフラ(AWS)もかじっている。

   最近は実装よりも、仕様策定や全体の進捗管理、調査、その他雑用をしていることが多い。

   好きなエディタは Emacs。サブで Vim も使っている。

   1983年生まれ。沖縄出身。

*** 経歴
    - 2009年 :: 沖縄の IT ベンチャー企業に就職しWebプログラマとして活動
    - 2012年 :: 別の沖縄の IT ベンチャー企業に転職し引き続きWebプログラマとして活動
    - 2016年 :: 都内 IT ベンチャー企業に転職しWebプログラマとして活動
    - 現在   :: リードエンジニアとして活動中

*** SNSなど
    - Twitter :: [[https://twitter.com/mugijiru][@mugijiru]]
    - GitHub :: [[https://github.com/mugijiru][mugijiru]]
    - 旧Blog :: [[http://mugijiru.seesaa.net][麦汁三昧]]

** Blog
   :PROPERTIES:
   :EXPORT_HUGO_SECTION: posts
   :END:

*** DONE Hugo 始めました                                              :@雑記:
    CLOSED: [2020-12-20 日 15:22]
    :PROPERTIES:
    :EXPORT_FILE_NAME: starting-hugo
    :END:

    Hugo はなんか Emacs 界隈で流行ってるし、
    自分のサイトだっせーなーって思ってたので
    Hugo を使って、公開されてるテンプレートを適用して
    Web サイトを再構築してみることにした。

    <!--more-->

    他の静的サイトジェネレータもちょっと検討したけど
    機能面とかも考慮した上で Hugo がいいかなって。
    主な理由は「流行ってるから」ですが。
    ほら、流行りに乗りたいじゃん。ちょっと乗り遅れてる気もするけど。

    今、とりあえず作ってる最中なんだけど、
    つい BBS とかチャットとかリンク集とか置きたくなる。
    90年代または2000年代脳である。
    お絵描き BBS も置いたろうかって気持ちになる。
*** DONE 新年明けましておめでとうございます                           :@雑記:
    CLOSED: [2021-01-02 土 20:31]
    :PROPERTIES:
    :EXPORT_FILE_NAME: happy-new-year-2021
    :END:

    新年明けましておめでとうございます。麦汁です。
    昨年の終わり頃、世間では AdventCalendar で賑ってる頃に、
    ふと「サイトのリニューアルしたいなあ」なんてことを思って、
    リニューアルに着手しましたが、ようやくそれが実りそうです。

    <!--more-->

    なんでそんなことをしてるかというと
    前の記事 [[*Hugo 始めました][Hugo 始めました]] でも書いたように
    「自分が作ったサイトだっせー」ってのが1つあります。

    それを構築した時には
    「デザインとかも全部自分でやっちまおう」ということで全部やろうとしていたのですが
    デザインセンスが壊滅的だったとか時間がろくに取れないとかやる気が他に吸われていったとかで
    イマイチなまま放置していました。よくないですねえ。

    あと、そことは別にブログサービスを借りて使ってるのですが
    そっちはそっちで更新がだるいなってのもあって
    リニューアルと同時に今後のブログ更新はこっちにしてしまおう、というのもあったりします。

    Hugo でブログもやってしまう方が [[https://ox-hugo.scripter.co/][ox-hugo]] も使って記事を書き出せるので
    org-mode 使い的には幸せになれそうですし。

    あとは折角リニューアルしたんだからモチベーションが続くことを願っています。

    というわけで 2021 年の抱負は「月に2回はブログを更新する」とします。

    結構、緩めな抱負ですが、仕事じゃないのでこのぐらいの方が良かろう……。
*** DONE browse-at-remote を導入した                                 :@Emacs:
    CLOSED: [2021-01-23 土 23:18]
    :PROPERTIES:
    :EXPORT_FILE_NAME: add-browse-at-remote
    :END:

    仕事中、プルリクのレビューをする際に、
    「ここのコードがこんな感じになってるから〜」みたいな感じで
    既存コードへのリンクを張ることがちょくちょくある。

    そういうことをする時、まずそもそも差し示したいコードを確認するんだけど
    その時は Emacs の中で探す方が早い。
    で、探して確認するまではいいんだけど、そこから GitHub 上のコードへのリンクを取得しようとするとちょっと面倒。

    これまでは、GitHub のリポジトリのトップからディレクトリを辿って行って
    当該コードを再度探していました。めんどくさいねっ。

    というわけで解決する手段を探していて
    最近導入したのが [[https://github.com/rmuslimov/browse-at-remote][browse-at-remote]] というやつ。

    こいつを入れてる状態で、GitHub のリポジトリに突っ込んであるコードの上で
    ~M-x browse-at-remote~ を実行すると
    GitHub でのリポジトリでのコードの位置でブラウザを開いてくれる。

    コードの上でと書いたけど、リージョンを選択していればその範囲が選択された状態で実行すると
    選択した行がハイライトされた状態で開いて便利。

    その状態から GitHub 上で ~Copy permalink~ をしておいて
    PR のコメントにコピーしたリンクを貼り付けるとコードも表示されて便利。

    で、結構よく使うコマンドとなったので
    Hydra から即呼び出せるようにしてある。

    Global に使うコマンドを突っ込んでる Hydra は key-chord で ~jk~ を叩くと呼べるようにしていて
    その中で ~B~ を叩けば browse-at-point が呼ばれるようにしてある。

    というわけで、導入と Hydra の設定を追加しているプルリクが以下になります。
    https://github.com/mugijiru/.emacs.d/pull/205

    という使い方をしているけど、
    実は似た機能を提供している [[https://github.com/sshaw/git-link][git-link]] で ~git-link-use-commit~ のフラグを立てておいて
    他にもいくつか設定を入れたりしたらもっといい感じのことができるのかもしれない。
    今度試すか……。

*** DONE 2021年にもなって ember-rails で新規アプリを書いてみてる :@Rails:@Ember_js:
    CLOSED: [2021-02-13 土 01:15]
    :PROPERTIES:
    :EXPORT_FILE_NAME: ember-rails-in-2021
    :END:

    少し思うところがあって、
    2021 年になったというのに [[https://github.com/emberjs/ember-rails][ember-rails]] を使って新規で Web アプリを書いている。

**** ember-rails とは?

     ember-rails は
     Ember.js という Web フロントエンド MVC なフレームワークを
     Rails といい感じに連携してくれて快適な Web アプリケーション開発体験を提供してくれるものであった。

     過去形なのは、ember-rails は Rails3 とか 4 とかの時代に主に使われていて
     既にメンテナンスされてないのと、
     今はそれよりも良い [[https://github.com/thoughtbot/ember-cli-rails][ember-cli-rails]] というのがあるから。

**** 今 ember-rails を使うと何がつらいか

     色々つらい。

***** まずメンテナンスが止まってる
      なので Rails 6 で動くかがわからない。
      多分、試している人はいないし、自分もそこまで試す気力はない。

***** Ember.js のサポートが 2.18.2 までとなっている。
      より詳細に話すと
      ember-rails が依存している Gem である ember-source で
      本当は 3.0.0.beta.2 まで出てるんだけど、β版のことは無視する。
      https://rubygems.org/gems/ember-source/versions/2.18.2

      で、その 2.18.2 は既にサポートされてないバージョンである。

      サポートされてないバージョンを使うのはセキュリティ面でもまずいし
      もはや情報もあまり落ちてないので苦行である。

      Ember.js 公式サイトのドキュメントが
      過去のバージョンのものも残されているのでそれを頼りにするしかない。
      というか公式で残しててくれてありがとう。それがないと何もできないよ。

***** ember-rails だと Ember.js の addon が導入できない
      例えば Handlebars でロジックを書く上で
      とても基本的な比較用のヘルパーを提供してくれる [[https://github.com/jmurphyau/ember-truth-helpers][ember-truth-helper]] が使えない。
      これが使えないはめっちゃ不便で、
      それをなんとかするために同じようなコードを自前で用意するハメになる。

      他にも [[https://github.com/ember-community-russia/awesome-ember][ember-community-russia/awesome-ember]] に載っている色々なものが使えないわけだ。
      つらいどころか悲しくなってくる。

***** 自動テストが書けない
      Ember.js は QUnit で自動テストができるようになっているのだが
      ember-rails だとそれも使えない。
      すなわちフロントエンドのコンポーネントの単体テストが書けないのである。

**** それでも ember-rails を使いたい方には

     どうして素直に ember-cli-rails や ember-cli そのものを使おうとしないのかはわからないけど
     どうしても ember-rails の世界に住みたいのであれば
     [[https://github.com/discourse/discourse][discourse]] のソースを参考にしたら良いと思う。

     どうやら [[https://github.com/discourse/discourse/pull/11932][ember-cli に乗り換える方針で動いているよう]] だが
     今日時点の Gemfile には未だに discourse-ember-source などの記述が残っている状態であり、
     まだ完全移行はできてない様子。

     [[https://rubygems.org/gems/discourse-ember-source/versions/3.12.2.2][discourse-ember-source]] は 3.12 系まで追従していたようなので
     そこまでは discourse の真似をすれば使えるだろう。

     また彼らは ember-rails を使いながら qunit でのテストもできるようにしているようである。
     正直マジか頑張ったなって気持ち。
     ちょっとどうやって動かしているのかはわからない。
     あんまり調べる気力もない。
     なんとなくわかったことは ES6 の module システムを活用して頑張ってる雰囲気があることである。

     他にも addon も使えるようにしている様子でもあるが、
     これもちょっとよくわかってない。
     あまり adoon が使われてる気もしないが……。

     ともかく ember-rails を独自に拡張した上で色々頑張っているようである。すごい。
     それでももう ember-cli-rails に乗り換えようとしているようなので
     今から ember-rails の世界に住もうとするのはやめた方がいいはず。

     あ、よく見ると Rails は 6.0 系だ。
     ってことは少なくとも discourse-ember-rails なら Rails 6.0 でも動くわけか。なるほど。

**** で、なぜ自分は ember-rails で新規アプリを書いているか

     マゾなので、敢えてその環境で新規アプリを用意しておいて
     そこから ember-cli-rails に移行する、みたいなことをしてみたいから。

     本当は自分で ember-rails なアプリを書くつもりはなかったんだけど
     サンプルになるようなアプリが探せなかったってのもある。
     これが Yak Shaving か〜と思いながら粛々と小さなアプリを書いていくのであった

     できたらまた記事にする。
     アプリ自体は公開しないけど、ソースは GitHub に上げるつもり。

*** DONE ember-rails で書いた Web アプリを GitHub で公開した :@Rails:@Ember_js:
    CLOSED: [2021-02-21 日 15:40]
    :PROPERTIES:
    :EXPORT_FILE_NAME: publish-ember-rails-app
    :END:

    [[*2021年にもなって ember-rails で新規アプリを書いてみてる][この間の記事]] で書いたように
    ember-rails で簡単なアプリケーションを作ってた。
    よくある TODO アプリである。

    [[file:images/screenshot-ember-rails-todo-app.png]]

    先週時点では「テストとかなくてもいいから動けばいいだろ」って気持ちだったけど
    なんとなーくテストを追加したくなったり
    あんまり慣れてない docker-compose 対応してみたりしていたのと
    平日はこのプログラムに触れてなかったので、結構日が空いてしまった。

    まあ、それはともかくとして、
    とりあえず [[https://github.com/mugijiru/ember-rails-todo-app/]] に置いておいた
    現時点の最新コミットで [[https://github.com/mugijiru/ember-rails-todo-app/tree/v1.1.1][v1.1.1]] のタグを振ってるやつは
    自分の知ってる一番古いスタイルで書かれてる状態にしてある。

**** 使ってる Gem

     - Ember.js 関係
       - ember-rails
       - ember-source
       - jquery-rails
         - Ember.js は 2 系まで jquery に依存しているので
           - よく見ると ember-rails の依存に入ってるから書かなくて良かったな……
       - active_model_serializers 0.9
         - 0.9 系じゃないとうまく動かないっぽい
     - CSS framework
       - bootstrap-sass
         - レガシー感の演出のため敢えてこれにしている
     - テスト関係
       - rspec-rails
       - factory_bot_rails
       - database_rewinder
       - capybara
       - selenium-webdriver

     あたり。

**** レガシー感の演出

     レガシー感を出すために bootstrap-sass(Bootstrap3系になる)を使ったりはしているが
     あまり特別なものは使ってない。

     また ember-rails で ember アプリのソースコードを generate すると
     es6 module を使ったようなコードが出力されるけど、
     これも敢えてレガシー感を出すために module を使わない形式に書き直している。

     よりレガシー感を出すために CoffeeScript にするという手もあったけど、
     さすがにそこまでは頑張りたくないw
     もう何年も触ってないよ CoffeeScript...

     そしてページ全体を Ember.js にはしないで
     ページの一部を Ember.js にする [[https://guides.emberjs.com/v2.18.0/configuring-ember/embedding-applications/][埋め込み]] 形式を採用している。
     既存のアプリに Ember.js を後乗せした感の演出である。
     実際、構築時には一時的に普通の Rails App として動くようにしていた。

     他にこだわったところは、今回は単一のアプリケーションしか動かしてないけど
     [[https://github.com/emberjs/ember-rails#multiple-ember-application][Multiple Ember Application]]
     の作法に則って、Ember アプリケーションを追加で乗せられるようにしている。
     これにより「この画面も Ember 化しようず」という流れで
     Ember アプリが複数動いてる状態により近くなったんじゃないかなと。
     実際今回動いてるのは1つだから、ちょっと違うけどね。。。

**** 最後に

     ここから段々と最新の Ember.js を使えるように寄せていくつもり。

*** DONE 古い ember-rails App で一部ファイルを ES6 Module 化 :@Rails:@Ember_js:
    CLOSED: [2021-02-21 日 22:41]
    :PROPERTIES:
    :EXPORT_FILE_NAME: ember-rails-partial-modulize
    :END:
**** これは何?
     ember-rails を古いスタイルで書いておいて
     それをモダン化していく企画の第一弾の記事。

**** 何をしたのか
     今回は ES6 module を使ってない ember-rails アプリケーションで
     一部のファイルだけ ES6 Module にしてみた。

**** 何が嬉しい?
     今回扱ってるアプリケーションのサイズはとても小さいので
     まとめて置き換えることも可能というか、
     ぶっちゃけ [[https://github.com/mugijiru/ember-rails-todo-app/pull/7][古いスタイルに書き換えた PR]] を revert するだけで
     ES6 Module 化できたりする。

     しかし、世の中に潜んでいる、レガシー化した ember-rails のプロジェクトでは
     全部まとめて ES6 Module にするのはファイル数が多過ぎて困難かと考え、
     敢えて一部のファイルだけ ES6 Module 化する方法を探してみた。

**** どうやったらできるの?

     簡単に言うと
     ES6 Module 形式で書いたやつを import して
     Ember.js Application の Namespace に放り込めばいいだけ。

***** Example
      まずはコンポーネントなどを
      ~app/assets/javascripts/ember-app/components/foo.module.es6~ ってファイル名で

      #+begin_src js
      import Ember from 'ember';

      export default Ember.Component.extend({});
      #+end_src

      のように書いておく。
      拡張子が ~.module.es6~ というのがポイントで、
      そうしておくと
      [[https://github.com/tricknotes/ember-es6_template][ember-es6_template]] という Gem が
      自動的に ES6 の module として判定してくれるようになっている
      https://github.com/tricknotes/ember-es6_template/blob/c1c7b8d23be7669a0aa6c5f9c71b916a3799f9a6/lib/ember/es6_template/sprockets.rb#L10

      そして ~app/assets/javascripts/ember-app/application.js.es6~ の末尾にでも

      #+begin_src js
      import FooComponent from 'ember-app/components/foo';

      EmberApp.FooComponent = FooComponent;
      #+end_src

      のように書いたら、
      一応 module 形式で書けるし、
      それを window.EmberApp で用意した Ember.js Application で使えるって感じ。

**** ファイルの数と同じ量の import 書くの?

     だるいよね。
     なので import 処理は
     ~app/assets/javascripts/ember-app/import-modules.js.es6.erb~
     という erb template でも分離して

     #+begin_src erb
     <% module_dir = Rails.root.join('app/assets/javascripts/ember-app/modules') %>
     <% Dir.each_child(module_dir) do |dir| %>
       <% next unless FileTest.directory?("#{module_dir}/#{dir}") %>
       <% Dir.glob('*.module.es6', base: "#{module_dir}/#{dir}") do |module_file| %>
         <% module_name = File.basename(module_file, '.module.es6') %>
         <% klass_name = "#{module_name.underscore.camelize}#{dir.underscore.singularize.camelize}" %>
     import <%= klass_name %> from 'ember-app/modules/<%= dir %>/<%= module_name %>';
     EmberApp.<%= klass_name %> = <%= klass_name %>;
       <% end %>
     <% end %>
     #+end_src

     とでも書いておけば全部いい感じに読んでくれる。

**** 関連 PR

     実際に動くコードは以下の PR で用意した。
     https://github.com/mugijiru/ember-rails-todo-app/pull/8
     https://github.com/mugijiru/ember-rails-todo-app/pull/9

     最初の PR で ~modules~ フォルダにさらに components フォルダを掘って
     その中にファイルを配置している。

     その方が全部移行できた後にまるっと置き換えするのに楽そうだからだ。

     また import して Namespace に放り込む処理も別ファイルに追い出している。
     これも、完全移行が済んだら不要になるファイルなので
     消しやすさを重視して分割しておいた。

     さらに後続の PR で、
     複数のタイプが来ても対応できるように書き換えている。
     Model は対応できてないけど、ま、Model は移行してないのでとりあえず放置。

     CI でテストも通しているしバッチリだと思う。
     デプロイできるようにはしてないからサーバで動くかは確認してないけど、ま、大丈夫だろ

*** TODO org-agenda を活用し始めた                              :@Emacs:@org:
    :PROPERTIES:
    :EXPORT_FILE_NAME: try-org-agenda
    :END:

    昨年から org-mode をもっと活用していこうということで、
    org-clock を使い始めたり org-pomodoro を導入したり org-habits を設定してみたりしている麦汁さんです。

    org-mode は機能が豊富過ぎてマジで何が出来るのか全貌を把握し切れてないのですが、
    そんな中で、やっぱり全然把握できてなくて使ってなかった機能の1つが org-agenda ってやつ。

    なんかうまく使うと、予定を組んでたり締切を設定していたりするタスクが一目瞭然になって
    お仕事などが捗るという素敵な機能らしいのだけど、
    どうもイマイチ使い方がわからなくて放置していました。
